{"version":3,"sources":["App.tsx","serviceWorker.js","index.tsx"],"names":["App","props","state","dob","moment","this","today","startOf","diffBreakdown","birthdate","preciseDiff","years","months","days","age","yearsString","className","src","window","location","origin","alt","relativeAgeDate","href","url","width","height","title","display","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RA0EeA,E,kDA/Db,WAAYC,GAAsB,IAAD,8BAC/B,cAAMA,IACDC,MAAQ,CAACC,IAAK,cAFY,E,wDAM/B,OAAOC,IAAOC,KAAKH,MAAMC,O,wCAIzB,IAAMG,EAAQF,MAASG,QAAQ,OAEzBC,EAAgBH,KAAKI,YAAYC,YAAYJ,GAAO,GACpDK,EAAQH,EAAcG,MACtBC,EAASJ,EAAcI,OACvBC,EAAOL,EAAcK,KACvBC,EAAM,GAIV,GAHAA,GAAG,UAAOF,EAAP,WACHE,GAAG,WAAQD,EAAR,SACHC,GAAO,OACHH,EAAQ,EAAG,CACb,IAAII,EAAW,UAAMJ,EAAN,SACXA,EAAQ,IACVI,GAAe,KAEjBD,EAAG,UAAMC,EAAN,YAAqBD,GAE1B,OAAOA,I,+BAIP,OACA,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,cACb,yBAAKC,IAAG,UAAKC,OAAOC,SAASC,OAArB,cAAyCC,IAAI,WAEvD,oDAEF,8BACI,sCAAYhB,KAAKH,MAAMC,KACvB,2BAAIE,KAAKiB,mBACT,oCAAS,uBAAGC,KAAK,uFAAR,kCACT,2CACA,2CAAgB,uBAAGA,KAAK,mDAAR,wBAChB,yBAAKP,UAAU,UACb,kBAAC,IAAD,CAAQQ,IAAI,mQACJC,MAAM,QACNC,OAAO,QACPC,MAAM,kBACNX,UAAU,SACVY,QAAQ,YAItB,kE,GAxDYC,IAAMC,WCEJC,QACW,cAA7Bb,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.97fa0821.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport moment from 'moment';\nimport \"moment-precise-range-plugin\";\nimport Iframe from 'react-iframe';\n\ntype AppState = {\n  dob: string\n}\n\nclass App extends React.Component<{}, AppState> {\n  constructor(props: Readonly<{}>) {\n    super(props);\n    this.state = {dob: \"2019-05-01\"}\n  }\n\n  birthdate() {\n    return moment(this.state.dob)\n  }\n\n  relativeAgeDate() {\n    const today = moment().startOf(\"day\");\n\n    const diffBreakdown = this.birthdate().preciseDiff(today, true) as any;\n    const years = diffBreakdown.years;\n    const months = diffBreakdown.months;\n    const days = diffBreakdown.days;\n    let age = \"\";\n    age += `${months} months`;\n    age += ` ${days} days`;\n    age += \" old\";\n    if (years > 0) {\n      let yearsString = `${years} year`;\n      if (years > 1) {\n        yearsString += \"s\";\n      }\n      age = `${yearsString} ${age}`;\n    }\n    return age;\n  }\n\n  render() {\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"hero-image\">\n          <img src={`${window.location.origin}/sasha.png`} alt=\"Sasha\"/>\n        </div>\n        <h1>Sasha Angel Johnsey</h1>\n      </header>\n      <main>\n          <p>Born on {this.state.dob}</p>\n          <p>{this.relativeAgeDate()}</p>\n          <p>Food: <a href=\"https://smile.amazon.com/alimento-perros-adultos-HEALTH-NUTRITION/dp/B007PPTJLE/ref\">Royal Canin Adult Small Breed</a></p>\n          <p>Weight Chart</p>\n          <p>Sasha's Vet: <a href=\"https://thepethospitals.com/vets/lee-ann-newman\">Lee Ann Newman, DVM</a></p>\n          <div className=\"iframe\">\n            <Iframe url=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d13059.689735583437!2d-89.75178085424798!3d35.08367076131394!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x54b0ac735fed867e!2sThe+Pet+Hospitals!5e0!3m2!1sen!2sus!4v1564891889806!5m2!1sen!2sus\" \n                    width=\"400px\"\n                    height=\"300px\"\n                    title=\"Vet Google Maps\"\n                    className=\"iframe\"\n                    display=\"block\"\n            />\n          </div>\n      </main>\n      <footer>\n      Â© 2020 Michael Johnsey\n      </footer>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}