!function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=129)}([function(e,t,n){(function(e){e.exports=function(){"use strict";var t,a;function r(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function s(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e){return void 0===e}function d(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function u(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function l(e,t){var n,a=[];for(n=0;n<e.length;++n)a.push(t(e[n],n));return a}function _(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function c(e,t){for(var n in t)_(t,n)&&(e[n]=t[n]);return _(t,"toString")&&(e.toString=t.toString),_(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,n,a){return Ht(e,t,n,a,!0).utc()}function m(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function f(e){if(null==e._isValid){var t=m(e),n=a.call(t.parsedDateParts,function(e){return null!=e}),r=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(r=r&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return r;e._isValid=r}return e._isValid}function p(e){var t=h(NaN);return null!=e?c(m(t),e):m(t).userInvalidated=!0,t}a=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,a=0;a<n;a++)if(a in t&&e.call(this,t[a],a,t))return!0;return!1};var M=r.momentProperties=[];function y(e,t){var n,a,r;if(o(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),o(t._i)||(e._i=t._i),o(t._f)||(e._f=t._f),o(t._l)||(e._l=t._l),o(t._strict)||(e._strict=t._strict),o(t._tzm)||(e._tzm=t._tzm),o(t._isUTC)||(e._isUTC=t._isUTC),o(t._offset)||(e._offset=t._offset),o(t._pf)||(e._pf=m(t)),o(t._locale)||(e._locale=t._locale),M.length>0)for(n=0;n<M.length;n++)o(r=t[a=M[n]])||(e[a]=r);return e}var g=!1;function v(e){y(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===g&&(g=!0,r.updateOffset(this),g=!1)}function L(e){return e instanceof v||null!=e&&null!=e._isAMomentObject}function Y(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function k(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=Y(t)),n}function b(e,t,n){var a,r=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),s=0;for(a=0;a<r;a++)(n&&e[a]!==t[a]||!n&&k(e[a])!==k(t[a]))&&s++;return s+i}function D(e){!1===r.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function w(e,t){var n=!0;return c(function(){if(null!=r.deprecationHandler&&r.deprecationHandler(null,e),n){for(var a,i=[],s=0;s<arguments.length;s++){if(a="","object"==typeof arguments[s]){for(var o in a+="\n["+s+"] ",arguments[0])a+=o+": "+arguments[0][o]+", ";a=a.slice(0,-2)}else a=arguments[s];i.push(a)}D(e+"\nArguments: "+Array.prototype.slice.call(i).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)},t)}var T,x={};function S(e,t){null!=r.deprecationHandler&&r.deprecationHandler(e,t),x[e]||(D(t),x[e]=!0)}function H(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function j(e,t){var n,a=c({},e);for(n in t)_(t,n)&&(s(e[n])&&s(t[n])?(a[n]={},c(a[n],e[n]),c(a[n],t[n])):null!=t[n]?a[n]=t[n]:delete a[n]);for(n in e)_(e,n)&&!_(t,n)&&s(e[n])&&(a[n]=c({},a[n]));return a}function P(e){null!=e&&this.set(e)}r.suppressDeprecationWarnings=!1,r.deprecationHandler=null,T=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)_(e,t)&&n.push(t);return n};var O={};function A(e,t){var n=e.toLowerCase();O[n]=O[n+"s"]=O[t]=e}function W(e){return"string"==typeof e?O[e]||O[e.toLowerCase()]:void 0}function F(e){var t,n,a={};for(n in e)_(e,n)&&(t=W(n))&&(a[t]=e[n]);return a}var C={};function I(e,t){C[e]=t}function E(e,t,n){var a=""+Math.abs(e),r=t-a.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+a}var z=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,R=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,N={},B={};function V(e,t,n,a){var r=a;"string"==typeof a&&(r=function(){return this[a]()}),e&&(B[e]=r),t&&(B[t[0]]=function(){return E(r.apply(this,arguments),t[1],t[2])}),n&&(B[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function J(e,t){return e.isValid()?(t=U(t,e.localeData()),N[t]=N[t]||function(e){var t,n,a,r=e.match(z);for(t=0,n=r.length;t<n;t++)B[r[t]]?r[t]=B[r[t]]:r[t]=(a=r[t]).match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"");return function(t){var a,i="";for(a=0;a<n;a++)i+=H(r[a])?r[a].call(t,e):r[a];return i}}(t),N[t](e)):e.localeData().invalidDate()}function U(e,t){var n=5;function a(e){return t.longDateFormat(e)||e}for(R.lastIndex=0;n>=0&&R.test(e);)e=e.replace(R,a),R.lastIndex=0,n-=1;return e}var G=/\d/,q=/\d\d/,$=/\d{3}/,K=/\d{4}/,Z=/[+-]?\d{6}/,X=/\d\d?/,Q=/\d\d\d\d?/,ee=/\d\d\d\d\d\d?/,te=/\d{1,3}/,ne=/\d{1,4}/,ae=/[+-]?\d{1,6}/,re=/\d+/,ie=/[+-]?\d+/,se=/Z|[+-]\d\d:?\d\d/gi,oe=/Z|[+-]\d\d(?::?\d\d)?/gi,de=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,ue={};function le(e,t,n){ue[e]=H(t)?t:function(e,a){return e&&n?n:t}}function _e(e,t){return _(ue,e)?ue[e](t._strict,t._locale):new RegExp(ce(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,a,r){return t||n||a||r})))}function ce(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var he={};function me(e,t){var n,a=t;for("string"==typeof e&&(e=[e]),d(t)&&(a=function(e,n){n[t]=k(e)}),n=0;n<e.length;n++)he[e[n]]=a}function fe(e,t){me(e,function(e,n,a,r){a._w=a._w||{},t(e,a._w,a,r)})}function pe(e,t,n){null!=t&&_(he,e)&&he[e](t,n._a,n,e)}var Me=0,ye=1,ge=2,ve=3,Le=4,Ye=5,ke=6,be=7,De=8;function we(e){return Te(e)?366:365}function Te(e){return e%4==0&&e%100!=0||e%400==0}V("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),V(0,["YY",2],0,function(){return this.year()%100}),V(0,["YYYY",4],0,"year"),V(0,["YYYYY",5],0,"year"),V(0,["YYYYYY",6,!0],0,"year"),A("year","y"),I("year",1),le("Y",ie),le("YY",X,q),le("YYYY",ne,K),le("YYYYY",ae,Z),le("YYYYYY",ae,Z),me(["YYYYY","YYYYYY"],Me),me("YYYY",function(e,t){t[Me]=2===e.length?r.parseTwoDigitYear(e):k(e)}),me("YY",function(e,t){t[Me]=r.parseTwoDigitYear(e)}),me("Y",function(e,t){t[Me]=parseInt(e,10)}),r.parseTwoDigitYear=function(e){return k(e)+(k(e)>68?1900:2e3)};var xe,Se=He("FullYear",!0);function He(e,t){return function(n){return null!=n?(Pe(this,e,n),r.updateOffset(this,t),this):je(this,e)}}function je(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Pe(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&Te(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Oe(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function Oe(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,a=(t%(n=12)+n)%n;return e+=(t-a)/12,1===a?Te(e)?29:28:31-a%7%2}xe=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},V("M",["MM",2],"Mo",function(){return this.month()+1}),V("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),V("MMMM",0,0,function(e){return this.localeData().months(this,e)}),A("month","M"),I("month",8),le("M",X),le("MM",X,q),le("MMM",function(e,t){return t.monthsShortRegex(e)}),le("MMMM",function(e,t){return t.monthsRegex(e)}),me(["M","MM"],function(e,t){t[ye]=k(e)-1}),me(["MMM","MMMM"],function(e,t,n,a){var r=n._locale.monthsParse(e,a,n._strict);null!=r?t[ye]=r:m(n).invalidMonth=e});var Ae=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,We="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Fe="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Ce(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=k(t);else if(!d(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),Oe(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Ie(e){return null!=e?(Ce(this,e),r.updateOffset(this,!0),this):je(this,"Month")}var Ee=de,ze=de;function Re(){function e(e,t){return t.length-e.length}var t,n,a=[],r=[],i=[];for(t=0;t<12;t++)n=h([2e3,t]),a.push(this.monthsShort(n,"")),r.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(a.sort(e),r.sort(e),i.sort(e),t=0;t<12;t++)a[t]=ce(a[t]),r[t]=ce(r[t]);for(t=0;t<24;t++)i[t]=ce(i[t]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+a.join("|")+")","i")}function Ne(e){var t;if(e<100&&e>=0){var n=Array.prototype.slice.call(arguments);n[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)}else t=new Date(Date.UTC.apply(null,arguments));return t}function Be(e,t,n){var a=7+t-n;return-(7+Ne(e,0,a).getUTCDay()-t)%7+a-1}function Ve(e,t,n,a,r){var i,s,o=1+7*(t-1)+(7+n-a)%7+Be(e,a,r);return o<=0?s=we(i=e-1)+o:o>we(e)?(i=e+1,s=o-we(e)):(i=e,s=o),{year:i,dayOfYear:s}}function Je(e,t,n){var a,r,i=Be(e.year(),t,n),s=Math.floor((e.dayOfYear()-i-1)/7)+1;return s<1?a=s+Ue(r=e.year()-1,t,n):s>Ue(e.year(),t,n)?(a=s-Ue(e.year(),t,n),r=e.year()+1):(r=e.year(),a=s),{week:a,year:r}}function Ue(e,t,n){var a=Be(e,t,n),r=Be(e+1,t,n);return(we(e)-a+r)/7}function Ge(e,t){return e.slice(t,7).concat(e.slice(0,t))}V("w",["ww",2],"wo","week"),V("W",["WW",2],"Wo","isoWeek"),A("week","w"),A("isoWeek","W"),I("week",5),I("isoWeek",5),le("w",X),le("ww",X,q),le("W",X),le("WW",X,q),fe(["w","ww","W","WW"],function(e,t,n,a){t[a.substr(0,1)]=k(e)}),V("d",0,"do","day"),V("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),V("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),V("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),V("e",0,0,"weekday"),V("E",0,0,"isoWeekday"),A("day","d"),A("weekday","e"),A("isoWeekday","E"),I("day",11),I("weekday",11),I("isoWeekday",11),le("d",X),le("e",X),le("E",X),le("dd",function(e,t){return t.weekdaysMinRegex(e)}),le("ddd",function(e,t){return t.weekdaysShortRegex(e)}),le("dddd",function(e,t){return t.weekdaysRegex(e)}),fe(["dd","ddd","dddd"],function(e,t,n,a){var r=n._locale.weekdaysParse(e,a,n._strict);null!=r?t.d=r:m(n).invalidWeekday=e}),fe(["d","e","E"],function(e,t,n,a){t[a]=k(e)});var qe="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),$e="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ke="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ze=de,Xe=de,Qe=de;function et(){function e(e,t){return t.length-e.length}var t,n,a,r,i,s=[],o=[],d=[],u=[];for(t=0;t<7;t++)n=h([2e3,1]).day(t),a=this.weekdaysMin(n,""),r=this.weekdaysShort(n,""),i=this.weekdays(n,""),s.push(a),o.push(r),d.push(i),u.push(a),u.push(r),u.push(i);for(s.sort(e),o.sort(e),d.sort(e),u.sort(e),t=0;t<7;t++)o[t]=ce(o[t]),d[t]=ce(d[t]),u[t]=ce(u[t]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function tt(){return this.hours()%12||12}function nt(e,t){V(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function at(e,t){return t._meridiemParse}V("H",["HH",2],0,"hour"),V("h",["hh",2],0,tt),V("k",["kk",2],0,function(){return this.hours()||24}),V("hmm",0,0,function(){return""+tt.apply(this)+E(this.minutes(),2)}),V("hmmss",0,0,function(){return""+tt.apply(this)+E(this.minutes(),2)+E(this.seconds(),2)}),V("Hmm",0,0,function(){return""+this.hours()+E(this.minutes(),2)}),V("Hmmss",0,0,function(){return""+this.hours()+E(this.minutes(),2)+E(this.seconds(),2)}),nt("a",!0),nt("A",!1),A("hour","h"),I("hour",13),le("a",at),le("A",at),le("H",X),le("h",X),le("k",X),le("HH",X,q),le("hh",X,q),le("kk",X,q),le("hmm",Q),le("hmmss",ee),le("Hmm",Q),le("Hmmss",ee),me(["H","HH"],ve),me(["k","kk"],function(e,t,n){var a=k(e);t[ve]=24===a?0:a}),me(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),me(["h","hh"],function(e,t,n){t[ve]=k(e),m(n).bigHour=!0}),me("hmm",function(e,t,n){var a=e.length-2;t[ve]=k(e.substr(0,a)),t[Le]=k(e.substr(a)),m(n).bigHour=!0}),me("hmmss",function(e,t,n){var a=e.length-4,r=e.length-2;t[ve]=k(e.substr(0,a)),t[Le]=k(e.substr(a,2)),t[Ye]=k(e.substr(r)),m(n).bigHour=!0}),me("Hmm",function(e,t,n){var a=e.length-2;t[ve]=k(e.substr(0,a)),t[Le]=k(e.substr(a))}),me("Hmmss",function(e,t,n){var a=e.length-4,r=e.length-2;t[ve]=k(e.substr(0,a)),t[Le]=k(e.substr(a,2)),t[Ye]=k(e.substr(r))});var rt,it=He("Hours",!0),st={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:We,monthsShort:Fe,week:{dow:0,doy:6},weekdays:qe,weekdaysMin:Ke,weekdaysShort:$e,meridiemParse:/[ap]\.?m?\.?/i},ot={},dt={};function ut(e){return e?e.toLowerCase().replace("_","-"):e}function lt(t){var a=null;if(!ot[t]&&void 0!==e&&e&&e.exports)try{a=rt._abbr,n(131)("./"+t),_t(a)}catch(e){}return ot[t]}function _t(e,t){var n;return e&&((n=o(t)?ht(e):ct(e,t))?rt=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),rt._abbr}function ct(e,t){if(null!==t){var n,a=st;if(t.abbr=e,null!=ot[e])S("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),a=ot[e]._config;else if(null!=t.parentLocale)if(null!=ot[t.parentLocale])a=ot[t.parentLocale]._config;else{if(null==(n=lt(t.parentLocale)))return dt[t.parentLocale]||(dt[t.parentLocale]=[]),dt[t.parentLocale].push({name:e,config:t}),null;a=n._config}return ot[e]=new P(j(a,t)),dt[e]&&dt[e].forEach(function(e){ct(e.name,e.config)}),_t(e),ot[e]}return delete ot[e],null}function ht(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return rt;if(!i(e)){if(t=lt(e))return t;e=[e]}return function(e){for(var t,n,a,r,i=0;i<e.length;){for(t=(r=ut(e[i]).split("-")).length,n=(n=ut(e[i+1]))?n.split("-"):null;t>0;){if(a=lt(r.slice(0,t).join("-")))return a;if(n&&n.length>=t&&b(r,n,!0)>=t-1)break;t--}i++}return rt}(e)}function mt(e){var t,n=e._a;return n&&-2===m(e).overflow&&(t=n[ye]<0||n[ye]>11?ye:n[ge]<1||n[ge]>Oe(n[Me],n[ye])?ge:n[ve]<0||n[ve]>24||24===n[ve]&&(0!==n[Le]||0!==n[Ye]||0!==n[ke])?ve:n[Le]<0||n[Le]>59?Le:n[Ye]<0||n[Ye]>59?Ye:n[ke]<0||n[ke]>999?ke:-1,m(e)._overflowDayOfYear&&(t<Me||t>ge)&&(t=ge),m(e)._overflowWeeks&&-1===t&&(t=be),m(e)._overflowWeekday&&-1===t&&(t=De),m(e).overflow=t),e}function ft(e,t,n){return null!=e?e:null!=t?t:n}function pt(e){var t,n,a,i,s,o=[];if(!e._d){for(a=function(e){var t=new Date(r.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[ge]&&null==e._a[ye]&&function(e){var t,n,a,r,i,s,o,d;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)i=1,s=4,n=ft(t.GG,e._a[Me],Je(jt(),1,4).year),a=ft(t.W,1),((r=ft(t.E,1))<1||r>7)&&(d=!0);else{i=e._locale._week.dow,s=e._locale._week.doy;var u=Je(jt(),i,s);n=ft(t.gg,e._a[Me],u.year),a=ft(t.w,u.week),null!=t.d?((r=t.d)<0||r>6)&&(d=!0):null!=t.e?(r=t.e+i,(t.e<0||t.e>6)&&(d=!0)):r=i}a<1||a>Ue(n,i,s)?m(e)._overflowWeeks=!0:null!=d?m(e)._overflowWeekday=!0:(o=Ve(n,a,r,i,s),e._a[Me]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(s=ft(e._a[Me],a[Me]),(e._dayOfYear>we(s)||0===e._dayOfYear)&&(m(e)._overflowDayOfYear=!0),n=Ne(s,0,e._dayOfYear),e._a[ye]=n.getUTCMonth(),e._a[ge]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=a[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[ve]&&0===e._a[Le]&&0===e._a[Ye]&&0===e._a[ke]&&(e._nextDay=!0,e._a[ve]=0),e._d=(e._useUTC?Ne:function(e,t,n,a,r,i,s){var o;return e<100&&e>=0?(o=new Date(e+400,t,n,a,r,i,s),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,n,a,r,i,s),o}).apply(null,o),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[ve]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(m(e).weekdayMismatch=!0)}}var Mt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,yt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,gt=/Z|[+-]\d\d(?::?\d\d)?/,vt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Lt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Yt=/^\/?Date\((\-?\d+)/i;function kt(e){var t,n,a,r,i,s,o=e._i,d=Mt.exec(o)||yt.exec(o);if(d){for(m(e).iso=!0,t=0,n=vt.length;t<n;t++)if(vt[t][1].exec(d[1])){r=vt[t][0],a=!1!==vt[t][2];break}if(null==r)return void(e._isValid=!1);if(d[3]){for(t=0,n=Lt.length;t<n;t++)if(Lt[t][1].exec(d[3])){i=(d[2]||" ")+Lt[t][0];break}if(null==i)return void(e._isValid=!1)}if(!a&&null!=i)return void(e._isValid=!1);if(d[4]){if(!gt.exec(d[4]))return void(e._isValid=!1);s="Z"}e._f=r+(i||"")+(s||""),xt(e)}else e._isValid=!1}var bt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function Dt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}var wt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Tt(e){var t,n,a,r,i,s,o,d=bt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(d){var u=(t=d[4],n=d[3],a=d[2],r=d[5],i=d[6],s=d[7],o=[Dt(t),Fe.indexOf(n),parseInt(a,10),parseInt(r,10),parseInt(i,10)],s&&o.push(parseInt(s,10)),o);if(!function(e,t,n){return!e||$e.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(m(n).weekdayMismatch=!0,n._isValid=!1,!1)}(d[1],u,e))return;e._a=u,e._tzm=function(e,t,n){if(e)return wt[e];if(t)return 0;var a=parseInt(n,10),r=a%100;return(a-r)/100*60+r}(d[8],d[9],d[10]),e._d=Ne.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),m(e).rfc2822=!0}else e._isValid=!1}function xt(e){if(e._f!==r.ISO_8601)if(e._f!==r.RFC_2822){e._a=[],m(e).empty=!0;var t,n,a,i,s,o=""+e._i,d=o.length,u=0;for(a=U(e._f,e._locale).match(z)||[],t=0;t<a.length;t++)i=a[t],(n=(o.match(_e(i,e))||[])[0])&&((s=o.substr(0,o.indexOf(n))).length>0&&m(e).unusedInput.push(s),o=o.slice(o.indexOf(n)+n.length),u+=n.length),B[i]?(n?m(e).empty=!1:m(e).unusedTokens.push(i),pe(i,n,e)):e._strict&&!n&&m(e).unusedTokens.push(i);m(e).charsLeftOver=d-u,o.length>0&&m(e).unusedInput.push(o),e._a[ve]<=12&&!0===m(e).bigHour&&e._a[ve]>0&&(m(e).bigHour=void 0),m(e).parsedDateParts=e._a.slice(0),m(e).meridiem=e._meridiem,e._a[ve]=function(e,t,n){var a;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((a=e.isPM(n))&&t<12&&(t+=12),a||12!==t||(t=0),t):t}(e._locale,e._a[ve],e._meridiem),pt(e),mt(e)}else Tt(e);else kt(e)}function St(e){var t=e._i,n=e._f;return e._locale=e._locale||ht(e._l),null===t||void 0===n&&""===t?p({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),L(t)?new v(mt(t)):(u(t)?e._d=t:i(n)?function(e){var t,n,a,r,i;if(0===e._f.length)return m(e).invalidFormat=!0,void(e._d=new Date(NaN));for(r=0;r<e._f.length;r++)i=0,t=y({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[r],xt(t),f(t)&&(i+=m(t).charsLeftOver,i+=10*m(t).unusedTokens.length,m(t).score=i,(null==a||i<a)&&(a=i,n=t));c(e,n||t)}(e):n?xt(e):function(e){var t=e._i;o(t)?e._d=new Date(r.now()):u(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=Yt.exec(e._i);null===t?(kt(e),!1===e._isValid&&(delete e._isValid,Tt(e),!1===e._isValid&&(delete e._isValid,r.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=l(t.slice(0),function(e){return parseInt(e,10)}),pt(e)):s(t)?function(e){if(!e._d){var t=F(e._i);e._a=l([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),pt(e)}}(e):d(t)?e._d=new Date(t):r.createFromInputFallback(e)}(e),f(e)||(e._d=null),e))}function Ht(e,t,n,a,r){var o,d={};return!0!==n&&!1!==n||(a=n,n=void 0),(s(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||i(e)&&0===e.length)&&(e=void 0),d._isAMomentObject=!0,d._useUTC=d._isUTC=r,d._l=n,d._i=e,d._f=t,d._strict=a,(o=new v(mt(St(d))))._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function jt(e,t,n,a){return Ht(e,t,n,a,!1)}r.createFromInputFallback=w("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),r.ISO_8601=function(){},r.RFC_2822=function(){};var Pt=w("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=jt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:p()}),Ot=w("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=jt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:p()});function At(e,t){var n,a;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return jt();for(n=t[0],a=1;a<t.length;++a)t[a].isValid()&&!t[a][e](n)||(n=t[a]);return n}var Wt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ft(e){var t=F(e),n=t.year||0,a=t.quarter||0,r=t.month||0,i=t.week||t.isoWeek||0,s=t.day||0,o=t.hour||0,d=t.minute||0,u=t.second||0,l=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===xe.call(Wt,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,a=0;a<Wt.length;++a)if(e[Wt[a]]){if(n)return!1;parseFloat(e[Wt[a]])!==k(e[Wt[a]])&&(n=!0)}return!0}(t),this._milliseconds=+l+1e3*u+6e4*d+1e3*o*60*60,this._days=+s+7*i,this._months=+r+3*a+12*n,this._data={},this._locale=ht(),this._bubble()}function Ct(e){return e instanceof Ft}function It(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Et(e,t){V(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+E(~~(e/60),2)+t+E(~~e%60,2)})}Et("Z",":"),Et("ZZ",""),le("Z",oe),le("ZZ",oe),me(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Rt(oe,e)});var zt=/([\+\-]|\d\d)/gi;function Rt(e,t){var n=(t||"").match(e);if(null===n)return null;var a=((n[n.length-1]||[])+"").match(zt)||["-",0,0],r=60*a[1]+k(a[2]);return 0===r?0:"+"===a[0]?r:-r}function Nt(e,t){var n,a;return t._isUTC?(n=t.clone(),a=(L(e)||u(e)?e.valueOf():jt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+a),r.updateOffset(n,!1),n):jt(e).local()}function Bt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Vt(){return!!this.isValid()&&this._isUTC&&0===this._offset}r.updateOffset=function(){};var Jt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Ut=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Gt(e,t){var n,a,r,i,s,o,u=e,l=null;return Ct(e)?u={ms:e._milliseconds,d:e._days,M:e._months}:d(e)?(u={},t?u[t]=e:u.milliseconds=e):(l=Jt.exec(e))?(n="-"===l[1]?-1:1,u={y:0,d:k(l[ge])*n,h:k(l[ve])*n,m:k(l[Le])*n,s:k(l[Ye])*n,ms:k(It(1e3*l[ke]))*n}):(l=Ut.exec(e))?(n="-"===l[1]?-1:1,u={y:qt(l[2],n),M:qt(l[3],n),w:qt(l[4],n),d:qt(l[5],n),h:qt(l[6],n),m:qt(l[7],n),s:qt(l[8],n)}):null==u?u={}:"object"==typeof u&&("from"in u||"to"in u)&&(i=jt(u.from),s=jt(u.to),r=i.isValid()&&s.isValid()?(s=Nt(s,i),i.isBefore(s)?o=$t(i,s):((o=$t(s,i)).milliseconds=-o.milliseconds,o.months=-o.months),o):{milliseconds:0,months:0},(u={}).ms=r.milliseconds,u.M=r.months),a=new Ft(u),Ct(e)&&_(e,"_locale")&&(a._locale=e._locale),a}function qt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function $t(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Kt(e,t){return function(n,a){var r;return null===a||isNaN(+a)||(S(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),r=n,n=a,a=r),Zt(this,Gt(n="string"==typeof n?+n:n,a),e),this}}function Zt(e,t,n,a){var i=t._milliseconds,s=It(t._days),o=It(t._months);e.isValid()&&(a=null==a||a,o&&Ce(e,je(e,"Month")+o*n),s&&Pe(e,"Date",je(e,"Date")+s*n),i&&e._d.setTime(e._d.valueOf()+i*n),a&&r.updateOffset(e,s||o))}Gt.fn=Ft.prototype,Gt.invalid=function(){return Gt(NaN)};var Xt=Kt(1,"add"),Qt=Kt(-1,"subtract");function en(e,t){var n=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(n,"months");return-(n+(t-a<0?(t-a)/(a-e.clone().add(n-1,"months")):(t-a)/(e.clone().add(n+1,"months")-a)))||0}function tn(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ht(e))&&(this._locale=t),this)}r.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",r.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var nn=w("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function an(){return this._locale}var rn=1e3,sn=60*rn,on=60*sn,dn=3506328*on;function un(e,t){return(e%t+t)%t}function ln(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-dn:new Date(e,t,n).valueOf()}function _n(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-dn:Date.UTC(e,t,n)}function cn(e,t){V(0,[e,e.length],0,t)}function hn(e,t,n,a,r){var i;return null==e?Je(this,a,r).year:(t>(i=Ue(e,a,r))&&(t=i),function(e,t,n,a,r){var i=Ve(e,t,n,a,r),s=Ne(i.year,0,i.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}.call(this,e,t,n,a,r))}V(0,["gg",2],0,function(){return this.weekYear()%100}),V(0,["GG",2],0,function(){return this.isoWeekYear()%100}),cn("gggg","weekYear"),cn("ggggg","weekYear"),cn("GGGG","isoWeekYear"),cn("GGGGG","isoWeekYear"),A("weekYear","gg"),A("isoWeekYear","GG"),I("weekYear",1),I("isoWeekYear",1),le("G",ie),le("g",ie),le("GG",X,q),le("gg",X,q),le("GGGG",ne,K),le("gggg",ne,K),le("GGGGG",ae,Z),le("ggggg",ae,Z),fe(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,a){t[a.substr(0,2)]=k(e)}),fe(["gg","GG"],function(e,t,n,a){t[a]=r.parseTwoDigitYear(e)}),V("Q",0,"Qo","quarter"),A("quarter","Q"),I("quarter",7),le("Q",G),me("Q",function(e,t){t[ye]=3*(k(e)-1)}),V("D",["DD",2],"Do","date"),A("date","D"),I("date",9),le("D",X),le("DD",X,q),le("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),me(["D","DD"],ge),me("Do",function(e,t){t[ge]=k(e.match(X)[0])});var mn=He("Date",!0);V("DDD",["DDDD",3],"DDDo","dayOfYear"),A("dayOfYear","DDD"),I("dayOfYear",4),le("DDD",te),le("DDDD",$),me(["DDD","DDDD"],function(e,t,n){n._dayOfYear=k(e)}),V("m",["mm",2],0,"minute"),A("minute","m"),I("minute",14),le("m",X),le("mm",X,q),me(["m","mm"],Le);var fn=He("Minutes",!1);V("s",["ss",2],0,"second"),A("second","s"),I("second",15),le("s",X),le("ss",X,q),me(["s","ss"],Ye);var pn,Mn=He("Seconds",!1);for(V("S",0,0,function(){return~~(this.millisecond()/100)}),V(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),V(0,["SSS",3],0,"millisecond"),V(0,["SSSS",4],0,function(){return 10*this.millisecond()}),V(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),V(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),V(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),V(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),V(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),A("millisecond","ms"),I("millisecond",16),le("S",te,G),le("SS",te,q),le("SSS",te,$),pn="SSSS";pn.length<=9;pn+="S")le(pn,re);function yn(e,t){t[ke]=k(1e3*("0."+e))}for(pn="S";pn.length<=9;pn+="S")me(pn,yn);var gn=He("Milliseconds",!1);V("z",0,0,"zoneAbbr"),V("zz",0,0,"zoneName");var vn=v.prototype;function Ln(e){return e}vn.add=Xt,vn.calendar=function(e,t){var n=e||jt(),a=Nt(n,this).startOf("day"),i=r.calendarFormat(this,a)||"sameElse",s=t&&(H(t[i])?t[i].call(this,n):t[i]);return this.format(s||this.localeData().calendar(i,this,jt(n)))},vn.clone=function(){return new v(this)},vn.diff=function(e,t,n){var a,r,i;if(!this.isValid())return NaN;if(!(a=Nt(e,this)).isValid())return NaN;switch(r=6e4*(a.utcOffset()-this.utcOffset()),t=W(t)){case"year":i=en(this,a)/12;break;case"month":i=en(this,a);break;case"quarter":i=en(this,a)/3;break;case"second":i=(this-a)/1e3;break;case"minute":i=(this-a)/6e4;break;case"hour":i=(this-a)/36e5;break;case"day":i=(this-a-r)/864e5;break;case"week":i=(this-a-r)/6048e5;break;default:i=this-a}return n?i:Y(i)},vn.endOf=function(e){var t;if(void 0===(e=W(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?_n:ln;switch(e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=on-un(t+(this._isUTC?0:this.utcOffset()*sn),on)-1;break;case"minute":t=this._d.valueOf(),t+=sn-un(t,sn)-1;break;case"second":t=this._d.valueOf(),t+=rn-un(t,rn)-1}return this._d.setTime(t),r.updateOffset(this,!0),this},vn.format=function(e){e||(e=this.isUtc()?r.defaultFormatUtc:r.defaultFormat);var t=J(this,e);return this.localeData().postformat(t)},vn.from=function(e,t){return this.isValid()&&(L(e)&&e.isValid()||jt(e).isValid())?Gt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},vn.fromNow=function(e){return this.from(jt(),e)},vn.to=function(e,t){return this.isValid()&&(L(e)&&e.isValid()||jt(e).isValid())?Gt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},vn.toNow=function(e){return this.to(jt(),e)},vn.get=function(e){return H(this[e=W(e)])?this[e]():this},vn.invalidAt=function(){return m(this).overflow},vn.isAfter=function(e,t){var n=L(e)?e:jt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=W(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},vn.isBefore=function(e,t){var n=L(e)?e:jt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=W(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},vn.isBetween=function(e,t,n,a){var r=L(e)?e:jt(e),i=L(t)?t:jt(t);return!!(this.isValid()&&r.isValid()&&i.isValid())&&("("===(a=a||"()")[0]?this.isAfter(r,n):!this.isBefore(r,n))&&(")"===a[1]?this.isBefore(i,n):!this.isAfter(i,n))},vn.isSame=function(e,t){var n,a=L(e)?e:jt(e);return!(!this.isValid()||!a.isValid())&&("millisecond"===(t=W(t)||"millisecond")?this.valueOf()===a.valueOf():(n=a.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},vn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},vn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},vn.isValid=function(){return f(this)},vn.lang=nn,vn.locale=tn,vn.localeData=an,vn.max=Ot,vn.min=Pt,vn.parsingFlags=function(){return c({},m(this))},vn.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:C[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}(e=F(e)),a=0;a<n.length;a++)this[n[a].unit](e[n[a].unit]);else if(H(this[e=W(e)]))return this[e](t);return this},vn.startOf=function(e){var t;if(void 0===(e=W(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?_n:ln;switch(e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=un(t+(this._isUTC?0:this.utcOffset()*sn),on);break;case"minute":t=this._d.valueOf(),t-=un(t,sn);break;case"second":t=this._d.valueOf(),t-=un(t,rn)}return this._d.setTime(t),r.updateOffset(this,!0),this},vn.subtract=Qt,vn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},vn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},vn.toDate=function(){return new Date(this.valueOf())},vn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?J(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):H(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",J(n,"Z")):J(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},vn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',a=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",r=t+'[")]';return this.format(n+a+"-MM-DD[T]HH:mm:ss.SSS"+r)},vn.toJSON=function(){return this.isValid()?this.toISOString():null},vn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},vn.unix=function(){return Math.floor(this.valueOf()/1e3)},vn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},vn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},vn.year=Se,vn.isLeapYear=function(){return Te(this.year())},vn.weekYear=function(e){return hn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},vn.isoWeekYear=function(e){return hn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},vn.quarter=vn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},vn.month=Ie,vn.daysInMonth=function(){return Oe(this.year(),this.month())},vn.week=vn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},vn.isoWeek=vn.isoWeeks=function(e){var t=Je(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},vn.weeksInYear=function(){var e=this.localeData()._week;return Ue(this.year(),e.dow,e.doy)},vn.isoWeeksInYear=function(){return Ue(this.year(),1,4)},vn.date=mn,vn.day=vn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},vn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},vn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},vn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},vn.hour=vn.hours=it,vn.minute=vn.minutes=fn,vn.second=vn.seconds=Mn,vn.millisecond=vn.milliseconds=gn,vn.utcOffset=function(e,t,n){var a,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Rt(oe,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(a=Bt(this)),this._offset=e,this._isUTC=!0,null!=a&&this.add(a,"m"),i!==e&&(!t||this._changeInProgress?Zt(this,Gt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,r.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Bt(this)},vn.utc=function(e){return this.utcOffset(0,e)},vn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Bt(this),"m")),this},vn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Rt(se,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},vn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?jt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},vn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},vn.isLocal=function(){return!!this.isValid()&&!this._isUTC},vn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},vn.isUtc=Vt,vn.isUTC=Vt,vn.zoneAbbr=function(){return this._isUTC?"UTC":""},vn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},vn.dates=w("dates accessor is deprecated. Use date instead.",mn),vn.months=w("months accessor is deprecated. Use month instead",Ie),vn.years=w("years accessor is deprecated. Use year instead",Se),vn.zone=w("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),vn.isDSTShifted=w("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!o(this._isDSTShifted))return this._isDSTShifted;var e={};if(y(e,this),(e=St(e))._a){var t=e._isUTC?h(e._a):jt(e._a);this._isDSTShifted=this.isValid()&&b(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var Yn=P.prototype;function kn(e,t,n,a){var r=ht(),i=h().set(a,t);return r[n](i,e)}function bn(e,t,n){if(d(e)&&(t=e,e=void 0),e=e||"",null!=t)return kn(e,t,n,"month");var a,r=[];for(a=0;a<12;a++)r[a]=kn(e,a,n,"month");return r}function Dn(e,t,n,a){"boolean"==typeof e?(d(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,d(t)&&(n=t,t=void 0),t=t||"");var r,i=ht(),s=e?i._week.dow:0;if(null!=n)return kn(t,(n+s)%7,a,"day");var o=[];for(r=0;r<7;r++)o[r]=kn(t,(r+s)%7,a,"day");return o}Yn.calendar=function(e,t,n){var a=this._calendar[e]||this._calendar.sameElse;return H(a)?a.call(t,n):a},Yn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])},Yn.invalidDate=function(){return this._invalidDate},Yn.ordinal=function(e){return this._ordinal.replace("%d",e)},Yn.preparse=Ln,Yn.postformat=Ln,Yn.relativeTime=function(e,t,n,a){var r=this._relativeTime[n];return H(r)?r(e,t,n,a):r.replace(/%d/i,e)},Yn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return H(n)?n(t):n.replace(/%s/i,t)},Yn.set=function(e){var t,n;for(n in e)H(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},Yn.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Ae).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},Yn.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Ae.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},Yn.monthsParse=function(e,t,n){var a,r,i;if(this._monthsParseExact)return function(e,t,n){var a,r,i,s=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],a=0;a<12;++a)i=h([2e3,a]),this._shortMonthsParse[a]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[a]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(r=xe.call(this._shortMonthsParse,s))?r:null:-1!==(r=xe.call(this._longMonthsParse,s))?r:null:"MMM"===t?-1!==(r=xe.call(this._shortMonthsParse,s))?r:-1!==(r=xe.call(this._longMonthsParse,s))?r:null:-1!==(r=xe.call(this._longMonthsParse,s))?r:-1!==(r=xe.call(this._shortMonthsParse,s))?r:null}.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),a=0;a<12;a++){if(r=h([2e3,a]),n&&!this._longMonthsParse[a]&&(this._longMonthsParse[a]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[a]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[a]||(i="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[a]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[a].test(e))return a;if(n&&"MMM"===t&&this._shortMonthsParse[a].test(e))return a;if(!n&&this._monthsParse[a].test(e))return a}},Yn.monthsRegex=function(e){return this._monthsParseExact?(_(this,"_monthsRegex")||Re.call(this),e?this._monthsStrictRegex:this._monthsRegex):(_(this,"_monthsRegex")||(this._monthsRegex=ze),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},Yn.monthsShortRegex=function(e){return this._monthsParseExact?(_(this,"_monthsRegex")||Re.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(_(this,"_monthsShortRegex")||(this._monthsShortRegex=Ee),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},Yn.week=function(e){return Je(e,this._week.dow,this._week.doy).week},Yn.firstDayOfYear=function(){return this._week.doy},Yn.firstDayOfWeek=function(){return this._week.dow},Yn.weekdays=function(e,t){var n=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Ge(n,this._week.dow):e?n[e.day()]:n},Yn.weekdaysMin=function(e){return!0===e?Ge(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},Yn.weekdaysShort=function(e){return!0===e?Ge(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},Yn.weekdaysParse=function(e,t,n){var a,r,i;if(this._weekdaysParseExact)return function(e,t,n){var a,r,i,s=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],a=0;a<7;++a)i=h([2e3,1]).day(a),this._minWeekdaysParse[a]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[a]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[a]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(r=xe.call(this._weekdaysParse,s))?r:null:"ddd"===t?-1!==(r=xe.call(this._shortWeekdaysParse,s))?r:null:-1!==(r=xe.call(this._minWeekdaysParse,s))?r:null:"dddd"===t?-1!==(r=xe.call(this._weekdaysParse,s))?r:-1!==(r=xe.call(this._shortWeekdaysParse,s))?r:-1!==(r=xe.call(this._minWeekdaysParse,s))?r:null:"ddd"===t?-1!==(r=xe.call(this._shortWeekdaysParse,s))?r:-1!==(r=xe.call(this._weekdaysParse,s))?r:-1!==(r=xe.call(this._minWeekdaysParse,s))?r:null:-1!==(r=xe.call(this._minWeekdaysParse,s))?r:-1!==(r=xe.call(this._weekdaysParse,s))?r:-1!==(r=xe.call(this._shortWeekdaysParse,s))?r:null}.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),a=0;a<7;a++){if(r=h([2e3,1]).day(a),n&&!this._fullWeekdaysParse[a]&&(this._fullWeekdaysParse[a]=new RegExp("^"+this.weekdays(r,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[a]=new RegExp("^"+this.weekdaysShort(r,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[a]=new RegExp("^"+this.weekdaysMin(r,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[a]||(i="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[a]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[a].test(e))return a;if(n&&"ddd"===t&&this._shortWeekdaysParse[a].test(e))return a;if(n&&"dd"===t&&this._minWeekdaysParse[a].test(e))return a;if(!n&&this._weekdaysParse[a].test(e))return a}},Yn.weekdaysRegex=function(e){return this._weekdaysParseExact?(_(this,"_weekdaysRegex")||et.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(_(this,"_weekdaysRegex")||(this._weekdaysRegex=Ze),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},Yn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(_(this,"_weekdaysRegex")||et.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(_(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Xe),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},Yn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(_(this,"_weekdaysRegex")||et.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(_(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Qe),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},Yn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},Yn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},_t("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===k(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),r.lang=w("moment.lang is deprecated. Use moment.locale instead.",_t),r.langData=w("moment.langData is deprecated. Use moment.localeData instead.",ht);var wn=Math.abs;function Tn(e,t,n,a){var r=Gt(t,n);return e._milliseconds+=a*r._milliseconds,e._days+=a*r._days,e._months+=a*r._months,e._bubble()}function xn(e){return e<0?Math.floor(e):Math.ceil(e)}function Sn(e){return 4800*e/146097}function Hn(e){return 146097*e/4800}function jn(e){return function(){return this.as(e)}}var Pn=jn("ms"),On=jn("s"),An=jn("m"),Wn=jn("h"),Fn=jn("d"),Cn=jn("w"),In=jn("M"),En=jn("Q"),zn=jn("y");function Rn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Nn=Rn("milliseconds"),Bn=Rn("seconds"),Vn=Rn("minutes"),Jn=Rn("hours"),Un=Rn("days"),Gn=Rn("months"),qn=Rn("years"),$n=Math.round,Kn={ss:44,s:45,m:45,h:22,d:26,M:11},Zn=Math.abs;function Xn(e){return(e>0)-(e<0)||+e}function Qn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=Zn(this._milliseconds)/1e3,a=Zn(this._days),r=Zn(this._months);e=Y(n/60),t=Y(e/60),n%=60,e%=60;var i=Y(r/12),s=r%=12,o=a,d=t,u=e,l=n?n.toFixed(3).replace(/\.?0+$/,""):"",_=this.asSeconds();if(!_)return"P0D";var c=_<0?"-":"",h=Xn(this._months)!==Xn(_)?"-":"",m=Xn(this._days)!==Xn(_)?"-":"",f=Xn(this._milliseconds)!==Xn(_)?"-":"";return c+"P"+(i?h+i+"Y":"")+(s?h+s+"M":"")+(o?m+o+"D":"")+(d||u||l?"T":"")+(d?f+d+"H":"")+(u?f+u+"M":"")+(l?f+l+"S":"")}var ea=Ft.prototype;return ea.isValid=function(){return this._isValid},ea.abs=function(){var e=this._data;return this._milliseconds=wn(this._milliseconds),this._days=wn(this._days),this._months=wn(this._months),e.milliseconds=wn(e.milliseconds),e.seconds=wn(e.seconds),e.minutes=wn(e.minutes),e.hours=wn(e.hours),e.months=wn(e.months),e.years=wn(e.years),this},ea.add=function(e,t){return Tn(this,e,t,1)},ea.subtract=function(e,t){return Tn(this,e,t,-1)},ea.as=function(e){if(!this.isValid())return NaN;var t,n,a=this._milliseconds;if("month"===(e=W(e))||"quarter"===e||"year"===e)switch(t=this._days+a/864e5,n=this._months+Sn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Hn(this._months)),e){case"week":return t/7+a/6048e5;case"day":return t+a/864e5;case"hour":return 24*t+a/36e5;case"minute":return 1440*t+a/6e4;case"second":return 86400*t+a/1e3;case"millisecond":return Math.floor(864e5*t)+a;default:throw new Error("Unknown unit "+e)}},ea.asMilliseconds=Pn,ea.asSeconds=On,ea.asMinutes=An,ea.asHours=Wn,ea.asDays=Fn,ea.asWeeks=Cn,ea.asMonths=In,ea.asQuarters=En,ea.asYears=zn,ea.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*k(this._months/12):NaN},ea._bubble=function(){var e,t,n,a,r,i=this._milliseconds,s=this._days,o=this._months,d=this._data;return i>=0&&s>=0&&o>=0||i<=0&&s<=0&&o<=0||(i+=864e5*xn(Hn(o)+s),s=0,o=0),d.milliseconds=i%1e3,e=Y(i/1e3),d.seconds=e%60,t=Y(e/60),d.minutes=t%60,n=Y(t/60),d.hours=n%24,s+=Y(n/24),r=Y(Sn(s)),o+=r,s-=xn(Hn(r)),a=Y(o/12),o%=12,d.days=s,d.months=o,d.years=a,this},ea.clone=function(){return Gt(this)},ea.get=function(e){return e=W(e),this.isValid()?this[e+"s"]():NaN},ea.milliseconds=Nn,ea.seconds=Bn,ea.minutes=Vn,ea.hours=Jn,ea.days=Un,ea.weeks=function(){return Y(this.days()/7)},ea.months=Gn,ea.years=qn,ea.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=function(e,t,n){var a=Gt(e).abs(),r=$n(a.as("s")),i=$n(a.as("m")),s=$n(a.as("h")),o=$n(a.as("d")),d=$n(a.as("M")),u=$n(a.as("y")),l=r<=Kn.ss&&["s",r]||r<Kn.s&&["ss",r]||i<=1&&["m"]||i<Kn.m&&["mm",i]||s<=1&&["h"]||s<Kn.h&&["hh",s]||o<=1&&["d"]||o<Kn.d&&["dd",o]||d<=1&&["M"]||d<Kn.M&&["MM",d]||u<=1&&["y"]||["yy",u];return l[2]=t,l[3]=+e>0,l[4]=n,function(e,t,n,a,r){return r.relativeTime(t||1,!!n,e,a)}.apply(null,l)}(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)},ea.toISOString=Qn,ea.toString=Qn,ea.toJSON=Qn,ea.locale=tn,ea.localeData=an,ea.toIsoString=w("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Qn),ea.lang=nn,V("X",0,0,"unix"),V("x",0,0,"valueOf"),le("x",ie),le("X",/[+-]?\d+(\.\d{1,3})?/),me("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),me("x",function(e,t,n){n._d=new Date(k(e))}),r.version="2.24.0",t=jt,r.fn=vn,r.min=function(){return At("isBefore",[].slice.call(arguments,0))},r.max=function(){return At("isAfter",[].slice.call(arguments,0))},r.now=function(){return Date.now?Date.now():+new Date},r.utc=h,r.unix=function(e){return jt(1e3*e)},r.months=function(e,t){return bn(e,t,"months")},r.isDate=u,r.locale=_t,r.invalid=p,r.duration=Gt,r.isMoment=L,r.weekdays=function(e,t,n){return Dn(e,t,n,"weekdays")},r.parseZone=function(){return jt.apply(null,arguments).parseZone()},r.localeData=ht,r.isDuration=Ct,r.monthsShort=function(e,t){return bn(e,t,"monthsShort")},r.weekdaysMin=function(e,t,n){return Dn(e,t,n,"weekdaysMin")},r.defineLocale=ct,r.updateLocale=function(e,t){if(null!=t){var n,a,r=st;null!=(a=lt(e))&&(r=a._config),t=j(r,t),(n=new P(t)).parentLocale=ot[e],ot[e]=n,_t(e)}else null!=ot[e]&&(null!=ot[e].parentLocale?ot[e]=ot[e].parentLocale:null!=ot[e]&&delete ot[e]);return ot[e]},r.locales=function(){return T(ot)},r.weekdaysShort=function(e,t,n){return Dn(e,t,n,"weekdaysShort")},r.normalizeUnits=W,r.relativeTimeRounding=function(e){return void 0===e?$n:"function"==typeof e&&($n=e,!0)},r.relativeTimeThreshold=function(e,t){return void 0!==Kn[e]&&(void 0===t?Kn[e]:(Kn[e]=t,"s"===e&&(Kn.ss=t-1),!0))},r.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},r.prototype=vn,r.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},r}()}).call(this,n(1)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},a=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,n,i,s){var o=a(t),d=r[e][a(t)];return 2===o&&(d=d[n?0:1]),d.replace(/%d/i,t)}},s=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:s,monthsShort:s,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-dz",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"أح_إث_ثلا_أر_خم_جم_سب".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(t,r,i,s){var o=n(t),d=a[e][n(t)];return 2===o&&(d=d[r?0:1]),d.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var a,r;return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(a=+e,r={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),a%10==1&&a%100!=11?r[0]:a%10>=2&&a%10<=4&&(a%100<10||a%100>=20)?r[1]:r[2])}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}e.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var a=e+" ";switch(n){case"ss":return a+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return a+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return a+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return a+=1===e?"dan":"dana";case"MM":return a+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return a+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),a=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],r=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function i(e){return e>1&&e<5&&1!=~~(e/10)}function s(e,t,n,a){var r=e+" ";switch(n){case"s":return t||a?"pár sekund":"pár sekundami";case"ss":return t||a?r+(i(e)?"sekundy":"sekund"):r+"sekundami";case"m":return t?"minuta":a?"minutu":"minutou";case"mm":return t||a?r+(i(e)?"minuty":"minut"):r+"minutami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?r+(i(e)?"hodiny":"hodin"):r+"hodinami";case"d":return t||a?"den":"dnem";case"dd":return t||a?r+(i(e)?"dny":"dní"):r+"dny";case"M":return t||a?"měsíc":"měsícem";case"MM":return t||a?r+(i(e)?"měsíce":"měsíců"):r+"měsíci";case"y":return t||a?"rok":"rokem";case"yy":return t||a?r+(i(e)?"roky":"let"):r+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,a=this._calendarEl[e],r=t&&t.hours();return((n=a)instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(a=a.apply(t)),a.replace("{}",r%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-SG",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-a de] MMMM, YYYY",LLL:"D[-a de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-a de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"sekundoj",ss:"%d sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),a=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),a=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),a=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?r[n][2]?r[n][2]:r[n][1]:a?r[n][0]:r[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"ثانیه d%",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function a(e,a,r,i){var s="";switch(r){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":return i?"sekunnin":"sekuntia";case"m":return i?"minuutin":"minuutti";case"mm":s=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":s=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":s=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":s=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":s=i?"vuoden":"vuotta"}return s=function(e,a){return e<10?a?n[e]:t[e]:e}(e,i)+" "+s}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Méitheamh","Iúil","Lúnasa","Meán Fómhair","Deaireadh Fómhair","Samhain","Nollaig"],monthsShort:["Eaná","Feab","Márt","Aibr","Beal","Méit","Iúil","Lúna","Meán","Deai","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Satharn"],weekdaysShort:["Dom","Lua","Mái","Céa","Déa","hAo","Sat"],weekdaysMin:["Do","Lu","Má","Ce","Dé","hA","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné aig] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d mí",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={s:["thodde secondanim","thodde second"],ss:[e+" secondanim",e+" second"],m:["eka mintan","ek minute"],mm:[e+" mintanim",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voranim",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disanim",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineanim",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsanim",e+" vorsam"]};return t?r[n][0]:r[n][1]}e.defineLocale("gom-latn",{months:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Ieta to] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fatlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:1,doy:4},meridiemParse:/rati|sokalli|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokalli"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokalli":e<16?"donparam":e<20?"sanje":"rati"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પેહલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var a=e+" ";switch(n){case"ss":return a+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return a+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return a+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return a+=1===e?"dan":"dana";case"MM":return a+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return a+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,a){var r=e;switch(n){case"s":return a||t?"néhány másodperc":"néhány másodperce";case"ss":return r+(a||t)?" másodperc":" másodperce";case"m":return"egy"+(a||t?" perc":" perce");case"mm":return r+(a||t?" perc":" perce");case"h":return"egy"+(a||t?" óra":" órája");case"hh":return r+(a||t?" óra":" órája");case"d":return"egy"+(a||t?" nap":" napja");case"dd":return r+(a||t?" nap":" napja");case"M":return"egy"+(a||t?" hónap":" hónapja");case"MM":return r+(a||t?" hónap":" hónapja");case"y":return"egy"+(a||t?" év":" éve");case"yy":return r+(a||t?" év":" éve")}return""}function a(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return a.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return a.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,a,r){var i=e+" ";switch(a){case"s":return n||r?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?i+(n||r?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?i+(n||r?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return t(e)?i+(n||r?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":r?"dag":"degi";case"dd":return t(e)?n?i+"dagar":i+(r?"daga":"dögum"):n?i+"dagur":i+(r?"dag":"degi");case"M":return n?"mánuður":r?"mánuð":"mánuði";case"MM":return t(e)?n?i+"mánuðir":i+(r?"mánuði":"mánuðum"):n?i+"mánuður":i+(r?"mánuð":"mánuði");case"y":return n||r?"ár":"ári";case"yy":return t(e)?i+(n||r?"ár":"árum"):i+(n||r?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()<this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()<e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return/(წამი|წუთი|საათი|წელი)/.test(e)?e.replace(/ი$/,"ში"):e+"ში"},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},a=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:a,monthsShort:a,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?r[n][0]:r[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,a){return t?r(n)[0]:a?r(n)[1]:r(n)[2]}function a(e){return e%10==0||e>10&&e<20}function r(e){return t[e].split("_")}function i(e,t,i,s){var o=e+" ";return 1===e?o+n(0,t,i[0],s):t?o+(a(e)?r(i)[1]:r(i)[0]):s?o+r(i)[1]:o+(a(e)?r(i)[1]:r(i)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,a){return t?"kelios sekundės":a?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function a(e,a,r){return e+" "+n(t[r],e,a)}function r(e,a,r){return n(t[r],e,a)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:a,m:r,mm:a,h:r,hh:a,d:r,dd:a,M:r,MM:a,y:r,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,a){var r=t.words[a];return 1===a.length?n?r[0]:r[1]:e+" "+t.correctGrammaticalCase(e,r)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function a(e,t,n,a){var r="";if(t)switch(n){case"s":r="काही सेकंद";break;case"ss":r="%d सेकंद";break;case"m":r="एक मिनिट";break;case"mm":r="%d मिनिटे";break;case"h":r="एक तास";break;case"hh":r="%d तास";break;case"d":r="एक दिवस";break;case"dd":r="%d दिवस";break;case"M":r="एक महिना";break;case"MM":r="%d महिने";break;case"y":r="एक वर्ष";break;case"yy":r="%d वर्षे"}else switch(n){case"s":r="काही सेकंदां";break;case"ss":r="%d सेकंदां";break;case"m":r="एका मिनिटा";break;case"mm":r="%d मिनिटां";break;case"h":r="एका तासा";break;case"hh":r="%d तासां";break;case"d":r="एका दिवसा";break;case"dd":r="%d दिवसां";break;case"M":r="एका महिन्या";break;case"MM":r="%d महिन्यां";break;case"y":r="एका वर्षा";break;case"yy":r="%d वर्षां"}return r.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात्री"===t?e<4?e:e+12:"सकाळी"===t?e:"दुपारी"===t?e>=10?e:e+12:"सायंकाळी"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात्री":e<10?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),a=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],r=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),a=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],r=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,a){return e?/-MMM-/.test(a)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");function a(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function r(e,t,n){var r=e+" ";switch(n){case"ss":return r+(a(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return r+(a(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return r+(a(e)?"godziny":"godzin");case"MM":return r+(a(e)?"miesiące":"miesięcy");case"yy":return r+(a(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,a){return e?""===a?"("+n[e.month()]+"|"+t[e.month()]+")":/D MMMM/.test(a)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:r,m:r,mm:r,h:r,hh:r,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:r,y:"rok",yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº"})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var a=" ";return(e%100>=20||e>=100&&e%100==0)&&(a=" de "),e+a+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var a,r;return"m"===n?t?"минута":"минуту":e+" "+(a=+e,r={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),a%10==1&&a%100!=11?r[0]:a%10>=2&&a%10<=4&&(a%100<10||a%100>=20)?r[1]:r[2])}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function a(e){return e>1&&e<5}function r(e,t,n,r){var i=e+" ";switch(n){case"s":return t||r?"pár sekúnd":"pár sekundami";case"ss":return t||r?i+(a(e)?"sekundy":"sekúnd"):i+"sekundami";case"m":return t?"minúta":r?"minútu":"minútou";case"mm":return t||r?i+(a(e)?"minúty":"minút"):i+"minútami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?i+(a(e)?"hodiny":"hodín"):i+"hodinami";case"d":return t||r?"deň":"dňom";case"dd":return t||r?i+(a(e)?"dni":"dní"):i+"dňami";case"M":return t||r?"mesiac":"mesiacom";case"MM":return t||r?i+(a(e)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return t||r?"rok":"rokom";case"yy":return t||r?i+(a(e)?"roky":"rokov"):i+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r=e+" ";switch(n){case"s":return t||a?"nekaj sekund":"nekaj sekundami";case"ss":return r+=1===e?t?"sekundo":"sekundi":2===e?t||a?"sekundi":"sekundah":e<5?t||a?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return r+=1===e?t?"minuta":"minuto":2===e?t||a?"minuti":"minutama":e<5?t||a?"minute":"minutami":t||a?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return r+=1===e?t?"ura":"uro":2===e?t||a?"uri":"urama":e<5?t||a?"ure":"urami":t||a?"ur":"urami";case"d":return t||a?"en dan":"enim dnem";case"dd":return r+=1===e?t||a?"dan":"dnem":2===e?t||a?"dni":"dnevoma":t||a?"dni":"dnevi";case"M":return t||a?"en mesec":"enim mesecem";case"MM":return r+=1===e?t||a?"mesec":"mesecem":2===e?t||a?"meseca":"mesecema":e<5?t||a?"mesece":"meseci":t||a?"mesecev":"meseci";case"y":return t||a?"eno leto":"enim letom";case"yy":return r+=1===e?t||a?"leto":"letom":2===e?t||a?"leti":"letoma":e<5?t||a?"leta":"leti":t||a?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,a){var r=t.words[a];return 1===a.length?n?r[0]:r[1]:e+" "+t.correctGrammaticalCase(e,r)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,a){var r=t.words[a];return 1===a.length?n?r[0]:r[1]:e+" "+t.correctGrammaticalCase(e,r)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t?e:"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",ss:"minutu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Пагоҳ соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,a,r){var i=function(e){var n=Math.floor(e%1e3/100),a=Math.floor(e%100/10),r=e%10,i="";return n>0&&(i+=t[n]+"vatlh"),a>0&&(i+=(""!==i?" ":"")+t[a]+"maH"),r>0&&(i+=(""!==i?" ":"")+t[r]),""===i?"pagh":i}(e);switch(a){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var a=e%10;return e+(t[a]||t[e%100-a]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,a){var r={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return a?r[n][0]:t?r[n][0]:r[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var a=100*e+t;return a<600?"يېرىم كېچە":a<900?"سەھەر":a<1130?"چۈشتىن بۇرۇن":a<1230?"چۈش":a<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var a,r;return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(a=+e,r={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),a%10==1&&a%100!=11?r[0]:a%10>=2&&a%10<=4&&(a%100<10||a%100>=20)?r[1]:r[2])}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var a=100*e+t;return a<600?"凌晨":a<900?"早上":a<1130?"上午":a<1230?"中午":a<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var a=100*e+t;return a<600?"凌晨":a<900?"早上":a<1130?"上午":a<1230?"中午":a<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var a=100*e+t;return a<600?"凌晨":a<900?"早上":a<1130?"上午":a<1230?"中午":a<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(130)),i=a(n(132)),s=a(n(0));n(134);var o,d,u,l,_=n(135);o=_.Birthday,$("#birthdate").text("Born on "+o.format("MMMM Do YYYY")),function(e){$("#realtiveAge").text(e)}(function(e){var t=s.default().startOf("day"),n=t.diff(e,"week"),a=e.preciseDiff(t)+" old";return n<24&&(a=a+" ("+n+" weeks)"),a}(_.Birthday)),d=_.WeightMeasures,u=document.getElementById("weightChart"),l=function(e){return{data:{datasets:[{data:i.default.map(e,function(e){return e.asChartData()}),fill:!1,label:"Weight (lbs)"}]},options:{legend:{display:!1},responsive:!0,scales:{xAxes:[{display:!0,scaleLabel:{display:!0,labelString:"Date"},ticks:{},type:"time"}],yAxes:[{display:!0,scaleLabel:{display:!0,labelString:"Weight (lbs)"}}]},title:{display:!0,text:"Sasha's Weight"}},type:"line"}}(d),new r.default(u,l)},function(e,t,n){
/*!
 * Chart.js v2.8.0
 * https://www.chartjs.org
 * (c) 2019 Chart.js Contributors
 * Released under the MIT License
 */
e.exports=function(e){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e;var t={rgb2hsl:n,rgb2hsv:a,rgb2hwb:i,rgb2cmyk:s,rgb2keyword:o,rgb2xyz:d,rgb2lab:u,rgb2lch:function(e){return M(u(e))},hsl2rgb:l,hsl2hsv:function(e){var t=e[0],n=e[1]/100,a=e[2]/100;return 0===a?[0,0,0]:[t,2*(n*=(a*=2)<=1?a:2-a)/(a+n)*100,(a+n)/2*100]},hsl2hwb:function(e){return i(l(e))},hsl2cmyk:function(e){return s(l(e))},hsl2keyword:function(e){return o(l(e))},hsv2rgb:_,hsv2hsl:function(e){var t,n,a=e[0],r=e[1]/100,i=e[2]/100;return t=r*i,[a,100*(t=(t/=(n=(2-r)*i)<=1?n:2-n)||0),100*(n/=2)]},hsv2hwb:function(e){return i(_(e))},hsv2cmyk:function(e){return s(_(e))},hsv2keyword:function(e){return o(_(e))},hwb2rgb:c,hwb2hsl:function(e){return n(c(e))},hwb2hsv:function(e){return a(c(e))},hwb2cmyk:function(e){return s(c(e))},hwb2keyword:function(e){return o(c(e))},cmyk2rgb:h,cmyk2hsl:function(e){return n(h(e))},cmyk2hsv:function(e){return a(h(e))},cmyk2hwb:function(e){return i(h(e))},cmyk2keyword:function(e){return o(h(e))},keyword2rgb:L,keyword2hsl:function(e){return n(L(e))},keyword2hsv:function(e){return a(L(e))},keyword2hwb:function(e){return i(L(e))},keyword2cmyk:function(e){return s(L(e))},keyword2lab:function(e){return u(L(e))},keyword2xyz:function(e){return d(L(e))},xyz2rgb:m,xyz2lab:f,xyz2lch:function(e){return M(f(e))},lab2xyz:p,lab2rgb:y,lab2lch:M,lch2lab:v,lch2xyz:function(e){return p(v(e))},lch2rgb:function(e){return y(v(e))}};function n(e){var t,n,a=e[0]/255,r=e[1]/255,i=e[2]/255,s=Math.min(a,r,i),o=Math.max(a,r,i),d=o-s;return o==s?t=0:a==o?t=(r-i)/d:r==o?t=2+(i-a)/d:i==o&&(t=4+(a-r)/d),(t=Math.min(60*t,360))<0&&(t+=360),n=(s+o)/2,[t,100*(o==s?0:n<=.5?d/(o+s):d/(2-o-s)),100*n]}function a(e){var t,n,a=e[0],r=e[1],i=e[2],s=Math.min(a,r,i),o=Math.max(a,r,i),d=o-s;return n=0==o?0:d/o*1e3/10,o==s?t=0:a==o?t=(r-i)/d:r==o?t=2+(i-a)/d:i==o&&(t=4+(a-r)/d),(t=Math.min(60*t,360))<0&&(t+=360),[t,n,o/255*1e3/10]}function i(e){var t=e[0],a=e[1],r=e[2];return[n(e)[0],1/255*Math.min(t,Math.min(a,r))*100,100*(r=1-1/255*Math.max(t,Math.max(a,r)))]}function s(e){var t,n=e[0]/255,a=e[1]/255,r=e[2]/255;return[100*((1-n-(t=Math.min(1-n,1-a,1-r)))/(1-t)||0),100*((1-a-t)/(1-t)||0),100*((1-r-t)/(1-t)||0),100*t]}function o(e){return k[JSON.stringify(e)]}function d(e){var t=e[0]/255,n=e[1]/255,a=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(a=a>.04045?Math.pow((a+.055)/1.055,2.4):a/12.92)),100*(.2126*t+.7152*n+.0722*a),100*(.0193*t+.1192*n+.9505*a)]}function u(e){var t=d(e),n=t[0],a=t[1],r=t[2];return a/=100,r/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(a=a>.008856?Math.pow(a,1/3):7.787*a+16/116)-16,500*(n-a),200*(a-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]}function l(e){var t,n,a,r,i,s=e[0]/360,o=e[1]/100,d=e[2]/100;if(0==o)return[i=255*d,i,i];t=2*d-(n=d<.5?d*(1+o):d+o-d*o),r=[0,0,0];for(var u=0;u<3;u++)(a=s+1/3*-(u-1))<0&&a++,a>1&&a--,i=6*a<1?t+6*(n-t)*a:2*a<1?n:3*a<2?t+(n-t)*(2/3-a)*6:t,r[u]=255*i;return r}function _(e){var t=e[0]/60,n=e[1]/100,a=e[2]/100,r=Math.floor(t)%6,i=t-Math.floor(t),s=255*a*(1-n),o=255*a*(1-n*i),d=255*a*(1-n*(1-i));switch(a*=255,r){case 0:return[a,d,s];case 1:return[o,a,s];case 2:return[s,a,d];case 3:return[s,o,a];case 4:return[d,s,a];case 5:return[a,s,o]}}function c(e){var t,n,a,i,s=e[0]/360,o=e[1]/100,d=e[2]/100,u=o+d;switch(u>1&&(o/=u,d/=u),a=6*s-(t=Math.floor(6*s)),0!=(1&t)&&(a=1-a),i=o+a*((n=1-d)-o),t){default:case 6:case 0:r=n,g=i,b=o;break;case 1:r=i,g=n,b=o;break;case 2:r=o,g=n,b=i;break;case 3:r=o,g=i,b=n;break;case 4:r=i,g=o,b=n;break;case 5:r=n,g=o,b=i}return[255*r,255*g,255*b]}function h(e){var t=e[0]/100,n=e[1]/100,a=e[2]/100,r=e[3]/100;return[255*(1-Math.min(1,t*(1-r)+r)),255*(1-Math.min(1,n*(1-r)+r)),255*(1-Math.min(1,a*(1-r)+r))]}function m(e){var t,n,a,r=e[0]/100,i=e[1]/100,s=e[2]/100;return n=-.9689*r+1.8758*i+.0415*s,a=.0557*r+-.204*i+1.057*s,t=(t=3.2406*r+-1.5372*i+-.4986*s)>.0031308?1.055*Math.pow(t,1/2.4)-.055:t*=12.92,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:n*=12.92,a=a>.0031308?1.055*Math.pow(a,1/2.4)-.055:a*=12.92,[255*(t=Math.min(Math.max(0,t),1)),255*(n=Math.min(Math.max(0,n),1)),255*(a=Math.min(Math.max(0,a),1))]}function f(e){var t=e[0],n=e[1],a=e[2];return n/=100,a/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(t-n),200*(n-(a=a>.008856?Math.pow(a,1/3):7.787*a+16/116))]}function p(e){var t,n,a,r,i=e[0],s=e[1],o=e[2];return i<=8?r=(n=100*i/903.3)/100*7.787+16/116:(n=100*Math.pow((i+16)/116,3),r=Math.pow(n/100,1/3)),[t=t/95.047<=.008856?t=95.047*(s/500+r-16/116)/7.787:95.047*Math.pow(s/500+r,3),n,a=a/108.883<=.008859?a=108.883*(r-o/200-16/116)/7.787:108.883*Math.pow(r-o/200,3)]}function M(e){var t,n=e[0],a=e[1],r=e[2];return(t=360*Math.atan2(r,a)/2/Math.PI)<0&&(t+=360),[n,Math.sqrt(a*a+r*r),t]}function y(e){return m(p(e))}function v(e){var t,n=e[0],a=e[1];return t=e[2]/360*2*Math.PI,[n,a*Math.cos(t),a*Math.sin(t)]}function L(e){return Y[e]}var Y={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},k={};for(var D in Y)k[JSON.stringify(Y[D])]=D;var w=function(){return new j};for(var T in t){w[T+"Raw"]=function(e){return function(n){return"number"==typeof n&&(n=Array.prototype.slice.call(arguments)),t[e](n)}}(T);var x=/(\w+)2(\w+)/.exec(T),S=x[1],H=x[2];(w[S]=w[S]||{})[H]=w[T]=function(e){return function(n){"number"==typeof n&&(n=Array.prototype.slice.call(arguments));var a=t[e](n);if("string"==typeof a||void 0===a)return a;for(var r=0;r<a.length;r++)a[r]=Math.round(a[r]);return a}}(T)}var j=function(){this.convs={}};j.prototype.routeSpace=function(e,t){var n=t[0];return void 0===n?this.getValues(e):("number"==typeof n&&(n=Array.prototype.slice.call(t)),this.setValues(e,n))},j.prototype.setValues=function(e,t){return this.space=e,this.convs={},this.convs[e]=t,this},j.prototype.getValues=function(e){var t=this.convs[e];if(!t){var n=this.space,a=this.convs[n];t=w[n][e](a),this.convs[e]=t}return t},["rgb","hsl","hsv","cmyk","keyword"].forEach(function(e){j.prototype[e]=function(t){return this.routeSpace(e,arguments)}});var P=w,O={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},A={getRgba:W,getHsla:F,getRgb:function(e){var t=W(e);return t&&t.slice(0,3)},getHsl:function(e){var t=F(e);return t&&t.slice(0,3)},getHwb:C,getAlpha:function(e){var t=W(e);return t?t[3]:(t=F(e))?t[3]:(t=C(e))?t[3]:void 0},hexString:function(e,t){return t=void 0!==t&&3===e.length?t:e[3],"#"+N(e[0])+N(e[1])+N(e[2])+(t>=0&&t<1?N(Math.round(255*t)):"")},rgbString:function(e,t){return t<1||e[3]&&e[3]<1?I(e,t):"rgb("+e[0]+", "+e[1]+", "+e[2]+")"},rgbaString:I,percentString:function(e,t){if(t<1||e[3]&&e[3]<1)return E(e,t);var n=Math.round(e[0]/255*100),a=Math.round(e[1]/255*100),r=Math.round(e[2]/255*100);return"rgb("+n+"%, "+a+"%, "+r+"%)"},percentaString:E,hslString:function(e,t){return t<1||e[3]&&e[3]<1?z(e,t):"hsl("+e[0]+", "+e[1]+"%, "+e[2]+"%)"},hslaString:z,hwbString:function(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hwb("+e[0]+", "+e[1]+"%, "+e[2]+"%"+(void 0!==t&&1!==t?", "+t:"")+")"},keyword:function(e){return B[e.slice(0,3)]}};function W(e){if(e){var t=[0,0,0],n=1,a=e.match(/^#([a-fA-F0-9]{3,4})$/i),r="";if(a){r=(a=a[1])[3];for(var i=0;i<t.length;i++)t[i]=parseInt(a[i]+a[i],16);r&&(n=Math.round(parseInt(r+r,16)/255*100)/100)}else if(a=e.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){for(r=a[2],a=a[1],i=0;i<t.length;i++)t[i]=parseInt(a.slice(2*i,2*i+2),16);r&&(n=Math.round(parseInt(r,16)/255*100)/100)}else if(a=e.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(i=0;i<t.length;i++)t[i]=parseInt(a[i+1]);n=parseFloat(a[4])}else if(a=e.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(i=0;i<t.length;i++)t[i]=Math.round(2.55*parseFloat(a[i+1]));n=parseFloat(a[4])}else if(a=e.match(/(\w+)/)){if("transparent"==a[1])return[0,0,0,0];if(!(t=O[a[1]]))return}for(i=0;i<t.length;i++)t[i]=R(t[i],0,255);return n=n||0==n?R(n,0,1):1,t[3]=n,t}}function F(e){if(e){var t=e.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var n=parseFloat(t[4]);return[R(parseInt(t[1]),0,360),R(parseFloat(t[2]),0,100),R(parseFloat(t[3]),0,100),R(isNaN(n)?1:n,0,1)]}}}function C(e){if(e){var t=e.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var n=parseFloat(t[4]);return[R(parseInt(t[1]),0,360),R(parseFloat(t[2]),0,100),R(parseFloat(t[3]),0,100),R(isNaN(n)?1:n,0,1)]}}}function I(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"rgba("+e[0]+", "+e[1]+", "+e[2]+", "+t+")"}function E(e,t){return"rgba("+Math.round(e[0]/255*100)+"%, "+Math.round(e[1]/255*100)+"%, "+Math.round(e[2]/255*100)+"%, "+(t||e[3]||1)+")"}function z(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hsla("+e[0]+", "+e[1]+"%, "+e[2]+"%, "+t+")"}function R(e,t,n){return Math.min(Math.max(t,e),n)}function N(e){var t=e.toString(16).toUpperCase();return t.length<2?"0"+t:t}var B={};for(var V in O)B[O[V]]=V;var J=function(e){return e instanceof J?e:this instanceof J?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof e?(t=A.getRgba(e))?this.setValues("rgb",t):(t=A.getHsla(e))?this.setValues("hsl",t):(t=A.getHwb(e))&&this.setValues("hwb",t):"object"==typeof e&&(void 0!==(t=e).r||void 0!==t.red?this.setValues("rgb",t):void 0!==t.l||void 0!==t.lightness?this.setValues("hsl",t):void 0!==t.v||void 0!==t.value?this.setValues("hsv",t):void 0!==t.w||void 0!==t.whiteness?this.setValues("hwb",t):void 0===t.c&&void 0===t.cyan||this.setValues("cmyk",t)))):new J(e);var t};J.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var e=this.values;return 1!==e.alpha?e.hwb.concat([e.alpha]):e.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var e=this.values;return e.rgb.concat([e.alpha])},hslaArray:function(){var e=this.values;return e.hsl.concat([e.alpha])},alpha:function(e){return void 0===e?this.values.alpha:(this.setValues("alpha",e),this)},red:function(e){return this.setChannel("rgb",0,e)},green:function(e){return this.setChannel("rgb",1,e)},blue:function(e){return this.setChannel("rgb",2,e)},hue:function(e){return e&&(e=(e%=360)<0?360+e:e),this.setChannel("hsl",0,e)},saturation:function(e){return this.setChannel("hsl",1,e)},lightness:function(e){return this.setChannel("hsl",2,e)},saturationv:function(e){return this.setChannel("hsv",1,e)},whiteness:function(e){return this.setChannel("hwb",1,e)},blackness:function(e){return this.setChannel("hwb",2,e)},value:function(e){return this.setChannel("hsv",2,e)},cyan:function(e){return this.setChannel("cmyk",0,e)},magenta:function(e){return this.setChannel("cmyk",1,e)},yellow:function(e){return this.setChannel("cmyk",2,e)},black:function(e){return this.setChannel("cmyk",3,e)},hexString:function(){return A.hexString(this.values.rgb)},rgbString:function(){return A.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return A.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return A.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return A.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return A.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return A.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return A.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var e=this.values.rgb;return e[0]<<16|e[1]<<8|e[2]},luminosity:function(){for(var e=this.values.rgb,t=[],n=0;n<e.length;n++){var a=e[n]/255;t[n]=a<=.03928?a/12.92:Math.pow((a+.055)/1.055,2.4)}return.2126*t[0]+.7152*t[1]+.0722*t[2]},contrast:function(e){var t=this.luminosity(),n=e.luminosity();return t>n?(t+.05)/(n+.05):(n+.05)/(t+.05)},level:function(e){var t=this.contrast(e);return t>=7.1?"AAA":t>=4.5?"AA":""},dark:function(){var e=this.values.rgb;return(299*e[0]+587*e[1]+114*e[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var e=[],t=0;t<3;t++)e[t]=255-this.values.rgb[t];return this.setValues("rgb",e),this},lighten:function(e){var t=this.values.hsl;return t[2]+=t[2]*e,this.setValues("hsl",t),this},darken:function(e){var t=this.values.hsl;return t[2]-=t[2]*e,this.setValues("hsl",t),this},saturate:function(e){var t=this.values.hsl;return t[1]+=t[1]*e,this.setValues("hsl",t),this},desaturate:function(e){var t=this.values.hsl;return t[1]-=t[1]*e,this.setValues("hsl",t),this},whiten:function(e){var t=this.values.hwb;return t[1]+=t[1]*e,this.setValues("hwb",t),this},blacken:function(e){var t=this.values.hwb;return t[2]+=t[2]*e,this.setValues("hwb",t),this},greyscale:function(){var e=this.values.rgb,t=.3*e[0]+.59*e[1]+.11*e[2];return this.setValues("rgb",[t,t,t]),this},clearer:function(e){var t=this.values.alpha;return this.setValues("alpha",t-t*e),this},opaquer:function(e){var t=this.values.alpha;return this.setValues("alpha",t+t*e),this},rotate:function(e){var t=this.values.hsl,n=(t[0]+e)%360;return t[0]=n<0?360+n:n,this.setValues("hsl",t),this},mix:function(e,t){var n=e,a=void 0===t?.5:t,r=2*a-1,i=this.alpha()-n.alpha(),s=((r*i==-1?r:(r+i)/(1+r*i))+1)/2,o=1-s;return this.rgb(s*this.red()+o*n.red(),s*this.green()+o*n.green(),s*this.blue()+o*n.blue()).alpha(this.alpha()*a+n.alpha()*(1-a))},toJSON:function(){return this.rgb()},clone:function(){var e,t,n=new J,a=this.values,r=n.values;for(var i in a)a.hasOwnProperty(i)&&(e=a[i],"[object Array]"===(t={}.toString.call(e))?r[i]=e.slice(0):"[object Number]"===t?r[i]=e:console.error("unexpected color value:",e));return n}},J.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},J.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},J.prototype.getValues=function(e){for(var t=this.values,n={},a=0;a<e.length;a++)n[e.charAt(a)]=t[e][a];return 1!==t.alpha&&(n.a=t.alpha),n},J.prototype.setValues=function(e,t){var n,a,r=this.values,i=this.spaces,s=this.maxes,o=1;if(this.valid=!0,"alpha"===e)o=t;else if(t.length)r[e]=t.slice(0,e.length),o=t[e.length];else if(void 0!==t[e.charAt(0)]){for(n=0;n<e.length;n++)r[e][n]=t[e.charAt(n)];o=t.a}else if(void 0!==t[i[e][0]]){var d=i[e];for(n=0;n<e.length;n++)r[e][n]=t[d[n]];o=t.alpha}if(r.alpha=Math.max(0,Math.min(1,void 0===o?r.alpha:o)),"alpha"===e)return!1;for(n=0;n<e.length;n++)a=Math.max(0,Math.min(s[e][n],r[e][n])),r[e][n]=Math.round(a);for(var u in i)u!==e&&(r[u]=P[e][u](r[e]));return!0},J.prototype.setSpace=function(e,t){var n=t[0];return void 0===n?this.getValues(e):("number"==typeof n&&(n=Array.prototype.slice.call(t)),this.setValues(e,n),this)},J.prototype.setChannel=function(e,t,n){var a=this.values[e];return void 0===n?a[t]:n===a[t]?this:(a[t]=n,this.setValues(e,a),this)},"undefined"!=typeof window&&(window.Color=J);var U,G=J,q={noop:function(){},uid:(U=0,function(){return U++}),isNullOrUndef:function(e){return null==e},isArray:function(e){if(Array.isArray&&Array.isArray(e))return!0;var t=Object.prototype.toString.call(e);return"[object"===t.substr(0,7)&&"Array]"===t.substr(-6)},isObject:function(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)},isFinite:function(e){return("number"==typeof e||e instanceof Number)&&isFinite(e)},valueOrDefault:function(e,t){return void 0===e?t:e},valueAtIndexOrDefault:function(e,t,n){return q.valueOrDefault(q.isArray(e)?e[t]:e,n)},callback:function(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)},each:function(e,t,n,a){var r,i,s;if(q.isArray(e))if(i=e.length,a)for(r=i-1;r>=0;r--)t.call(n,e[r],r);else for(r=0;r<i;r++)t.call(n,e[r],r);else if(q.isObject(e))for(i=(s=Object.keys(e)).length,r=0;r<i;r++)t.call(n,e[s[r]],s[r])},arrayEquals:function(e,t){var n,a,r,i;if(!e||!t||e.length!==t.length)return!1;for(n=0,a=e.length;n<a;++n)if(r=e[n],i=t[n],r instanceof Array&&i instanceof Array){if(!q.arrayEquals(r,i))return!1}else if(r!==i)return!1;return!0},clone:function(e){if(q.isArray(e))return e.map(q.clone);if(q.isObject(e)){for(var t={},n=Object.keys(e),a=n.length,r=0;r<a;++r)t[n[r]]=q.clone(e[n[r]]);return t}return e},_merger:function(e,t,n,a){var r=t[e],i=n[e];q.isObject(r)&&q.isObject(i)?q.merge(r,i,a):t[e]=q.clone(i)},_mergerIf:function(e,t,n){var a=t[e],r=n[e];q.isObject(a)&&q.isObject(r)?q.mergeIf(a,r):t.hasOwnProperty(e)||(t[e]=q.clone(r))},merge:function(e,t,n){var a,r,i,s,o,d=q.isArray(t)?t:[t],u=d.length;if(!q.isObject(e))return e;for(a=(n=n||{}).merger||q._merger,r=0;r<u;++r)if(t=d[r],q.isObject(t))for(o=0,s=(i=Object.keys(t)).length;o<s;++o)a(i[o],e,t,n);return e},mergeIf:function(e,t){return q.merge(e,t,{merger:q._mergerIf})},extend:function(e){for(var t=function(t,n){e[n]=t},n=1,a=arguments.length;n<a;++n)q.each(arguments[n],t);return e},inherits:function(e){var t=this,n=e&&e.hasOwnProperty("constructor")?e.constructor:function(){return t.apply(this,arguments)},a=function(){this.constructor=n};return a.prototype=t.prototype,n.prototype=new a,n.extend=q.inherits,e&&q.extend(n.prototype,e),n.__super__=t.prototype,n}},$=q;q.callCallback=q.callback,q.indexOf=function(e,t,n){return Array.prototype.indexOf.call(e,t,n)},q.getValueOrDefault=q.valueOrDefault,q.getValueAtIndexOrDefault=q.valueAtIndexOrDefault;var K={linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return-e*(e-2)},easeInOutQuad:function(e){return(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1)},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return(e-=1)*e*e+1},easeInOutCubic:function(e){return(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2)},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return-((e-=1)*e*e*e-1)},easeInOutQuart:function(e){return(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return(e-=1)*e*e*e*e+1},easeInOutQuint:function(e){return(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)},easeInSine:function(e){return 1-Math.cos(e*(Math.PI/2))},easeOutSine:function(e){return Math.sin(e*(Math.PI/2))},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e)-1)},easeInExpo:function(e){return 0===e?0:Math.pow(2,10*(e-1))},easeOutExpo:function(e){return 1===e?1:1-Math.pow(2,-10*e)},easeInOutExpo:function(e){return 0===e?0:1===e?1:(e/=.5)<1?.5*Math.pow(2,10*(e-1)):.5*(2-Math.pow(2,-10*--e))},easeInCirc:function(e){return e>=1?e:-(Math.sqrt(1-e*e)-1)},easeOutCirc:function(e){return Math.sqrt(1-(e-=1)*e)},easeInOutCirc:function(e){return(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},easeInElastic:function(e){var t=1.70158,n=0,a=1;return 0===e?0:1===e?1:(n||(n=.3),a<1?(a=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/a),-a*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n))},easeOutElastic:function(e){var t=1.70158,n=0,a=1;return 0===e?0:1===e?1:(n||(n=.3),a<1?(a=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/a),a*Math.pow(2,-10*e)*Math.sin((e-t)*(2*Math.PI)/n)+1)},easeInOutElastic:function(e){var t=1.70158,n=0,a=1;return 0===e?0:2==(e/=.5)?1:(n||(n=.45),a<1?(a=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/a),e<1?a*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n)*-.5:a*Math.pow(2,-10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n)*.5+1)},easeInBack:function(e){var t=1.70158;return e*e*((t+1)*e-t)},easeOutBack:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack:function(e){var t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:function(e){return 1-K.easeOutBounce(1-e)},easeOutBounce:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},easeInOutBounce:function(e){return e<.5?.5*K.easeInBounce(2*e):.5*K.easeOutBounce(2*e-1)+.5}},Z={effects:K};$.easingEffects=K;var X=Math.PI,Q=X/180,ee=2*X,te=X/2,ne=X/4,ae=2*X/3,re={clear:function(e){e.ctx.clearRect(0,0,e.width,e.height)},roundedRect:function(e,t,n,a,r,i){if(i){var s=Math.min(i,r/2,a/2),o=t+s,d=n+s,u=t+a-s,l=n+r-s;e.moveTo(t,d),o<u&&d<l?(e.arc(o,d,s,-X,-te),e.arc(u,d,s,-te,0),e.arc(u,l,s,0,te),e.arc(o,l,s,te,X)):o<u?(e.moveTo(o,n),e.arc(u,d,s,-te,te),e.arc(o,d,s,te,X+te)):d<l?(e.arc(o,d,s,-X,0),e.arc(o,l,s,0,X)):e.arc(o,d,s,-X,X),e.closePath(),e.moveTo(t,n)}else e.rect(t,n,a,r)},drawPoint:function(e,t,n,a,r,i){var s,o,d,u,l,_=(i||0)*Q;if(!t||"object"!=typeof t||"[object HTMLImageElement]"!==(s=t.toString())&&"[object HTMLCanvasElement]"!==s){if(!(isNaN(n)||n<=0)){switch(e.beginPath(),t){default:e.arc(a,r,n,0,ee),e.closePath();break;case"triangle":e.moveTo(a+Math.sin(_)*n,r-Math.cos(_)*n),_+=ae,e.lineTo(a+Math.sin(_)*n,r-Math.cos(_)*n),_+=ae,e.lineTo(a+Math.sin(_)*n,r-Math.cos(_)*n),e.closePath();break;case"rectRounded":u=n-(l=.516*n),o=Math.cos(_+ne)*u,d=Math.sin(_+ne)*u,e.arc(a-o,r-d,l,_-X,_-te),e.arc(a+d,r-o,l,_-te,_),e.arc(a+o,r+d,l,_,_+te),e.arc(a-d,r+o,l,_+te,_+X),e.closePath();break;case"rect":if(!i){u=Math.SQRT1_2*n,e.rect(a-u,r-u,2*u,2*u);break}_+=ne;case"rectRot":o=Math.cos(_)*n,d=Math.sin(_)*n,e.moveTo(a-o,r-d),e.lineTo(a+d,r-o),e.lineTo(a+o,r+d),e.lineTo(a-d,r+o),e.closePath();break;case"crossRot":_+=ne;case"cross":o=Math.cos(_)*n,d=Math.sin(_)*n,e.moveTo(a-o,r-d),e.lineTo(a+o,r+d),e.moveTo(a+d,r-o),e.lineTo(a-d,r+o);break;case"star":o=Math.cos(_)*n,d=Math.sin(_)*n,e.moveTo(a-o,r-d),e.lineTo(a+o,r+d),e.moveTo(a+d,r-o),e.lineTo(a-d,r+o),_+=ne,o=Math.cos(_)*n,d=Math.sin(_)*n,e.moveTo(a-o,r-d),e.lineTo(a+o,r+d),e.moveTo(a+d,r-o),e.lineTo(a-d,r+o);break;case"line":o=Math.cos(_)*n,d=Math.sin(_)*n,e.moveTo(a-o,r-d),e.lineTo(a+o,r+d);break;case"dash":e.moveTo(a,r),e.lineTo(a+Math.cos(_)*n,r+Math.sin(_)*n)}e.fill(),e.stroke()}}else e.drawImage(t,a-t.width/2,r-t.height/2,t.width,t.height)},_isPointInArea:function(e,t){return e.x>t.left-1e-6&&e.x<t.right+1e-6&&e.y>t.top-1e-6&&e.y<t.bottom+1e-6},clipArea:function(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()},unclipArea:function(e){e.restore()},lineTo:function(e,t,n,a){var r=n.steppedLine;if(r){if("middle"===r){var i=(t.x+n.x)/2;e.lineTo(i,a?n.y:t.y),e.lineTo(i,a?t.y:n.y)}else"after"===r&&!a||"after"!==r&&a?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y);e.lineTo(n.x,n.y)}else n.tension?e.bezierCurveTo(a?t.controlPointPreviousX:t.controlPointNextX,a?t.controlPointPreviousY:t.controlPointNextY,a?n.controlPointNextX:n.controlPointPreviousX,a?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):e.lineTo(n.x,n.y)}},ie=re;$.clear=re.clear,$.drawRoundedRectangle=function(e){e.beginPath(),re.roundedRect.apply(re,arguments)};var se={_set:function(e,t){return $.merge(this[e]||(this[e]={}),t)}};se._set("global",{defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",defaultLineHeight:1.2,showLines:!0});var oe=se,de=$.valueOrDefault,ue={toLineHeight:function(e,t){var n=(""+e).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e},toPadding:function(e){var t,n,a,r;return $.isObject(e)?(t=+e.top||0,n=+e.right||0,a=+e.bottom||0,r=+e.left||0):t=n=a=r=+e||0,{top:t,right:n,bottom:a,left:r,height:t+a,width:r+n}},_parseFont:function(e){var t=oe.global,n=de(e.fontSize,t.defaultFontSize),a={family:de(e.fontFamily,t.defaultFontFamily),lineHeight:$.options.toLineHeight(de(e.lineHeight,t.defaultLineHeight),n),size:n,style:de(e.fontStyle,t.defaultFontStyle),weight:null,string:""};return a.string=function(e){return!e||$.isNullOrUndef(e.size)||$.isNullOrUndef(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}(a),a},resolve:function(e,t,n){var a,r,i;for(a=0,r=e.length;a<r;++a)if(void 0!==(i=e[a])&&(void 0!==t&&"function"==typeof i&&(i=i(t)),void 0!==n&&$.isArray(i)&&(i=i[n]),void 0!==i))return i}},le=$,_e=Z,ce=ie,he=ue;le.easing=_e,le.canvas=ce,le.options=he;var me=function(e){le.extend(this,e),this.initialize.apply(this,arguments)};le.extend(me.prototype,{initialize:function(){this.hidden=!1},pivot:function(){var e=this;return e._view||(e._view=le.clone(e._model)),e._start={},e},transition:function(e){var t=this,n=t._model,a=t._start,r=t._view;return n&&1!==e?(r||(r=t._view={}),a||(a=t._start={}),function(e,t,n,a){var r,i,s,o,d,u,l,_,c,h=Object.keys(n);for(r=0,i=h.length;r<i;++r)if(u=n[s=h[r]],t.hasOwnProperty(s)||(t[s]=u),(o=t[s])!==u&&"_"!==s[0]){if(e.hasOwnProperty(s)||(e[s]=o),(l=typeof u)==typeof(d=e[s]))if("string"===l){if((_=G(d)).valid&&(c=G(u)).valid){t[s]=c.mix(_,a).rgbString();continue}}else if(le.isFinite(d)&&le.isFinite(u)){t[s]=d+(u-d)*a;continue}t[s]=u}}(a,r,n,e),t):(t._view=n,t._start=null,t)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return le.isNumber(this._model.x)&&le.isNumber(this._model.y)}}),me.extend=le.inherits;var fe=me,pe=fe.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),Me=pe;Object.defineProperty(pe.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(pe.prototype,"chartInstance",{get:function(){return this.chart},set:function(e){this.chart=e}}),oe._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:le.noop,onComplete:le.noop}});var ye={animations:[],request:null,addAnimation:function(e,t,n,a){var r,i,s=this.animations;for(t.chart=e,t.startTime=Date.now(),t.duration=n,a||(e.animating=!0),r=0,i=s.length;r<i;++r)if(s[r].chart===e)return void(s[r]=t);s.push(t),1===s.length&&this.requestAnimationFrame()},cancelAnimation:function(e){var t=le.findIndex(this.animations,function(t){return t.chart===e});-1!==t&&(this.animations.splice(t,1),e.animating=!1)},requestAnimationFrame:function(){var e=this;null===e.request&&(e.request=le.requestAnimFrame.call(window,function(){e.request=null,e.startDigest()}))},startDigest:function(){this.advance(),this.animations.length>0&&this.requestAnimationFrame()},advance:function(){for(var e,t,n,a,r=this.animations,i=0;i<r.length;)t=(e=r[i]).chart,n=e.numSteps,a=Math.floor((Date.now()-e.startTime)/e.duration*n)+1,e.currentStep=Math.min(a,n),le.callback(e.render,[t,e],t),le.callback(e.onAnimationProgress,[e],t),e.currentStep>=n?(le.callback(e.onAnimationComplete,[e],t),t.animating=!1,r.splice(i,1)):++i}},ge=le.options.resolve,ve=["push","pop","shift","splice","unshift"];function Le(e,t){var n=e._chartjs;if(n){var a=n.listeners,r=a.indexOf(t);-1!==r&&a.splice(r,1),a.length>0||(ve.forEach(function(t){delete e[t]}),delete e._chartjs)}}var Ye=function(e,t){this.initialize(e,t)};le.extend(Ye.prototype,{datasetElementType:null,dataElementType:null,initialize:function(e,t){this.chart=e,this.index=t,this.linkScales(),this.addElements()},updateIndex:function(e){this.index=e},linkScales:function(){var e=this,t=e.getMeta(),n=e.getDataset();null!==t.xAxisID&&t.xAxisID in e.chart.scales||(t.xAxisID=n.xAxisID||e.chart.options.scales.xAxes[0].id),null!==t.yAxisID&&t.yAxisID in e.chart.scales||(t.yAxisID=n.yAxisID||e.chart.options.scales.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(e){return this.chart.scales[e]},_getValueScaleId:function(){return this.getMeta().yAxisID},_getIndexScaleId:function(){return this.getMeta().xAxisID},_getValueScale:function(){return this.getScaleForId(this._getValueScaleId())},_getIndexScale:function(){return this.getScaleForId(this._getIndexScaleId())},reset:function(){this.update(!0)},destroy:function(){this._data&&Le(this._data,this)},createMetaDataset:function(){var e=this.datasetElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(e){var t=this.dataElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index,_index:e})},addElements:function(){var e,t,n=this.getMeta(),a=this.getDataset().data||[],r=n.data;for(e=0,t=a.length;e<t;++e)r[e]=r[e]||this.createMetaData(e);n.dataset=n.dataset||this.createMetaDataset()},addElementAndReset:function(e){var t=this.createMetaData(e);this.getMeta().data.splice(e,0,t),this.updateElement(t,e,!0)},buildOrUpdateElements:function(){var e,t,n=this,a=n.getDataset(),r=a.data||(a.data=[]);n._data!==r&&(n._data&&Le(n._data,n),r&&Object.isExtensible(r)&&(t=n,(e=r)._chartjs?e._chartjs.listeners.push(t):(Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),ve.forEach(function(t){var n="onData"+t.charAt(0).toUpperCase()+t.slice(1),a=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:function(){var t=Array.prototype.slice.call(arguments),r=a.apply(this,t);return le.each(e._chartjs.listeners,function(e){"function"==typeof e[n]&&e[n].apply(e,t)}),r}})}))),n._data=r),n.resyncElements()},update:le.noop,transition:function(e){for(var t=this.getMeta(),n=t.data||[],a=n.length,r=0;r<a;++r)n[r].transition(e);t.dataset&&t.dataset.transition(e)},draw:function(){var e=this.getMeta(),t=e.data||[],n=t.length,a=0;for(e.dataset&&e.dataset.draw();a<n;++a)t[a].draw()},removeHoverStyle:function(e){le.merge(e._model,e.$previousStyle||{}),delete e.$previousStyle},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e._index,a=e.custom||{},r=e._model,i=le.getHoverColor;e.$previousStyle={backgroundColor:r.backgroundColor,borderColor:r.borderColor,borderWidth:r.borderWidth},r.backgroundColor=ge([a.hoverBackgroundColor,t.hoverBackgroundColor,i(r.backgroundColor)],void 0,n),r.borderColor=ge([a.hoverBorderColor,t.hoverBorderColor,i(r.borderColor)],void 0,n),r.borderWidth=ge([a.hoverBorderWidth,t.hoverBorderWidth,r.borderWidth],void 0,n)},resyncElements:function(){var e=this.getMeta(),t=this.getDataset().data,n=e.data.length,a=t.length;a<n?e.data.splice(a,n-a):a>n&&this.insertElements(n,a-n)},insertElements:function(e,t){for(var n=0;n<t;++n)this.addElementAndReset(e+n)},onDataPush:function(){var e=arguments.length;this.insertElements(this.getDataset().data.length-e,e)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(e,t){this.getMeta().data.splice(e,t),this.insertElements(e,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),Ye.extend=le.inherits;var ke=Ye;oe._set("global",{elements:{arc:{backgroundColor:oe.global.defaultColor,borderColor:"#fff",borderWidth:2,borderAlign:"center"}}});var be=fe.extend({inLabelRange:function(e){var t=this._view;return!!t&&Math.pow(e-t.x,2)<Math.pow(t.radius+t.hoverRadius,2)},inRange:function(e,t){var n=this._view;if(n){for(var a=le.getAngleFromPoint(n,{x:e,y:t}),r=a.angle,i=a.distance,s=n.startAngle,o=n.endAngle;o<s;)o+=2*Math.PI;for(;r>o;)r-=2*Math.PI;for(;r<s;)r+=2*Math.PI;var d=r>=s&&r<=o,u=i>=n.innerRadius&&i<=n.outerRadius;return d&&u}return!1},getCenterPoint:function(){var e=this._view,t=(e.startAngle+e.endAngle)/2,n=(e.innerRadius+e.outerRadius)/2;return{x:e.x+Math.cos(t)*n,y:e.y+Math.sin(t)*n}},getArea:function(){var e=this._view;return Math.PI*((e.endAngle-e.startAngle)/(2*Math.PI))*(Math.pow(e.outerRadius,2)-Math.pow(e.innerRadius,2))},tooltipPosition:function(){var e=this._view,t=e.startAngle+(e.endAngle-e.startAngle)/2,n=(e.outerRadius-e.innerRadius)/2+e.innerRadius;return{x:e.x+Math.cos(t)*n,y:e.y+Math.sin(t)*n}},draw:function(){var e,t=this._chart.ctx,n=this._view,a=n.startAngle,r=n.endAngle,i="inner"===n.borderAlign?.33:0;t.save(),t.beginPath(),t.arc(n.x,n.y,Math.max(n.outerRadius-i,0),a,r),t.arc(n.x,n.y,n.innerRadius,r,a,!0),t.closePath(),t.fillStyle=n.backgroundColor,t.fill(),n.borderWidth&&("inner"===n.borderAlign?(t.beginPath(),e=i/n.outerRadius,t.arc(n.x,n.y,n.outerRadius,a-e,r+e),n.innerRadius>i?(e=i/n.innerRadius,t.arc(n.x,n.y,n.innerRadius-i,r+e,a-e,!0)):t.arc(n.x,n.y,i,r+Math.PI/2,a-Math.PI/2),t.closePath(),t.clip(),t.beginPath(),t.arc(n.x,n.y,n.outerRadius,a,r),t.arc(n.x,n.y,n.innerRadius,r,a,!0),t.closePath(),t.lineWidth=2*n.borderWidth,t.lineJoin="round"):(t.lineWidth=n.borderWidth,t.lineJoin="bevel"),t.strokeStyle=n.borderColor,t.stroke()),t.restore()}}),De=le.valueOrDefault,we=oe.global.defaultColor;oe._set("global",{elements:{line:{tension:.4,backgroundColor:we,borderWidth:3,borderColor:we,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var Te=fe.extend({draw:function(){var e,t,n,a,r=this._view,i=this._chart.ctx,s=r.spanGaps,o=this._children.slice(),d=oe.global,u=d.elements.line,l=-1;for(this._loop&&o.length&&o.push(o[0]),i.save(),i.lineCap=r.borderCapStyle||u.borderCapStyle,i.setLineDash&&i.setLineDash(r.borderDash||u.borderDash),i.lineDashOffset=De(r.borderDashOffset,u.borderDashOffset),i.lineJoin=r.borderJoinStyle||u.borderJoinStyle,i.lineWidth=De(r.borderWidth,u.borderWidth),i.strokeStyle=r.borderColor||d.defaultColor,i.beginPath(),l=-1,e=0;e<o.length;++e)t=o[e],n=le.previousItem(o,e),a=t._view,0===e?a.skip||(i.moveTo(a.x,a.y),l=e):(n=-1===l?n:o[l],a.skip||(l!==e-1&&!s||-1===l?i.moveTo(a.x,a.y):le.canvas.lineTo(i,n._view,t._view),l=e));i.stroke(),i.restore()}}),xe=le.valueOrDefault,Se=oe.global.defaultColor;function He(e){var t=this._view;return!!t&&Math.abs(e-t.x)<t.radius+t.hitRadius}oe._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:Se,borderColor:Se,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var je=fe.extend({inRange:function(e,t){var n=this._view;return!!n&&Math.pow(e-n.x,2)+Math.pow(t-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:He,inXRange:He,inYRange:function(e){var t=this._view;return!!t&&Math.abs(e-t.y)<t.radius+t.hitRadius},getCenterPoint:function(){var e=this._view;return{x:e.x,y:e.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y,padding:e.radius+e.borderWidth}},draw:function(e){var t=this._view,n=this._chart.ctx,a=t.pointStyle,r=t.rotation,i=t.radius,s=t.x,o=t.y,d=oe.global,u=d.defaultColor;t.skip||(void 0===e||le.canvas._isPointInArea(t,e))&&(n.strokeStyle=t.borderColor||u,n.lineWidth=xe(t.borderWidth,d.elements.point.borderWidth),n.fillStyle=t.backgroundColor||u,le.canvas.drawPoint(n,a,i,s,o,r))}}),Pe=oe.global.defaultColor;function Oe(e){return e&&void 0!==e.width}function Ae(e){var t,n,a,r,i;return Oe(e)?(i=e.width/2,t=e.x-i,n=e.x+i,a=Math.min(e.y,e.base),r=Math.max(e.y,e.base)):(i=e.height/2,t=Math.min(e.x,e.base),n=Math.max(e.x,e.base),a=e.y-i,r=e.y+i),{left:t,top:a,right:n,bottom:r}}function We(e,t,n){return e===t?n:e===n?t:e}function Fe(e,t,n){var a,r,i,s,o=e.borderWidth,d=function(e){var t=e.borderSkipped,n={};return t?(e.horizontal?e.base>e.x&&(t=We(t,"left","right")):e.base<e.y&&(t=We(t,"bottom","top")),n[t]=!0,n):n}(e);return le.isObject(o)?(a=+o.top||0,r=+o.right||0,i=+o.bottom||0,s=+o.left||0):a=r=i=s=+o||0,{t:d.top||a<0?0:a>n?n:a,r:d.right||r<0?0:r>t?t:r,b:d.bottom||i<0?0:i>n?n:i,l:d.left||s<0?0:s>t?t:s}}function Ce(e,t,n){var a=null===t,r=null===n,i=!(!e||a&&r)&&Ae(e);return i&&(a||t>=i.left&&t<=i.right)&&(r||n>=i.top&&n<=i.bottom)}oe._set("global",{elements:{rectangle:{backgroundColor:Pe,borderColor:Pe,borderSkipped:"bottom",borderWidth:0}}});var Ie=fe.extend({draw:function(){var e=this._chart.ctx,t=this._view,n=function(e){var t=Ae(e),n=t.right-t.left,a=t.bottom-t.top,r=Fe(e,n/2,a/2);return{outer:{x:t.left,y:t.top,w:n,h:a},inner:{x:t.left+r.l,y:t.top+r.t,w:n-r.l-r.r,h:a-r.t-r.b}}}(t),a=n.outer,r=n.inner;e.fillStyle=t.backgroundColor,e.fillRect(a.x,a.y,a.w,a.h),a.w===r.w&&a.h===r.h||(e.save(),e.beginPath(),e.rect(a.x,a.y,a.w,a.h),e.clip(),e.fillStyle=t.borderColor,e.rect(r.x,r.y,r.w,r.h),e.fill("evenodd"),e.restore())},height:function(){var e=this._view;return e.base-e.y},inRange:function(e,t){return Ce(this._view,e,t)},inLabelRange:function(e,t){var n=this._view;return Oe(n)?Ce(n,e,null):Ce(n,null,t)},inXRange:function(e){return Ce(this._view,e,null)},inYRange:function(e){return Ce(this._view,null,e)},getCenterPoint:function(){var e,t,n=this._view;return Oe(n)?(e=n.x,t=(n.y+n.base)/2):(e=(n.x+n.base)/2,t=n.y),{x:e,y:t}},getArea:function(){var e=this._view;return Oe(e)?e.width*Math.abs(e.y-e.base):e.height*Math.abs(e.x-e.base)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y}}}),Ee={},ze=be,Re=Te,Ne=je,Be=Ie;Ee.Arc=ze,Ee.Line=Re,Ee.Point=Ne,Ee.Rectangle=Be;var Ve=le.options.resolve;oe._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}});var Je=ke.extend({dataElementType:Ee.Rectangle,initialize:function(){var e,t=this;ke.prototype.initialize.apply(t,arguments),(e=t.getMeta()).stack=t.getDataset().stack,e.bar=!0},update:function(e){var t,n,a=this.getMeta().data;for(this._ruler=this.getRuler(),t=0,n=a.length;t<n;++t)this.updateElement(a[t],t,e)},updateElement:function(e,t,n){var a=this,r=a.getMeta(),i=a.getDataset(),s=a._resolveElementOptions(e,t);e._xScale=a.getScaleForId(r.xAxisID),e._yScale=a.getScaleForId(r.yAxisID),e._datasetIndex=a.index,e._index=t,e._model={backgroundColor:s.backgroundColor,borderColor:s.borderColor,borderSkipped:s.borderSkipped,borderWidth:s.borderWidth,datasetLabel:i.label,label:a.chart.data.labels[t]},a._updateElementGeometry(e,t,n),e.pivot()},_updateElementGeometry:function(e,t,n){var a=this,r=e._model,i=a._getValueScale(),s=i.getBasePixel(),o=i.isHorizontal(),d=a._ruler||a.getRuler(),u=a.calculateBarValuePixels(a.index,t),l=a.calculateBarIndexPixels(a.index,t,d);r.horizontal=o,r.base=n?s:u.base,r.x=o?n?s:u.head:l.center,r.y=o?l.center:n?s:u.head,r.height=o?l.size:void 0,r.width=o?void 0:l.size},_getStacks:function(e){var t,n,a=this.chart,r=this._getIndexScale().options.stacked,i=void 0===e?a.data.datasets.length:e+1,s=[];for(t=0;t<i;++t)(n=a.getDatasetMeta(t)).bar&&a.isDatasetVisible(t)&&(!1===r||!0===r&&-1===s.indexOf(n.stack)||void 0===r&&(void 0===n.stack||-1===s.indexOf(n.stack)))&&s.push(n.stack);return s},getStackCount:function(){return this._getStacks().length},getStackIndex:function(e,t){var n=this._getStacks(e),a=void 0!==t?n.indexOf(t):-1;return-1===a?n.length-1:a},getRuler:function(){var e,t,n=this._getIndexScale(),a=this.getStackCount(),r=this.index,i=n.isHorizontal(),s=i?n.left:n.top,o=s+(i?n.width:n.height),d=[];for(e=0,t=this.getMeta().data.length;e<t;++e)d.push(n.getPixelForValue(null,e,r));return{min:le.isNullOrUndef(n.options.barThickness)?function(e,t){var n,a,r,i,s=e.isHorizontal()?e.width:e.height,o=e.getTicks();for(r=1,i=t.length;r<i;++r)s=Math.min(s,Math.abs(t[r]-t[r-1]));for(r=0,i=o.length;r<i;++r)a=e.getPixelForTick(r),s=r>0?Math.min(s,a-n):s,n=a;return s}(n,d):-1,pixels:d,start:s,end:o,stackCount:a,scale:n}},calculateBarValuePixels:function(e,t){var n,a,r,i,s,o,d=this.chart,u=this.getMeta(),l=this._getValueScale(),_=l.isHorizontal(),c=d.data.datasets,h=+l.getRightValue(c[e].data[t]),m=l.options.minBarLength,f=l.options.stacked,p=u.stack,M=0;if(f||void 0===f&&void 0!==p)for(n=0;n<e;++n)(a=d.getDatasetMeta(n)).bar&&a.stack===p&&a.controller._getValueScaleId()===l.id&&d.isDatasetVisible(n)&&(r=+l.getRightValue(c[n].data[t]),(h<0&&r<0||h>=0&&r>0)&&(M+=r));return i=l.getPixelForValue(M),o=(s=l.getPixelForValue(M+h))-i,void 0!==m&&Math.abs(o)<m&&(o=m,s=h>=0&&!_||h<0&&_?i-m:i+m),{size:o,base:i,head:s,center:s+o/2}},calculateBarIndexPixels:function(e,t,n){var a=n.scale.options,r="flex"===a.barThickness?function(e,t,n){var a,r=t.pixels,i=r[e],s=e>0?r[e-1]:null,o=e<r.length-1?r[e+1]:null,d=n.categoryPercentage;return null===s&&(s=i-(null===o?t.end-t.start:o-i)),null===o&&(o=i+i-s),a=i-(i-Math.min(s,o))/2*d,{chunk:Math.abs(o-s)/2*d/t.stackCount,ratio:n.barPercentage,start:a}}(t,n,a):function(e,t,n){var a,r,i=n.barThickness,s=t.stackCount,o=t.pixels[e];return le.isNullOrUndef(i)?(a=t.min*n.categoryPercentage,r=n.barPercentage):(a=i*s,r=1),{chunk:a/s,ratio:r,start:o-a/2}}(t,n,a),i=this.getStackIndex(e,this.getMeta().stack),s=r.start+r.chunk*i+r.chunk/2,o=Math.min(le.valueOrDefault(a.maxBarThickness,1/0),r.chunk*r.ratio);return{base:s-o/2,head:s+o/2,center:s,size:o}},draw:function(){var e=this.chart,t=this._getValueScale(),n=this.getMeta().data,a=this.getDataset(),r=n.length,i=0;for(le.canvas.clipArea(e.ctx,e.chartArea);i<r;++i)isNaN(t.getRightValue(a.data[i]))||n[i].draw();le.canvas.unclipArea(e.ctx)},_resolveElementOptions:function(e,t){var n,a,r,i=this.chart,s=i.data.datasets[this.index],o=e.custom||{},d=i.options.elements.rectangle,u={},l={chart:i,dataIndex:t,dataset:s,datasetIndex:this.index},_=["backgroundColor","borderColor","borderSkipped","borderWidth"];for(n=0,a=_.length;n<a;++n)u[r=_[n]]=Ve([o[r],s[r],d[r]],l,t);return u}}),Ue=le.valueOrDefault,Ge=le.options.resolve;oe._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(e,t){var n=t.datasets[e.datasetIndex].label||"",a=t.datasets[e.datasetIndex].data[e.index];return n+": ("+e.xLabel+", "+e.yLabel+", "+a.r+")"}}}});var qe=ke.extend({dataElementType:Ee.Point,update:function(e){var t=this,n=t.getMeta().data;le.each(n,function(n,a){t.updateElement(n,a,e)})},updateElement:function(e,t,n){var a=this,r=a.getMeta(),i=e.custom||{},s=a.getScaleForId(r.xAxisID),o=a.getScaleForId(r.yAxisID),d=a._resolveElementOptions(e,t),u=a.getDataset().data[t],l=a.index,_=n?s.getPixelForDecimal(.5):s.getPixelForValue("object"==typeof u?u:NaN,t,l),c=n?o.getBasePixel():o.getPixelForValue(u,t,l);e._xScale=s,e._yScale=o,e._options=d,e._datasetIndex=l,e._index=t,e._model={backgroundColor:d.backgroundColor,borderColor:d.borderColor,borderWidth:d.borderWidth,hitRadius:d.hitRadius,pointStyle:d.pointStyle,rotation:d.rotation,radius:n?0:d.radius,skip:i.skip||isNaN(_)||isNaN(c),x:_,y:c},e.pivot()},setHoverStyle:function(e){var t=e._model,n=e._options,a=le.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=Ue(n.hoverBackgroundColor,a(n.backgroundColor)),t.borderColor=Ue(n.hoverBorderColor,a(n.borderColor)),t.borderWidth=Ue(n.hoverBorderWidth,n.borderWidth),t.radius=n.radius+n.hoverRadius},_resolveElementOptions:function(e,t){var n,a,r,i=this.chart,s=i.data.datasets[this.index],o=e.custom||{},d=i.options.elements.point,u=s.data[t],l={},_={chart:i,dataIndex:t,dataset:s,datasetIndex:this.index},c=["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"];for(n=0,a=c.length;n<a;++n)l[r=c[n]]=Ge([o[r],s[r],d[r]],_,t);return l.radius=Ge([o.radius,u?u.r:void 0,s.radius,d.radius],_,t),l}}),$e=le.options.resolve,Ke=le.valueOrDefault;oe._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');var n=e.data,a=n.datasets,r=n.labels;if(a.length)for(var i=0;i<a[0].data.length;++i)t.push('<li><span style="background-color:'+a[0].backgroundColor[i]+'"></span>'),r[i]&&t.push(r[i]),t.push("</li>");return t.push("</ul>"),t.join("")},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(function(n,a){var r=e.getDatasetMeta(0),i=t.datasets[0],s=r.data[a],o=s&&s.custom||{},d=e.options.elements.arc;return{text:n,fillStyle:$e([o.backgroundColor,i.backgroundColor,d.backgroundColor],void 0,a),strokeStyle:$e([o.borderColor,i.borderColor,d.borderColor],void 0,a),lineWidth:$e([o.borderWidth,i.borderWidth,d.borderWidth],void 0,a),hidden:isNaN(i.data[a])||r.data[a].hidden,index:a}}):[]}},onClick:function(e,t){var n,a,r,i=t.index,s=this.chart;for(n=0,a=(s.data.datasets||[]).length;n<a;++n)(r=s.getDatasetMeta(n)).data[i]&&(r.data[i].hidden=!r.data[i].hidden);s.update()}},cutoutPercentage:50,rotation:-.5*Math.PI,circumference:2*Math.PI,tooltips:{callbacks:{title:function(){return""},label:function(e,t){var n=t.labels[e.index],a=": "+t.datasets[e.datasetIndex].data[e.index];return le.isArray(n)?(n=n.slice())[0]+=a:n+=a,n}}}});var Ze=ke.extend({dataElementType:Ee.Arc,linkScales:le.noop,getRingIndex:function(e){for(var t=0,n=0;n<e;++n)this.chart.isDatasetVisible(n)&&++t;return t},update:function(e){var t,n,a=this,r=a.chart,i=r.chartArea,s=r.options,o=i.right-i.left,d=i.bottom-i.top,u=Math.min(o,d),l={x:0,y:0},_=a.getMeta(),c=_.data,h=s.cutoutPercentage,m=s.circumference,f=a._getRingWeight(a.index);if(m<2*Math.PI){var p=s.rotation%(2*Math.PI),M=(p+=2*Math.PI*(p>=Math.PI?-1:p<-Math.PI?1:0))+m,y={x:Math.cos(p),y:Math.sin(p)},g={x:Math.cos(M),y:Math.sin(M)},v=p<=0&&M>=0||p<=2*Math.PI&&2*Math.PI<=M,L=p<=.5*Math.PI&&.5*Math.PI<=M||p<=2.5*Math.PI&&2.5*Math.PI<=M,Y=p<=-Math.PI&&-Math.PI<=M||p<=Math.PI&&Math.PI<=M,k=p<=.5*-Math.PI&&.5*-Math.PI<=M||p<=1.5*Math.PI&&1.5*Math.PI<=M,b=h/100,D={x:Y?-1:Math.min(y.x*(y.x<0?1:b),g.x*(g.x<0?1:b)),y:k?-1:Math.min(y.y*(y.y<0?1:b),g.y*(g.y<0?1:b))},w={x:v?1:Math.max(y.x*(y.x>0?1:b),g.x*(g.x>0?1:b)),y:L?1:Math.max(y.y*(y.y>0?1:b),g.y*(g.y>0?1:b))},T={width:.5*(w.x-D.x),height:.5*(w.y-D.y)};u=Math.min(o/T.width,d/T.height),l={x:-.5*(w.x+D.x),y:-.5*(w.y+D.y)}}for(t=0,n=c.length;t<n;++t)c[t]._options=a._resolveElementOptions(c[t],t);for(r.borderWidth=a.getMaxBorderWidth(),r.outerRadius=Math.max((u-r.borderWidth)/2,0),r.innerRadius=Math.max(h?r.outerRadius/100*h:0,0),r.radiusLength=(r.outerRadius-r.innerRadius)/(a._getVisibleDatasetWeightTotal()||1),r.offsetX=l.x*r.outerRadius,r.offsetY=l.y*r.outerRadius,_.total=a.calculateTotal(),a.outerRadius=r.outerRadius-r.radiusLength*a._getRingWeightOffset(a.index),a.innerRadius=Math.max(a.outerRadius-r.radiusLength*f,0),t=0,n=c.length;t<n;++t)a.updateElement(c[t],t,e)},updateElement:function(e,t,n){var a=this,r=a.chart,i=r.chartArea,s=r.options,o=s.animation,d=(i.left+i.right)/2,u=(i.top+i.bottom)/2,l=s.rotation,_=s.rotation,c=a.getDataset(),h=n&&o.animateRotate?0:e.hidden?0:a.calculateCircumference(c.data[t])*(s.circumference/(2*Math.PI)),m=n&&o.animateScale?0:a.innerRadius,f=n&&o.animateScale?0:a.outerRadius,p=e._options||{};le.extend(e,{_datasetIndex:a.index,_index:t,_model:{backgroundColor:p.backgroundColor,borderColor:p.borderColor,borderWidth:p.borderWidth,borderAlign:p.borderAlign,x:d+r.offsetX,y:u+r.offsetY,startAngle:l,endAngle:_,circumference:h,outerRadius:f,innerRadius:m,label:le.valueAtIndexOrDefault(c.label,t,r.data.labels[t])}});var M=e._model;n&&o.animateRotate||(M.startAngle=0===t?s.rotation:a.getMeta().data[t-1]._model.endAngle,M.endAngle=M.startAngle+M.circumference),e.pivot()},calculateTotal:function(){var e,t=this.getDataset(),n=this.getMeta(),a=0;return le.each(n.data,function(n,r){e=t.data[r],isNaN(e)||n.hidden||(a+=Math.abs(e))}),a},calculateCircumference:function(e){var t=this.getMeta().total;return t>0&&!isNaN(e)?2*Math.PI*(Math.abs(e)/t):0},getMaxBorderWidth:function(e){var t,n,a,r,i,s,o,d,u=0,l=this.chart;if(!e)for(t=0,n=l.data.datasets.length;t<n;++t)if(l.isDatasetVisible(t)){e=(a=l.getDatasetMeta(t)).data,t!==this.index&&(i=a.controller);break}if(!e)return 0;for(t=0,n=e.length;t<n;++t)r=e[t],"inner"!==(s=i?i._resolveElementOptions(r,t):r._options).borderAlign&&(o=s.borderWidth,u=(d=s.hoverBorderWidth)>(u=o>u?o:u)?d:u);return u},setHoverStyle:function(e){var t=e._model,n=e._options,a=le.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth},t.backgroundColor=Ke(n.hoverBackgroundColor,a(n.backgroundColor)),t.borderColor=Ke(n.hoverBorderColor,a(n.borderColor)),t.borderWidth=Ke(n.hoverBorderWidth,n.borderWidth)},_resolveElementOptions:function(e,t){var n,a,r,i=this.chart,s=this.getDataset(),o=e.custom||{},d=i.options.elements.arc,u={},l={chart:i,dataIndex:t,dataset:s,datasetIndex:this.index},_=["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"];for(n=0,a=_.length;n<a;++n)u[r=_[n]]=$e([o[r],s[r],d[r]],l,t);return u},_getRingWeightOffset:function(e){for(var t=0,n=0;n<e;++n)this.chart.isDatasetVisible(n)&&(t+=this._getRingWeight(n));return t},_getRingWeight:function(e){return Math.max(Ke(this.chart.data.datasets[e].weight,1),0)},_getVisibleDatasetWeightTotal:function(){return this._getRingWeightOffset(this.chart.data.datasets.length)}});oe._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{type:"category",position:"left",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{mode:"index",axis:"y"}});var Xe=Je.extend({_getValueScaleId:function(){return this.getMeta().xAxisID},_getIndexScaleId:function(){return this.getMeta().yAxisID}}),Qe=le.valueOrDefault,et=le.options.resolve,tt=le.canvas._isPointInArea;function nt(e,t){return Qe(e.showLine,t.showLines)}oe._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});var at=ke.extend({datasetElementType:Ee.Line,dataElementType:Ee.Point,update:function(e){var t,n,a=this,r=a.getMeta(),i=r.dataset,s=r.data||[],o=a.getScaleForId(r.yAxisID),d=a.getDataset(),u=nt(d,a.chart.options);for(u&&(void 0!==d.tension&&void 0===d.lineTension&&(d.lineTension=d.tension),i._scale=o,i._datasetIndex=a.index,i._children=s,i._model=a._resolveLineOptions(i),i.pivot()),t=0,n=s.length;t<n;++t)a.updateElement(s[t],t,e);for(u&&0!==i._model.tension&&a.updateBezierControlPoints(),t=0,n=s.length;t<n;++t)s[t].pivot()},updateElement:function(e,t,n){var a,r,i=this,s=i.getMeta(),o=e.custom||{},d=i.getDataset(),u=i.index,l=d.data[t],_=i.getScaleForId(s.yAxisID),c=i.getScaleForId(s.xAxisID),h=s.dataset._model,m=i._resolvePointOptions(e,t);a=c.getPixelForValue("object"==typeof l?l:NaN,t,u),r=n?_.getBasePixel():i.calculatePointY(l,t,u),e._xScale=c,e._yScale=_,e._options=m,e._datasetIndex=u,e._index=t,e._model={x:a,y:r,skip:o.skip||isNaN(a)||isNaN(r),radius:m.radius,pointStyle:m.pointStyle,rotation:m.rotation,backgroundColor:m.backgroundColor,borderColor:m.borderColor,borderWidth:m.borderWidth,tension:Qe(o.tension,h?h.tension:0),steppedLine:!!h&&h.steppedLine,hitRadius:m.hitRadius}},_resolvePointOptions:function(e,t){var n,a,r,i=this.chart,s=i.data.datasets[this.index],o=e.custom||{},d=i.options.elements.point,u={},l={chart:i,dataIndex:t,dataset:s,datasetIndex:this.index},_={backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},c=Object.keys(_);for(n=0,a=c.length;n<a;++n)u[r=c[n]]=et([o[r],s[_[r]],s[r],d[r]],l,t);return u},_resolveLineOptions:function(e){var t,n,a,r=this.chart,i=r.data.datasets[this.index],s=e.custom||{},o=r.options,d=o.elements.line,u={},l=["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill","cubicInterpolationMode"];for(t=0,n=l.length;t<n;++t)u[a=l[t]]=et([s[a],i[a],d[a]]);return u.spanGaps=Qe(i.spanGaps,o.spanGaps),u.tension=Qe(i.lineTension,d.tension),u.steppedLine=et([s.steppedLine,i.steppedLine,d.stepped]),u},calculatePointY:function(e,t,n){var a,r,i,s=this.chart,o=this.getMeta(),d=this.getScaleForId(o.yAxisID),u=0,l=0;if(d.options.stacked){for(a=0;a<n;a++)if(r=s.data.datasets[a],"line"===(i=s.getDatasetMeta(a)).type&&i.yAxisID===d.id&&s.isDatasetVisible(a)){var _=Number(d.getRightValue(r.data[t]));_<0?l+=_||0:u+=_||0}var c=Number(d.getRightValue(e));return c<0?d.getPixelForValue(l+c):d.getPixelForValue(u+c)}return d.getPixelForValue(e)},updateBezierControlPoints:function(){var e,t,n,a,r=this.chart,i=this.getMeta(),s=i.dataset._model,o=r.chartArea,d=i.data||[];function u(e,t,n){return Math.max(Math.min(e,n),t)}if(s.spanGaps&&(d=d.filter(function(e){return!e._model.skip})),"monotone"===s.cubicInterpolationMode)le.splineCurveMonotone(d);else for(e=0,t=d.length;e<t;++e)n=d[e]._model,a=le.splineCurve(le.previousItem(d,e)._model,n,le.nextItem(d,e)._model,s.tension),n.controlPointPreviousX=a.previous.x,n.controlPointPreviousY=a.previous.y,n.controlPointNextX=a.next.x,n.controlPointNextY=a.next.y;if(r.options.elements.line.capBezierPoints)for(e=0,t=d.length;e<t;++e)n=d[e]._model,tt(n,o)&&(e>0&&tt(d[e-1]._model,o)&&(n.controlPointPreviousX=u(n.controlPointPreviousX,o.left,o.right),n.controlPointPreviousY=u(n.controlPointPreviousY,o.top,o.bottom)),e<d.length-1&&tt(d[e+1]._model,o)&&(n.controlPointNextX=u(n.controlPointNextX,o.left,o.right),n.controlPointNextY=u(n.controlPointNextY,o.top,o.bottom)))},draw:function(){var e,t=this.chart,n=this.getMeta(),a=n.data||[],r=t.chartArea,i=a.length,s=0;for(nt(this.getDataset(),t.options)&&(e=(n.dataset._model.borderWidth||0)/2,le.canvas.clipArea(t.ctx,{left:r.left,right:r.right,top:r.top-e,bottom:r.bottom+e}),n.dataset.draw(),le.canvas.unclipArea(t.ctx));s<i;++s)a[s].draw(r)},setHoverStyle:function(e){var t=e._model,n=e._options,a=le.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=Qe(n.hoverBackgroundColor,a(n.backgroundColor)),t.borderColor=Qe(n.hoverBorderColor,a(n.borderColor)),t.borderWidth=Qe(n.hoverBorderWidth,n.borderWidth),t.radius=Qe(n.hoverRadius,n.radius)}}),rt=le.options.resolve;oe._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');var n=e.data,a=n.datasets,r=n.labels;if(a.length)for(var i=0;i<a[0].data.length;++i)t.push('<li><span style="background-color:'+a[0].backgroundColor[i]+'"></span>'),r[i]&&t.push(r[i]),t.push("</li>");return t.push("</ul>"),t.join("")},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(function(n,a){var r=e.getDatasetMeta(0),i=t.datasets[0],s=r.data[a].custom||{},o=e.options.elements.arc;return{text:n,fillStyle:rt([s.backgroundColor,i.backgroundColor,o.backgroundColor],void 0,a),strokeStyle:rt([s.borderColor,i.borderColor,o.borderColor],void 0,a),lineWidth:rt([s.borderWidth,i.borderWidth,o.borderWidth],void 0,a),hidden:isNaN(i.data[a])||r.data[a].hidden,index:a}}):[]}},onClick:function(e,t){var n,a,r,i=t.index,s=this.chart;for(n=0,a=(s.data.datasets||[]).length;n<a;++n)(r=s.getDatasetMeta(n)).data[i].hidden=!r.data[i].hidden;s.update()}},tooltips:{callbacks:{title:function(){return""},label:function(e,t){return t.labels[e.index]+": "+e.yLabel}}}});var it=ke.extend({dataElementType:Ee.Arc,linkScales:le.noop,update:function(e){var t,n,a,r=this,i=r.getDataset(),s=r.getMeta(),o=r.chart.options.startAngle||0,d=r._starts=[],u=r._angles=[],l=s.data;for(r._updateRadius(),s.count=r.countVisibleElements(),t=0,n=i.data.length;t<n;t++)d[t]=o,a=r._computeAngle(t),u[t]=a,o+=a;for(t=0,n=l.length;t<n;++t)l[t]._options=r._resolveElementOptions(l[t],t),r.updateElement(l[t],t,e)},_updateRadius:function(){var e=this,t=e.chart,n=t.chartArea,a=t.options,r=Math.min(n.right-n.left,n.bottom-n.top);t.outerRadius=Math.max(r/2,0),t.innerRadius=Math.max(a.cutoutPercentage?t.outerRadius/100*a.cutoutPercentage:1,0),t.radiusLength=(t.outerRadius-t.innerRadius)/t.getVisibleDatasetCount(),e.outerRadius=t.outerRadius-t.radiusLength*e.index,e.innerRadius=e.outerRadius-t.radiusLength},updateElement:function(e,t,n){var a=this,r=a.chart,i=a.getDataset(),s=r.options,o=s.animation,d=r.scale,u=r.data.labels,l=d.xCenter,_=d.yCenter,c=s.startAngle,h=e.hidden?0:d.getDistanceFromCenterForValue(i.data[t]),m=a._starts[t],f=m+(e.hidden?0:a._angles[t]),p=o.animateScale?0:d.getDistanceFromCenterForValue(i.data[t]),M=e._options||{};le.extend(e,{_datasetIndex:a.index,_index:t,_scale:d,_model:{backgroundColor:M.backgroundColor,borderColor:M.borderColor,borderWidth:M.borderWidth,borderAlign:M.borderAlign,x:l,y:_,innerRadius:0,outerRadius:n?p:h,startAngle:n&&o.animateRotate?c:m,endAngle:n&&o.animateRotate?c:f,label:le.valueAtIndexOrDefault(u,t,u[t])}}),e.pivot()},countVisibleElements:function(){var e=this.getDataset(),t=this.getMeta(),n=0;return le.each(t.data,function(t,a){isNaN(e.data[a])||t.hidden||n++}),n},setHoverStyle:function(e){var t=e._model,n=e._options,a=le.getHoverColor,r=le.valueOrDefault;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth},t.backgroundColor=r(n.hoverBackgroundColor,a(n.backgroundColor)),t.borderColor=r(n.hoverBorderColor,a(n.borderColor)),t.borderWidth=r(n.hoverBorderWidth,n.borderWidth)},_resolveElementOptions:function(e,t){var n,a,r,i=this.chart,s=this.getDataset(),o=e.custom||{},d=i.options.elements.arc,u={},l={chart:i,dataIndex:t,dataset:s,datasetIndex:this.index},_=["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"];for(n=0,a=_.length;n<a;++n)u[r=_[n]]=rt([o[r],s[r],d[r]],l,t);return u},_computeAngle:function(e){var t=this,n=this.getMeta().count,a=t.getDataset(),r=t.getMeta();if(isNaN(a.data[e])||r.data[e].hidden)return 0;var i={chart:t.chart,dataIndex:e,dataset:a,datasetIndex:t.index};return rt([t.chart.options.elements.arc.angle,2*Math.PI/n],i,e)}});oe._set("pie",le.clone(oe.doughnut)),oe._set("pie",{cutoutPercentage:0});var st=Ze,ot=le.valueOrDefault,dt=le.options.resolve;oe._set("radar",{scale:{type:"radialLinear"},elements:{line:{tension:0}}});var ut=ke.extend({datasetElementType:Ee.Line,dataElementType:Ee.Point,linkScales:le.noop,update:function(e){var t,n,a=this,r=a.getMeta(),i=r.dataset,s=r.data||[],o=a.chart.scale,d=a.getDataset();for(void 0!==d.tension&&void 0===d.lineTension&&(d.lineTension=d.tension),i._scale=o,i._datasetIndex=a.index,i._children=s,i._loop=!0,i._model=a._resolveLineOptions(i),i.pivot(),t=0,n=s.length;t<n;++t)a.updateElement(s[t],t,e);for(a.updateBezierControlPoints(),t=0,n=s.length;t<n;++t)s[t].pivot()},updateElement:function(e,t,n){var a=this,r=e.custom||{},i=a.getDataset(),s=a.chart.scale,o=s.getPointPositionForValue(t,i.data[t]),d=a._resolvePointOptions(e,t),u=a.getMeta().dataset._model,l=n?s.xCenter:o.x,_=n?s.yCenter:o.y;e._scale=s,e._options=d,e._datasetIndex=a.index,e._index=t,e._model={x:l,y:_,skip:r.skip||isNaN(l)||isNaN(_),radius:d.radius,pointStyle:d.pointStyle,rotation:d.rotation,backgroundColor:d.backgroundColor,borderColor:d.borderColor,borderWidth:d.borderWidth,tension:ot(r.tension,u?u.tension:0),hitRadius:d.hitRadius}},_resolvePointOptions:function(e,t){var n,a,r,i=this.chart,s=i.data.datasets[this.index],o=e.custom||{},d=i.options.elements.point,u={},l={chart:i,dataIndex:t,dataset:s,datasetIndex:this.index},_={backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},c=Object.keys(_);for(n=0,a=c.length;n<a;++n)u[r=c[n]]=dt([o[r],s[_[r]],s[r],d[r]],l,t);return u},_resolveLineOptions:function(e){var t,n,a,r=this.chart,i=r.data.datasets[this.index],s=e.custom||{},o=r.options.elements.line,d={},u=["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill"];for(t=0,n=u.length;t<n;++t)d[a=u[t]]=dt([s[a],i[a],o[a]]);return d.tension=ot(i.lineTension,o.tension),d},updateBezierControlPoints:function(){var e,t,n,a,r=this.getMeta(),i=this.chart.chartArea,s=r.data||[];function o(e,t,n){return Math.max(Math.min(e,n),t)}for(e=0,t=s.length;e<t;++e)n=s[e]._model,a=le.splineCurve(le.previousItem(s,e,!0)._model,n,le.nextItem(s,e,!0)._model,n.tension),n.controlPointPreviousX=o(a.previous.x,i.left,i.right),n.controlPointPreviousY=o(a.previous.y,i.top,i.bottom),n.controlPointNextX=o(a.next.x,i.left,i.right),n.controlPointNextY=o(a.next.y,i.top,i.bottom)},setHoverStyle:function(e){var t=e._model,n=e._options,a=le.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=ot(n.hoverBackgroundColor,a(n.backgroundColor)),t.borderColor=ot(n.hoverBorderColor,a(n.borderColor)),t.borderWidth=ot(n.hoverBorderWidth,n.borderWidth),t.radius=ot(n.hoverRadius,n.radius)}});oe._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},showLines:!1,tooltips:{callbacks:{title:function(){return""},label:function(e){return"("+e.xLabel+", "+e.yLabel+")"}}}});var lt={bar:Je,bubble:qe,doughnut:Ze,horizontalBar:Xe,line:at,polarArea:it,pie:st,radar:ut,scatter:at};function _t(e,t){return e.native?{x:e.x,y:e.y}:le.getRelativePosition(e,t)}function ct(e,t){var n,a,r,i,s;for(a=0,i=e.data.datasets.length;a<i;++a)if(e.isDatasetVisible(a))for(r=0,s=(n=e.getDatasetMeta(a)).data.length;r<s;++r){var o=n.data[r];o._view.skip||t(o)}}function ht(e,t){var n=[];return ct(e,function(e){e.inRange(t.x,t.y)&&n.push(e)}),n}function mt(e,t,n,a){var r=Number.POSITIVE_INFINITY,i=[];return ct(e,function(e){if(!n||e.inRange(t.x,t.y)){var s=e.getCenterPoint(),o=a(t,s);o<r?(i=[e],r=o):o===r&&i.push(e)}}),i}function ft(e){var t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,a){var r=t?Math.abs(e.x-a.x):0,i=n?Math.abs(e.y-a.y):0;return Math.sqrt(Math.pow(r,2)+Math.pow(i,2))}}function pt(e,t,n){var a=_t(t,e);n.axis=n.axis||"x";var r=ft(n.axis),i=n.intersect?ht(e,a):mt(e,a,!1,r),s=[];return i.length?(e.data.datasets.forEach(function(t,n){if(e.isDatasetVisible(n)){var a=e.getDatasetMeta(n).data[i[0]._index];a&&!a._view.skip&&s.push(a)}}),s):[]}var Mt={modes:{single:function(e,t){var n=_t(t,e),a=[];return ct(e,function(e){if(e.inRange(n.x,n.y))return a.push(e),a}),a.slice(0,1)},label:pt,index:pt,dataset:function(e,t,n){var a=_t(t,e);n.axis=n.axis||"xy";var r=ft(n.axis),i=n.intersect?ht(e,a):mt(e,a,!1,r);return i.length>0&&(i=e.getDatasetMeta(i[0]._datasetIndex).data),i},"x-axis":function(e,t){return pt(e,t,{intersect:!1})},point:function(e,t){return ht(e,_t(t,e))},nearest:function(e,t,n){var a=_t(t,e);n.axis=n.axis||"xy";var r=ft(n.axis);return mt(e,a,n.intersect,r)},x:function(e,t,n){var a=_t(t,e),r=[],i=!1;return ct(e,function(e){e.inXRange(a.x)&&r.push(e),e.inRange(a.x,a.y)&&(i=!0)}),n.intersect&&!i&&(r=[]),r},y:function(e,t,n){var a=_t(t,e),r=[],i=!1;return ct(e,function(e){e.inYRange(a.y)&&r.push(e),e.inRange(a.x,a.y)&&(i=!0)}),n.intersect&&!i&&(r=[]),r}}};function yt(e,t){return le.where(e,function(e){return e.position===t})}function gt(e,t){e.forEach(function(e,t){return e._tmpIndex_=t,e}),e.sort(function(e,n){var a=t?n:e,r=t?e:n;return a.weight===r.weight?a._tmpIndex_-r._tmpIndex_:a.weight-r.weight}),e.forEach(function(e){delete e._tmpIndex_})}function vt(e,t){le.each(e,function(e){t[e.position]+=e.isHorizontal()?e.height:e.width})}oe._set("global",{layout:{padding:{top:0,right:0,bottom:0,left:0}}});var Lt,Yt={defaults:{},addBox:function(e,t){e.boxes||(e.boxes=[]),t.fullWidth=t.fullWidth||!1,t.position=t.position||"top",t.weight=t.weight||0,e.boxes.push(t)},removeBox:function(e,t){var n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure:function(e,t,n){for(var a,r=["fullWidth","position","weight"],i=r.length,s=0;s<i;++s)a=r[s],n.hasOwnProperty(a)&&(t[a]=n[a])},update:function(e,t,n){if(e){var a=e.options.layout||{},r=le.options.toPadding(a.padding),i=r.left,s=r.right,o=r.top,d=r.bottom,u=yt(e.boxes,"left"),l=yt(e.boxes,"right"),_=yt(e.boxes,"top"),c=yt(e.boxes,"bottom"),h=yt(e.boxes,"chartArea");gt(u,!0),gt(l,!1),gt(_,!0),gt(c,!1);var m,f=u.concat(l),p=_.concat(c),M=f.concat(p),y=t-i-s,g=n-o-d,v=(t-y/2)/f.length,L=y,Y=g,k={top:o,left:i,bottom:d,right:s},b=[];le.each(M,function(e){var t,n=e.isHorizontal();n?(t=e.update(e.fullWidth?y:L,g/2),Y-=t.height):(t=e.update(v,Y),L-=t.width),b.push({horizontal:n,width:t.width,box:e})}),m=function(e){var t=0,n=0,a=0,r=0;return le.each(e,function(e){if(e.getPadding){var i=e.getPadding();t=Math.max(t,i.top),n=Math.max(n,i.left),a=Math.max(a,i.bottom),r=Math.max(r,i.right)}}),{top:t,left:n,bottom:a,right:r}}(M),le.each(f,j),vt(f,k),le.each(p,j),vt(p,k),le.each(f,function(e){var t=le.findNextWhere(b,function(t){return t.box===e}),n={left:0,right:0,top:k.top,bottom:k.bottom};t&&e.update(t.width,Y,n)}),vt(M,k={top:o,left:i,bottom:d,right:s});var D=Math.max(m.left-k.left,0);k.left+=D,k.right+=Math.max(m.right-k.right,0);var w=Math.max(m.top-k.top,0);k.top+=w,k.bottom+=Math.max(m.bottom-k.bottom,0);var T=n-k.top-k.bottom,x=t-k.left-k.right;x===L&&T===Y||(le.each(f,function(e){e.height=T}),le.each(p,function(e){e.fullWidth||(e.width=x)}),Y=T,L=x);var S=i+D,H=o+w;le.each(u.concat(_),P),S+=L,H+=Y,le.each(l,P),le.each(c,P),e.chartArea={left:k.left,top:k.top,right:k.left+L,bottom:k.top+Y},le.each(h,function(t){t.left=e.chartArea.left,t.top=e.chartArea.top,t.right=e.chartArea.right,t.bottom=e.chartArea.bottom,t.update(L,Y)})}function j(e){var t=le.findNextWhere(b,function(t){return t.box===e});if(t)if(t.horizontal){var n={left:Math.max(k.left,m.left),right:Math.max(k.right,m.right),top:0,bottom:0};e.update(e.fullWidth?y:L,g/2,n)}else e.update(t.width,Y)}function P(e){e.isHorizontal()?(e.left=e.fullWidth?i:k.left,e.right=e.fullWidth?t-s:k.left+L,e.top=H,e.bottom=H+e.height,H=e.bottom):(e.left=S,e.right=S+e.width,e.top=k.top,e.bottom=k.top+Y,S=e.right)}}},kt=(Lt=Object.freeze({default:"/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n"}))&&Lt.default||Lt,bt="$chartjs",Dt="chartjs-size-monitor",wt="chartjs-render-monitor",Tt="chartjs-render-animation",xt=["animationstart","webkitAnimationStart"],St={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function Ht(e,t){var n=le.getStyle(e,t),a=n&&n.match(/^(\d+)(\.\d+)?px$/);return a?Number(a[1]):void 0}var jt=!!function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("e",null,t)}catch(e){}return e}()&&{passive:!0};function Pt(e,t,n){e.addEventListener(t,n,jt)}function Ot(e,t,n){e.removeEventListener(t,n,jt)}function At(e,t,n,a,r){return{type:e,chart:t,native:r||null,x:void 0!==n?n:null,y:void 0!==a?a:null}}function Wt(e){var t=document.createElement("div");return t.className=e||"",t}function Ft(e,t,n){var a,r,i,s,o=e[bt]||(e[bt]={}),d=o.resizer=function(e){var t=Wt(Dt),n=Wt(Dt+"-expand"),a=Wt(Dt+"-shrink");n.appendChild(Wt()),a.appendChild(Wt()),t.appendChild(n),t.appendChild(a),t._reset=function(){n.scrollLeft=1e6,n.scrollTop=1e6,a.scrollLeft=1e6,a.scrollTop=1e6};var r=function(){t._reset(),e()};return Pt(n,"scroll",r.bind(n,"expand")),Pt(a,"scroll",r.bind(a,"shrink")),t}((a=function(){if(o.resizer){var a=n.options.maintainAspectRatio&&e.parentNode,r=a?a.clientWidth:0;t(At("resize",n)),a&&a.clientWidth<r&&n.canvas&&t(At("resize",n))}},i=!1,s=[],function(){s=Array.prototype.slice.call(arguments),r=r||this,i||(i=!0,le.requestAnimFrame.call(window,function(){i=!1,a.apply(r,s)}))}));!function(e,t){var n=e[bt]||(e[bt]={}),a=n.renderProxy=function(e){e.animationName===Tt&&t()};le.each(xt,function(t){Pt(e,t,a)}),n.reflow=!!e.offsetParent,e.classList.add(wt)}(e,function(){if(o.resizer){var t=e.parentNode;t&&t!==d.parentNode&&t.insertBefore(d,t.firstChild),d._reset()}})}function Ct(e){var t=e[bt]||{},n=t.resizer;delete t.resizer,function(e){var t=e[bt]||{},n=t.renderProxy;n&&(le.each(xt,function(t){Ot(e,t,n)}),delete t.renderProxy),e.classList.remove(wt)}(e),n&&n.parentNode&&n.parentNode.removeChild(n)}var It={disableCSSInjection:!1,_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,_ensureLoaded:function(){this._loaded||(this._loaded=!0,this.disableCSSInjection||function(e,t){var n=e._style||document.createElement("style");e._style||(e._style=n,t="/* Chart.js */\n"+t,n.setAttribute("type","text/css"),document.getElementsByTagName("head")[0].appendChild(n)),n.appendChild(document.createTextNode(t))}(this,kt))},acquireContext:function(e,t){"string"==typeof e?e=document.getElementById(e):e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas);var n=e&&e.getContext&&e.getContext("2d");return this._ensureLoaded(),n&&n.canvas===e?(function(e,t){var n=e.style,a=e.getAttribute("height"),r=e.getAttribute("width");if(e[bt]={initial:{height:a,width:r,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",null===r||""===r){var i=Ht(e,"width");void 0!==i&&(e.width=i)}if(null===a||""===a)if(""===e.style.height)e.height=e.width/(t.options.aspectRatio||2);else{var s=Ht(e,"height");void 0!==i&&(e.height=s)}}(e,t),n):null},releaseContext:function(e){var t=e.canvas;if(t[bt]){var n=t[bt].initial;["height","width"].forEach(function(e){var a=n[e];le.isNullOrUndef(a)?t.removeAttribute(e):t.setAttribute(e,a)}),le.each(n.style||{},function(e,n){t.style[n]=e}),t.width=t.width,delete t[bt]}},addEventListener:function(e,t,n){var a=e.canvas;if("resize"!==t){var r=n[bt]||(n[bt]={});Pt(a,t,(r.proxies||(r.proxies={}))[e.id+"_"+t]=function(t){n(function(e,t){var n=St[e.type]||e.type,a=le.getRelativePosition(e,t);return At(n,t,a.x,a.y,e)}(t,e))})}else Ft(a,n,e)},removeEventListener:function(e,t,n){var a=e.canvas;if("resize"!==t){var r=((n[bt]||{}).proxies||{})[e.id+"_"+t];r&&Ot(a,t,r)}else Ct(a)}};le.addEvent=Pt,le.removeEvent=Ot;var Et=It._enabled?It:{acquireContext:function(e){return e&&e.canvas&&(e=e.canvas),e&&e.getContext("2d")||null}},zt=le.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},Et);oe._set("global",{plugins:{}});var Rt={_plugins:[],_cacheId:0,register:function(e){var t=this._plugins;[].concat(e).forEach(function(e){-1===t.indexOf(e)&&t.push(e)}),this._cacheId++},unregister:function(e){var t=this._plugins;[].concat(e).forEach(function(e){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(e,t,n){var a,r,i,s,o,d=this.descriptors(e),u=d.length;for(a=0;a<u;++a)if("function"==typeof(o=(i=(r=d[a]).plugin)[t])&&((s=[e].concat(n||[])).push(r.options),!1===o.apply(i,s)))return!1;return!0},descriptors:function(e){var t=e.$plugins||(e.$plugins={});if(t.id===this._cacheId)return t.descriptors;var n=[],a=[],r=e&&e.config||{},i=r.options&&r.options.plugins||{};return this._plugins.concat(r.plugins||[]).forEach(function(e){if(-1===n.indexOf(e)){var t=e.id,r=i[t];!1!==r&&(!0===r&&(r=le.clone(oe.global.plugins[t])),n.push(e),a.push({plugin:e,options:r||{}}))}}),t.descriptors=a,t.id=this._cacheId,a},_invalidate:function(e){delete e.$plugins}},Nt={constructors:{},defaults:{},registerScaleType:function(e,t,n){this.constructors[e]=t,this.defaults[e]=le.clone(n)},getScaleConstructor:function(e){return this.constructors.hasOwnProperty(e)?this.constructors[e]:void 0},getScaleDefaults:function(e){return this.defaults.hasOwnProperty(e)?le.merge({},[oe.scale,this.defaults[e]]):{}},updateScaleDefaults:function(e,t){this.defaults.hasOwnProperty(e)&&(this.defaults[e]=le.extend(this.defaults[e],t))},addScalesToLayout:function(e){le.each(e.scales,function(t){t.fullWidth=t.options.fullWidth,t.position=t.options.position,t.weight=t.options.weight,Yt.addBox(e,t)})}},Bt=le.valueOrDefault;oe._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:le.noop,title:function(e,t){var n="",a=t.labels,r=a?a.length:0;if(e.length>0){var i=e[0];i.label?n=i.label:i.xLabel?n=i.xLabel:r>0&&i.index<r&&(n=a[i.index])}return n},afterTitle:le.noop,beforeBody:le.noop,beforeLabel:le.noop,label:function(e,t){var n=t.datasets[e.datasetIndex].label||"";return n&&(n+=": "),le.isNullOrUndef(e.value)?n+=e.yLabel:n+=e.value,n},labelColor:function(e,t){var n=t.getDatasetMeta(e.datasetIndex).data[e.index]._view;return{borderColor:n.borderColor,backgroundColor:n.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:le.noop,afterBody:le.noop,beforeFooter:le.noop,footer:le.noop,afterFooter:le.noop}}});var Vt={average:function(e){if(!e.length)return!1;var t,n,a=0,r=0,i=0;for(t=0,n=e.length;t<n;++t){var s=e[t];if(s&&s.hasValue()){var o=s.tooltipPosition();a+=o.x,r+=o.y,++i}}return{x:a/i,y:r/i}},nearest:function(e,t){var n,a,r,i=t.x,s=t.y,o=Number.POSITIVE_INFINITY;for(n=0,a=e.length;n<a;++n){var d=e[n];if(d&&d.hasValue()){var u=d.getCenterPoint(),l=le.distanceBetweenPoints(t,u);l<o&&(o=l,r=d)}}if(r){var _=r.tooltipPosition();i=_.x,s=_.y}return{x:i,y:s}}};function Jt(e,t){return t&&(le.isArray(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function Ut(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function Gt(e){var t=oe.global;return{xPadding:e.xPadding,yPadding:e.yPadding,xAlign:e.xAlign,yAlign:e.yAlign,bodyFontColor:e.bodyFontColor,_bodyFontFamily:Bt(e.bodyFontFamily,t.defaultFontFamily),_bodyFontStyle:Bt(e.bodyFontStyle,t.defaultFontStyle),_bodyAlign:e.bodyAlign,bodyFontSize:Bt(e.bodyFontSize,t.defaultFontSize),bodySpacing:e.bodySpacing,titleFontColor:e.titleFontColor,_titleFontFamily:Bt(e.titleFontFamily,t.defaultFontFamily),_titleFontStyle:Bt(e.titleFontStyle,t.defaultFontStyle),titleFontSize:Bt(e.titleFontSize,t.defaultFontSize),_titleAlign:e.titleAlign,titleSpacing:e.titleSpacing,titleMarginBottom:e.titleMarginBottom,footerFontColor:e.footerFontColor,_footerFontFamily:Bt(e.footerFontFamily,t.defaultFontFamily),_footerFontStyle:Bt(e.footerFontStyle,t.defaultFontStyle),footerFontSize:Bt(e.footerFontSize,t.defaultFontSize),_footerAlign:e.footerAlign,footerSpacing:e.footerSpacing,footerMarginTop:e.footerMarginTop,caretSize:e.caretSize,cornerRadius:e.cornerRadius,backgroundColor:e.backgroundColor,opacity:0,legendColorBackground:e.multiKeyBackground,displayColors:e.displayColors,borderColor:e.borderColor,borderWidth:e.borderWidth}}function qt(e,t){return"center"===t?e.x+e.width/2:"right"===t?e.x+e.width-e.xPadding:e.x+e.xPadding}function $t(e){return Jt([],Ut(e))}var Kt=fe.extend({initialize:function(){this._model=Gt(this._options),this._lastActive=[]},getTitle:function(){var e=this,t=e._options,n=t.callbacks,a=n.beforeTitle.apply(e,arguments),r=n.title.apply(e,arguments),i=n.afterTitle.apply(e,arguments),s=[];return s=Jt(s,Ut(a)),s=Jt(s,Ut(r)),s=Jt(s,Ut(i))},getBeforeBody:function(){return $t(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(e,t){var n=this,a=n._options.callbacks,r=[];return le.each(e,function(e){var i={before:[],lines:[],after:[]};Jt(i.before,Ut(a.beforeLabel.call(n,e,t))),Jt(i.lines,a.label.call(n,e,t)),Jt(i.after,Ut(a.afterLabel.call(n,e,t))),r.push(i)}),r},getAfterBody:function(){return $t(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var e=this,t=e._options.callbacks,n=t.beforeFooter.apply(e,arguments),a=t.footer.apply(e,arguments),r=t.afterFooter.apply(e,arguments),i=[];return i=Jt(i,Ut(n)),i=Jt(i,Ut(a)),i=Jt(i,Ut(r))},update:function(e){var t,n,a,r,i,s,o,d,u,l,_=this,c=_._options,h=_._model,m=_._model=Gt(c),f=_._active,p=_._data,M={xAlign:h.xAlign,yAlign:h.yAlign},y={x:h.x,y:h.y},g={width:h.width,height:h.height},v={x:h.caretX,y:h.caretY};if(f.length){m.opacity=1;var L=[],Y=[];v=Vt[c.position].call(_,f,_._eventPosition);var k=[];for(t=0,n=f.length;t<n;++t)k.push((a=f[t],r=void 0,i=void 0,s=void 0,o=void 0,d=void 0,u=void 0,l=void 0,r=a._xScale,i=a._yScale||a._scale,s=a._index,o=a._datasetIndex,d=a._chart.getDatasetMeta(o).controller,u=d._getIndexScale(),l=d._getValueScale(),{xLabel:r?r.getLabelForIndex(s,o):"",yLabel:i?i.getLabelForIndex(s,o):"",label:u?""+u.getLabelForIndex(s,o):"",value:l?""+l.getLabelForIndex(s,o):"",index:s,datasetIndex:o,x:a._model.x,y:a._model.y}));c.filter&&(k=k.filter(function(e){return c.filter(e,p)})),c.itemSort&&(k=k.sort(function(e,t){return c.itemSort(e,t,p)})),le.each(k,function(e){L.push(c.callbacks.labelColor.call(_,e,_._chart)),Y.push(c.callbacks.labelTextColor.call(_,e,_._chart))}),m.title=_.getTitle(k,p),m.beforeBody=_.getBeforeBody(k,p),m.body=_.getBody(k,p),m.afterBody=_.getAfterBody(k,p),m.footer=_.getFooter(k,p),m.x=v.x,m.y=v.y,m.caretPadding=c.caretPadding,m.labelColors=L,m.labelTextColors=Y,m.dataPoints=k,g=function(e,t){var n=e._chart.ctx,a=2*t.yPadding,r=0,i=t.body,s=i.reduce(function(e,t){return e+t.before.length+t.lines.length+t.after.length},0);s+=t.beforeBody.length+t.afterBody.length;var o=t.title.length,d=t.footer.length,u=t.titleFontSize,l=t.bodyFontSize,_=t.footerFontSize;a+=o*u,a+=o?(o-1)*t.titleSpacing:0,a+=o?t.titleMarginBottom:0,a+=s*l,a+=s?(s-1)*t.bodySpacing:0,a+=d?t.footerMarginTop:0,a+=d*_,a+=d?(d-1)*t.footerSpacing:0;var c=0,h=function(e){r=Math.max(r,n.measureText(e).width+c)};return n.font=le.fontString(u,t._titleFontStyle,t._titleFontFamily),le.each(t.title,h),n.font=le.fontString(l,t._bodyFontStyle,t._bodyFontFamily),le.each(t.beforeBody.concat(t.afterBody),h),c=t.displayColors?l+2:0,le.each(i,function(e){le.each(e.before,h),le.each(e.lines,h),le.each(e.after,h)}),c=0,n.font=le.fontString(_,t._footerFontStyle,t._footerFontFamily),le.each(t.footer,h),{width:r+=2*t.xPadding,height:a}}(this,m),y=function(e,t,n,a){var r=e.x,i=e.y,s=e.caretSize,o=e.caretPadding,d=e.cornerRadius,u=n.xAlign,l=n.yAlign,_=s+o,c=d+o;return"right"===u?r-=t.width:"center"===u&&((r-=t.width/2)+t.width>a.width&&(r=a.width-t.width),r<0&&(r=0)),"top"===l?i+=_:i-="bottom"===l?t.height+_:t.height/2,"center"===l?"left"===u?r+=_:"right"===u&&(r-=_):"left"===u?r-=c:"right"===u&&(r+=c),{x:r,y:i}}(m,g,M=function(e,t){var n,a,r,i,s,o=e._model,d=e._chart,u=e._chart.chartArea,l="center",_="center";o.y<t.height?_="top":o.y>d.height-t.height&&(_="bottom");var c=(u.left+u.right)/2,h=(u.top+u.bottom)/2;"center"===_?(n=function(e){return e<=c},a=function(e){return e>c}):(n=function(e){return e<=t.width/2},a=function(e){return e>=d.width-t.width/2}),r=function(e){return e+t.width+o.caretSize+o.caretPadding>d.width},i=function(e){return e-t.width-o.caretSize-o.caretPadding<0},s=function(e){return e<=h?"top":"bottom"},n(o.x)?(l="left",r(o.x)&&(l="center",_=s(o.y))):a(o.x)&&(l="right",i(o.x)&&(l="center",_=s(o.y)));var m=e._options;return{xAlign:m.xAlign?m.xAlign:l,yAlign:m.yAlign?m.yAlign:_}}(this,g),_._chart)}else m.opacity=0;return m.xAlign=M.xAlign,m.yAlign=M.yAlign,m.x=y.x,m.y=y.y,m.width=g.width,m.height=g.height,m.caretX=v.x,m.caretY=v.y,_._model=m,e&&c.custom&&c.custom.call(_,m),_},drawCaret:function(e,t){var n=this._chart.ctx,a=this._view,r=this.getCaretPosition(e,t,a);n.lineTo(r.x1,r.y1),n.lineTo(r.x2,r.y2),n.lineTo(r.x3,r.y3)},getCaretPosition:function(e,t,n){var a,r,i,s,o,d,u=n.caretSize,l=n.cornerRadius,_=n.xAlign,c=n.yAlign,h=e.x,m=e.y,f=t.width,p=t.height;if("center"===c)o=m+p/2,"left"===_?(r=(a=h)-u,i=a,s=o+u,d=o-u):(r=(a=h+f)+u,i=a,s=o-u,d=o+u);else if("left"===_?(a=(r=h+l+u)-u,i=r+u):"right"===_?(a=(r=h+f-l-u)-u,i=r+u):(a=(r=n.caretX)-u,i=r+u),"top"===c)o=(s=m)-u,d=s;else{o=(s=m+p)+u,d=s;var M=i;i=a,a=M}return{x1:a,x2:r,x3:i,y1:s,y2:o,y3:d}},drawTitle:function(e,t,n){var a=t.title;if(a.length){e.x=qt(t,t._titleAlign),n.textAlign=t._titleAlign,n.textBaseline="top";var r,i,s=t.titleFontSize,o=t.titleSpacing;for(n.fillStyle=t.titleFontColor,n.font=le.fontString(s,t._titleFontStyle,t._titleFontFamily),r=0,i=a.length;r<i;++r)n.fillText(a[r],e.x,e.y),e.y+=s+o,r+1===a.length&&(e.y+=t.titleMarginBottom-o)}},drawBody:function(e,t,n){var a,r=t.bodyFontSize,i=t.bodySpacing,s=t._bodyAlign,o=t.body,d=t.displayColors,u=t.labelColors,l=0,_=d?qt(t,"left"):0;n.textAlign=s,n.textBaseline="top",n.font=le.fontString(r,t._bodyFontStyle,t._bodyFontFamily),e.x=qt(t,s);var c=function(t){n.fillText(t,e.x+l,e.y),e.y+=r+i};n.fillStyle=t.bodyFontColor,le.each(t.beforeBody,c),l=d&&"right"!==s?"center"===s?r/2+1:r+2:0,le.each(o,function(i,s){a=t.labelTextColors[s],n.fillStyle=a,le.each(i.before,c),le.each(i.lines,function(i){d&&(n.fillStyle=t.legendColorBackground,n.fillRect(_,e.y,r,r),n.lineWidth=1,n.strokeStyle=u[s].borderColor,n.strokeRect(_,e.y,r,r),n.fillStyle=u[s].backgroundColor,n.fillRect(_+1,e.y+1,r-2,r-2),n.fillStyle=a),c(i)}),le.each(i.after,c)}),l=0,le.each(t.afterBody,c),e.y-=i},drawFooter:function(e,t,n){var a=t.footer;a.length&&(e.x=qt(t,t._footerAlign),e.y+=t.footerMarginTop,n.textAlign=t._footerAlign,n.textBaseline="top",n.fillStyle=t.footerFontColor,n.font=le.fontString(t.footerFontSize,t._footerFontStyle,t._footerFontFamily),le.each(a,function(a){n.fillText(a,e.x,e.y),e.y+=t.footerFontSize+t.footerSpacing}))},drawBackground:function(e,t,n,a){n.fillStyle=t.backgroundColor,n.strokeStyle=t.borderColor,n.lineWidth=t.borderWidth;var r=t.xAlign,i=t.yAlign,s=e.x,o=e.y,d=a.width,u=a.height,l=t.cornerRadius;n.beginPath(),n.moveTo(s+l,o),"top"===i&&this.drawCaret(e,a),n.lineTo(s+d-l,o),n.quadraticCurveTo(s+d,o,s+d,o+l),"center"===i&&"right"===r&&this.drawCaret(e,a),n.lineTo(s+d,o+u-l),n.quadraticCurveTo(s+d,o+u,s+d-l,o+u),"bottom"===i&&this.drawCaret(e,a),n.lineTo(s+l,o+u),n.quadraticCurveTo(s,o+u,s,o+u-l),"center"===i&&"left"===r&&this.drawCaret(e,a),n.lineTo(s,o+l),n.quadraticCurveTo(s,o,s+l,o),n.closePath(),n.fill(),t.borderWidth>0&&n.stroke()},draw:function(){var e=this._chart.ctx,t=this._view;if(0!==t.opacity){var n={width:t.width,height:t.height},a={x:t.x,y:t.y},r=Math.abs(t.opacity<.001)?0:t.opacity,i=t.title.length||t.beforeBody.length||t.body.length||t.afterBody.length||t.footer.length;this._options.enabled&&i&&(e.save(),e.globalAlpha=r,this.drawBackground(a,t,e,n),a.y+=t.yPadding,this.drawTitle(a,t,e),this.drawBody(a,t,e),this.drawFooter(a,t,e),e.restore())}},handleEvent:function(e){var t,n=this,a=n._options;return n._lastActive=n._lastActive||[],"mouseout"===e.type?n._active=[]:n._active=n._chart.getElementsAtEventForMode(e,a.mode,a),(t=!le.arrayEquals(n._active,n._lastActive))&&(n._lastActive=n._active,(a.enabled||a.custom)&&(n._eventPosition={x:e.x,y:e.y},n.update(!0),n.pivot())),t}}),Zt=Vt,Xt=Kt;Xt.positioners=Zt;var Qt=le.valueOrDefault;function en(){return le.merge({},[].slice.call(arguments),{merger:function(e,t,n,a){if("xAxes"===e||"yAxes"===e){var r,i,s,o=n[e].length;for(t[e]||(t[e]=[]),r=0;r<o;++r)s=n[e][r],i=Qt(s.type,"xAxes"===e?"category":"linear"),r>=t[e].length&&t[e].push({}),!t[e][r].type||s.type&&s.type!==t[e][r].type?le.merge(t[e][r],[Nt.getScaleDefaults(i),s]):le.merge(t[e][r],s)}else le._merger(e,t,n,a)}})}function tn(){return le.merge({},[].slice.call(arguments),{merger:function(e,t,n,a){var r=t[e]||{},i=n[e];"scales"===e?t[e]=en(r,i):"scale"===e?t[e]=le.merge(r,[Nt.getScaleDefaults(i.type),i]):le._merger(e,t,n,a)}})}function nn(e){var t=e.options;le.each(e.scales,function(t){Yt.removeBox(e,t)}),t=tn(oe.global,oe[e.config.type],t),e.options=e.config.options=t,e.ensureScalesHaveIDs(),e.buildOrUpdateScales(),e.tooltip._options=t.tooltips,e.tooltip.initialize()}function an(e){return"top"===e||"bottom"===e}oe._set("global",{elements:{},events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,maintainAspectRatio:!0,responsive:!0,responsiveAnimationDuration:0});var rn=function(e,t){return this.construct(e,t),this};le.extend(rn.prototype,{construct:function(e,t){var n=this;t=function(e){var t=(e=e||{}).data=e.data||{};return t.datasets=t.datasets||[],t.labels=t.labels||[],e.options=tn(oe.global,oe[e.type],e.options||{}),e}(t);var a=zt.acquireContext(e,t),r=a&&a.canvas,i=r&&r.height,s=r&&r.width;n.id=le.uid(),n.ctx=a,n.canvas=r,n.config=t,n.width=s,n.height=i,n.aspectRatio=i?s/i:null,n.options=t.options,n._bufferedRender=!1,n.chart=n,n.controller=n,rn.instances[n.id]=n,Object.defineProperty(n,"data",{get:function(){return n.config.data},set:function(e){n.config.data=e}}),a&&r?(n.initialize(),n.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var e=this;return Rt.notify(e,"beforeInit"),le.retinaScale(e,e.options.devicePixelRatio),e.bindEvents(),e.options.responsive&&e.resize(!0),e.ensureScalesHaveIDs(),e.buildOrUpdateScales(),e.initToolTip(),Rt.notify(e,"afterInit"),e},clear:function(){return le.canvas.clear(this),this},stop:function(){return ye.cancelAnimation(this),this},resize:function(e){var t=this,n=t.options,a=t.canvas,r=n.maintainAspectRatio&&t.aspectRatio||null,i=Math.max(0,Math.floor(le.getMaximumWidth(a))),s=Math.max(0,Math.floor(r?i/r:le.getMaximumHeight(a)));if((t.width!==i||t.height!==s)&&(a.width=t.width=i,a.height=t.height=s,a.style.width=i+"px",a.style.height=s+"px",le.retinaScale(t,n.devicePixelRatio),!e)){var o={width:i,height:s};Rt.notify(t,"resize",[o]),n.onResize&&n.onResize(t,o),t.stop(),t.update({duration:n.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var e=this.options,t=e.scales||{},n=e.scale;le.each(t.xAxes,function(e,t){e.id=e.id||"x-axis-"+t}),le.each(t.yAxes,function(e,t){e.id=e.id||"y-axis-"+t}),n&&(n.id=n.id||"scale")},buildOrUpdateScales:function(){var e=this,t=e.options,n=e.scales||{},a=[],r=Object.keys(n).reduce(function(e,t){return e[t]=!1,e},{});t.scales&&(a=a.concat((t.scales.xAxes||[]).map(function(e){return{options:e,dtype:"category",dposition:"bottom"}}),(t.scales.yAxes||[]).map(function(e){return{options:e,dtype:"linear",dposition:"left"}}))),t.scale&&a.push({options:t.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),le.each(a,function(t){var a=t.options,i=a.id,s=Qt(a.type,t.dtype);an(a.position)!==an(t.dposition)&&(a.position=t.dposition),r[i]=!0;var o=null;if(i in n&&n[i].type===s)(o=n[i]).options=a,o.ctx=e.ctx,o.chart=e;else{var d=Nt.getScaleConstructor(s);if(!d)return;o=new d({id:i,type:s,options:a,ctx:e.ctx,chart:e}),n[o.id]=o}o.mergeTicksOptions(),t.isDefault&&(e.scale=o)}),le.each(r,function(e,t){e||delete n[t]}),e.scales=n,Nt.addScalesToLayout(this)},buildOrUpdateControllers:function(){var e=this,t=[];return le.each(e.data.datasets,function(n,a){var r=e.getDatasetMeta(a),i=n.type||e.config.type;if(r.type&&r.type!==i&&(e.destroyDatasetMeta(a),r=e.getDatasetMeta(a)),r.type=i,r.controller)r.controller.updateIndex(a),r.controller.linkScales();else{var s=lt[r.type];if(void 0===s)throw new Error('"'+r.type+'" is not a chart type.');r.controller=new s(e,a),t.push(r.controller)}},e),t},resetElements:function(){var e=this;le.each(e.data.datasets,function(t,n){e.getDatasetMeta(n).controller.reset()},e)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(e){var t=this;if(e&&"object"==typeof e||(e={duration:e,lazy:arguments[1]}),nn(t),Rt._invalidate(t),!1!==Rt.notify(t,"beforeUpdate")){t.tooltip._data=t.data;var n=t.buildOrUpdateControllers();le.each(t.data.datasets,function(e,n){t.getDatasetMeta(n).controller.buildOrUpdateElements()},t),t.updateLayout(),t.options.animation&&t.options.animation.duration&&le.each(n,function(e){e.reset()}),t.updateDatasets(),t.tooltip.initialize(),t.lastActive=[],Rt.notify(t,"afterUpdate"),t._bufferedRender?t._bufferedRequest={duration:e.duration,easing:e.easing,lazy:e.lazy}:t.render(e)}},updateLayout:function(){!1!==Rt.notify(this,"beforeLayout")&&(Yt.update(this,this.width,this.height),Rt.notify(this,"afterScaleUpdate"),Rt.notify(this,"afterLayout"))},updateDatasets:function(){if(!1!==Rt.notify(this,"beforeDatasetsUpdate")){for(var e=0,t=this.data.datasets.length;e<t;++e)this.updateDataset(e);Rt.notify(this,"afterDatasetsUpdate")}},updateDataset:function(e){var t=this.getDatasetMeta(e),n={meta:t,index:e};!1!==Rt.notify(this,"beforeDatasetUpdate",[n])&&(t.controller.update(),Rt.notify(this,"afterDatasetUpdate",[n]))},render:function(e){var t=this;e&&"object"==typeof e||(e={duration:e,lazy:arguments[1]});var n=t.options.animation,a=Qt(e.duration,n&&n.duration),r=e.lazy;if(!1!==Rt.notify(t,"beforeRender")){var i=function(e){Rt.notify(t,"afterRender"),le.callback(n&&n.onComplete,[e],t)};if(n&&a){var s=new Me({numSteps:a/16.66,easing:e.easing||n.easing,render:function(e,t){var n=le.easing.effects[t.easing],a=t.currentStep,r=a/t.numSteps;e.draw(n(r),r,a)},onAnimationProgress:n.onProgress,onAnimationComplete:i});ye.addAnimation(t,s,a,r)}else t.draw(),i(new Me({numSteps:0,chart:t}));return t}},draw:function(e){var t=this;t.clear(),le.isNullOrUndef(e)&&(e=1),t.transition(e),t.width<=0||t.height<=0||!1!==Rt.notify(t,"beforeDraw",[e])&&(le.each(t.boxes,function(e){e.draw(t.chartArea)},t),t.drawDatasets(e),t._drawTooltip(e),Rt.notify(t,"afterDraw",[e]))},transition:function(e){for(var t=0,n=(this.data.datasets||[]).length;t<n;++t)this.isDatasetVisible(t)&&this.getDatasetMeta(t).controller.transition(e);this.tooltip.transition(e)},drawDatasets:function(e){var t=this;if(!1!==Rt.notify(t,"beforeDatasetsDraw",[e])){for(var n=(t.data.datasets||[]).length-1;n>=0;--n)t.isDatasetVisible(n)&&t.drawDataset(n,e);Rt.notify(t,"afterDatasetsDraw",[e])}},drawDataset:function(e,t){var n=this.getDatasetMeta(e),a={meta:n,index:e,easingValue:t};!1!==Rt.notify(this,"beforeDatasetDraw",[a])&&(n.controller.draw(t),Rt.notify(this,"afterDatasetDraw",[a]))},_drawTooltip:function(e){var t=this.tooltip,n={tooltip:t,easingValue:e};!1!==Rt.notify(this,"beforeTooltipDraw",[n])&&(t.draw(),Rt.notify(this,"afterTooltipDraw",[n]))},getElementAtEvent:function(e){return Mt.modes.single(this,e)},getElementsAtEvent:function(e){return Mt.modes.label(this,e,{intersect:!0})},getElementsAtXAxis:function(e){return Mt.modes["x-axis"](this,e,{intersect:!0})},getElementsAtEventForMode:function(e,t,n){var a=Mt.modes[t];return"function"==typeof a?a(this,e,n):[]},getDatasetAtEvent:function(e){return Mt.modes.dataset(this,e,{intersect:!0})},getDatasetMeta:function(e){var t=this.data.datasets[e];t._meta||(t._meta={});var n=t._meta[this.id];return n||(n=t._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null}),n},getVisibleDatasetCount:function(){for(var e=0,t=0,n=this.data.datasets.length;t<n;++t)this.isDatasetVisible(t)&&e++;return e},isDatasetVisible:function(e){var t=this.getDatasetMeta(e);return"boolean"==typeof t.hidden?!t.hidden:!this.data.datasets[e].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(e){var t=this.id,n=this.data.datasets[e],a=n._meta&&n._meta[t];a&&(a.controller.destroy(),delete n._meta[t])},destroy:function(){var e,t,n=this,a=n.canvas;for(n.stop(),e=0,t=n.data.datasets.length;e<t;++e)n.destroyDatasetMeta(e);a&&(n.unbindEvents(),le.canvas.clear(n),zt.releaseContext(n.ctx),n.canvas=null,n.ctx=null),Rt.notify(n,"destroy"),delete rn.instances[n.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var e=this;e.tooltip=new Xt({_chart:e,_chartInstance:e,_data:e.data,_options:e.options.tooltips},e)},bindEvents:function(){var e=this,t=e._listeners={},n=function(){e.eventHandler.apply(e,arguments)};le.each(e.options.events,function(a){zt.addEventListener(e,a,n),t[a]=n}),e.options.responsive&&(n=function(){e.resize()},zt.addEventListener(e,"resize",n),t.resize=n)},unbindEvents:function(){var e=this,t=e._listeners;t&&(delete e._listeners,le.each(t,function(t,n){zt.removeEventListener(e,n,t)}))},updateHoverStyle:function(e,t,n){var a,r,i,s=n?"setHoverStyle":"removeHoverStyle";for(r=0,i=e.length;r<i;++r)(a=e[r])&&this.getDatasetMeta(a._datasetIndex).controller[s](a)},eventHandler:function(e){var t=this,n=t.tooltip;if(!1!==Rt.notify(t,"beforeEvent",[e])){t._bufferedRender=!0,t._bufferedRequest=null;var a=t.handleEvent(e);n&&(a=n._start?n.handleEvent(e):a|n.handleEvent(e)),Rt.notify(t,"afterEvent",[e]);var r=t._bufferedRequest;return r?t.render(r):a&&!t.animating&&(t.stop(),t.render({duration:t.options.hover.animationDuration,lazy:!0})),t._bufferedRender=!1,t._bufferedRequest=null,t}},handleEvent:function(e){var t,n=this,a=n.options||{},r=a.hover;return n.lastActive=n.lastActive||[],"mouseout"===e.type?n.active=[]:n.active=n.getElementsAtEventForMode(e,r.mode,r),le.callback(a.onHover||a.hover.onHover,[e.native,n.active],n),"mouseup"!==e.type&&"click"!==e.type||a.onClick&&a.onClick.call(n,e.native,n.active),n.lastActive.length&&n.updateHoverStyle(n.lastActive,r.mode,!1),n.active.length&&r.mode&&n.updateHoverStyle(n.active,r.mode,!0),t=!le.arrayEquals(n.active,n.lastActive),n.lastActive=n.active,t}}),rn.instances={};var sn=rn;function on(){throw new Error("This method is not implemented: either no adapter can be found or an incomplete integration was provided.")}function dn(e){this.options=e||{}}rn.Controller=rn,rn.types={},le.configMerge=tn,le.scaleMerge=en,le.extend(dn.prototype,{formats:on,parse:on,format:on,add:on,diff:on,startOf:on,endOf:on,_create:function(e){return e}}),dn.override=function(e){le.extend(dn.prototype,e)};var un={_date:dn},ln={formatters:{values:function(e){return le.isArray(e)?e:""+e},linear:function(e,t,n){var a=n.length>3?n[2]-n[1]:n[1]-n[0];Math.abs(a)>1&&e!==Math.floor(e)&&(a=e-Math.floor(e));var r=le.log10(Math.abs(a)),i="";if(0!==e)if(Math.max(Math.abs(n[0]),Math.abs(n[n.length-1]))<1e-4){var s=le.log10(Math.abs(e));i=e.toExponential(Math.floor(s)-Math.floor(r))}else{var o=-1*Math.floor(r);o=Math.max(Math.min(o,20),0),i=e.toFixed(o)}else i="0";return i},logarithmic:function(e,t,n){var a=e/Math.pow(10,Math.floor(le.log10(e)));return 0===e?"0":1===a||2===a||5===a||0===t||t===n.length-1?e.toExponential():""}}},_n=le.valueOrDefault,cn=le.valueAtIndexOrDefault;function hn(e){var t,n,a=[];for(t=0,n=e.length;t<n;++t)a.push(e[t].label);return a}function mn(e,t,n){return le.isArray(t)?le.longestText(e,n,t):e.measureText(t).width}oe._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:ln.formatters.values,minor:{},major:{}}});var fn=fe.extend({getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},mergeTicksOptions:function(){var e=this.options.ticks;for(var t in!1===e.minor&&(e.minor={display:!1}),!1===e.major&&(e.major={display:!1}),e)"major"!==t&&"minor"!==t&&(void 0===e.minor[t]&&(e.minor[t]=e[t]),void 0===e.major[t]&&(e.major[t]=e[t]))},beforeUpdate:function(){le.callback(this.options.beforeUpdate,[this])},update:function(e,t,n){var a,r,i,s,o,d,u=this;for(u.beforeUpdate(),u.maxWidth=e,u.maxHeight=t,u.margins=le.extend({left:0,right:0,top:0,bottom:0},n),u._maxLabelLines=0,u.longestLabelWidth=0,u.longestTextCache=u.longestTextCache||{},u.beforeSetDimensions(),u.setDimensions(),u.afterSetDimensions(),u.beforeDataLimits(),u.determineDataLimits(),u.afterDataLimits(),u.beforeBuildTicks(),o=u.buildTicks()||[],o=u.afterBuildTicks(o)||o,u.beforeTickToLabelConversion(),i=u.convertTicksToLabels(o)||u.ticks,u.afterTickToLabelConversion(),u.ticks=i,a=0,r=i.length;a<r;++a)s=i[a],(d=o[a])?d.label=s:o.push(d={label:s,major:!1});return u._ticks=o,u.beforeCalculateTickRotation(),u.calculateTickRotation(),u.afterCalculateTickRotation(),u.beforeFit(),u.fit(),u.afterFit(),u.afterUpdate(),u.minSize},afterUpdate:function(){le.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){le.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0},afterSetDimensions:function(){le.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){le.callback(this.options.beforeDataLimits,[this])},determineDataLimits:le.noop,afterDataLimits:function(){le.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){le.callback(this.options.beforeBuildTicks,[this])},buildTicks:le.noop,afterBuildTicks:function(e){var t=this;return le.isArray(e)&&e.length?le.callback(t.options.afterBuildTicks,[t,e]):(t.ticks=le.callback(t.options.afterBuildTicks,[t,t.ticks])||t.ticks,e)},beforeTickToLabelConversion:function(){le.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var e=this.options.ticks;this.ticks=this.ticks.map(e.userCallback||e.callback,this)},afterTickToLabelConversion:function(){le.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){le.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var e=this,t=e.ctx,n=e.options.ticks,a=hn(e._ticks),r=le.options._parseFont(n);t.font=r.string;var i=n.minRotation||0;if(a.length&&e.options.display&&e.isHorizontal())for(var s,o=le.longestText(t,r.string,a,e.longestTextCache),d=o,u=e.getPixelForTick(1)-e.getPixelForTick(0)-6;d>u&&i<n.maxRotation;){var l=le.toRadians(i);if(s=Math.cos(l),Math.sin(l)*o>e.maxHeight){i--;break}i++,d=s*o}e.labelRotation=i},afterCalculateTickRotation:function(){le.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){le.callback(this.options.beforeFit,[this])},fit:function(){var e=this,t=e.minSize={width:0,height:0},n=hn(e._ticks),a=e.options,r=a.ticks,i=a.scaleLabel,s=a.gridLines,o=e._isVisible(),d=a.position,u=e.isHorizontal(),l=le.options._parseFont,_=l(r),c=a.gridLines.tickMarkLength;if(t.width=u?e.isFullWidth()?e.maxWidth-e.margins.left-e.margins.right:e.maxWidth:o&&s.drawTicks?c:0,t.height=u?o&&s.drawTicks?c:0:e.maxHeight,i.display&&o){var h=l(i),m=le.options.toPadding(i.padding),f=h.lineHeight+m.height;u?t.height+=f:t.width+=f}if(r.display&&o){var p=le.longestText(e.ctx,_.string,n,e.longestTextCache),M=le.numberOfLabelLines(n),y=.5*_.size,g=e.options.ticks.padding;if(e._maxLabelLines=M,e.longestLabelWidth=p,u){var v=le.toRadians(e.labelRotation),L=Math.cos(v),Y=Math.sin(v)*p+_.lineHeight*M+y;t.height=Math.min(e.maxHeight,t.height+Y+g),e.ctx.font=_.string;var k,b,D=mn(e.ctx,n[0],_.string),w=mn(e.ctx,n[n.length-1],_.string),T=e.getPixelForTick(0)-e.left,x=e.right-e.getPixelForTick(n.length-1);0!==e.labelRotation?(k="bottom"===d?L*D:L*y,b="bottom"===d?L*y:L*w):(k=D/2,b=w/2),e.paddingLeft=Math.max(k-T,0)+3,e.paddingRight=Math.max(b-x,0)+3}else r.mirror?p=0:p+=g+y,t.width=Math.min(e.maxWidth,t.width+p),e.paddingTop=_.size/2,e.paddingBottom=_.size/2}e.handleMargins(),e.width=t.width,e.height=t.height},handleMargins:function(){var e=this;e.margins&&(e.paddingLeft=Math.max(e.paddingLeft-e.margins.left,0),e.paddingTop=Math.max(e.paddingTop-e.margins.top,0),e.paddingRight=Math.max(e.paddingRight-e.margins.right,0),e.paddingBottom=Math.max(e.paddingBottom-e.margins.bottom,0))},afterFit:function(){le.callback(this.options.afterFit,[this])},isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(e){if(le.isNullOrUndef(e))return NaN;if(("number"==typeof e||e instanceof Number)&&!isFinite(e))return NaN;if(e)if(this.isHorizontal()){if(void 0!==e.x)return this.getRightValue(e.x)}else if(void 0!==e.y)return this.getRightValue(e.y);return e},getLabelForIndex:le.noop,getPixelForValue:le.noop,getValueForPixel:le.noop,getPixelForTick:function(e){var t=this,n=t.options.offset;if(t.isHorizontal()){var a=(t.width-(t.paddingLeft+t.paddingRight))/Math.max(t._ticks.length-(n?0:1),1),r=a*e+t.paddingLeft;n&&(r+=a/2);var i=t.left+r;return i+=t.isFullWidth()?t.margins.left:0}var s=t.height-(t.paddingTop+t.paddingBottom);return t.top+e*(s/(t._ticks.length-1))},getPixelForDecimal:function(e){var t=this;if(t.isHorizontal()){var n=(t.width-(t.paddingLeft+t.paddingRight))*e+t.paddingLeft,a=t.left+n;return a+=t.isFullWidth()?t.margins.left:0}return t.top+e*t.height},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var e=this.min,t=this.max;return this.beginAtZero?0:e<0&&t<0?t:e>0&&t>0?e:0},_autoSkip:function(e){var t,n,a=this,r=a.isHorizontal(),i=a.options.ticks.minor,s=e.length,o=!1,d=i.maxTicksLimit,u=a._tickSize()*(s-1),l=r?a.width-(a.paddingLeft+a.paddingRight):a.height-(a.paddingTop+a.PaddingBottom),_=[];for(u>l&&(o=1+Math.floor(u/l)),s>d&&(o=Math.max(o,1+Math.floor(s/d))),t=0;t<s;t++)n=e[t],o>1&&t%o>0&&delete n.label,_.push(n);return _},_tickSize:function(){var e=this,t=e.isHorizontal(),n=e.options.ticks.minor,a=le.toRadians(e.labelRotation),r=Math.abs(Math.cos(a)),i=Math.abs(Math.sin(a)),s=n.autoSkipPadding||0,o=e.longestLabelWidth+s||0,d=le.options._parseFont(n),u=e._maxLabelLines*d.lineHeight+s||0;return t?u*r>o*i?o/r:u/i:u*i<o*r?u/r:o/i},_isVisible:function(){var e,t,n,a=this.chart,r=this.options.display;if("auto"!==r)return!!r;for(e=0,t=a.data.datasets.length;e<t;++e)if(a.isDatasetVisible(e)&&((n=a.getDatasetMeta(e)).xAxisID===this.id||n.yAxisID===this.id))return!0;return!1},draw:function(e){var t=this,n=t.options;if(t._isVisible()){var a,r,i,s=t.chart,o=t.ctx,d=oe.global.defaultFontColor,u=n.ticks.minor,l=n.ticks.major||u,_=n.gridLines,c=n.scaleLabel,h=n.position,m=0!==t.labelRotation,f=u.mirror,p=t.isHorizontal(),M=le.options._parseFont,y=u.display&&u.autoSkip?t._autoSkip(t.getTicks()):t.getTicks(),g=_n(u.fontColor,d),v=M(u),L=v.lineHeight,Y=_n(l.fontColor,d),k=M(l),b=u.padding,D=u.labelOffset,w=_.drawTicks?_.tickMarkLength:0,T=_n(c.fontColor,d),x=M(c),S=le.options.toPadding(c.padding),H=le.toRadians(t.labelRotation),j=[],P=_.drawBorder?cn(_.lineWidth,0,0):0,O=le._alignPixel;if("top"===h?(a=O(s,t.bottom,P),r=t.bottom-w,i=a-P/2):"bottom"===h?(a=O(s,t.top,P),r=a+P/2,i=t.top+w):"left"===h?(a=O(s,t.right,P),r=t.right-w,i=a-P/2):(a=O(s,t.left,P),r=a+P/2,i=t.left+w),le.each(y,function(a,o){if(!le.isNullOrUndef(a.label)){var d,u,l,c,M,y,g,v,Y,k,T,x,S,A,W,F,C=a.label;o===t.zeroLineIndex&&n.offset===_.offsetGridLines?(d=_.zeroLineWidth,u=_.zeroLineColor,l=_.zeroLineBorderDash||[],c=_.zeroLineBorderDashOffset||0):(d=cn(_.lineWidth,o),u=cn(_.color,o),l=_.borderDash||[],c=_.borderDashOffset||0);var I=le.isArray(C)?C.length:1,E=function(e,t,n){var a=e.getPixelForTick(t);return n&&(1===e.getTicks().length?a-=e.isHorizontal()?Math.max(a-e.left,e.right-a):Math.max(a-e.top,e.bottom-a):a-=0===t?(e.getPixelForTick(1)-a)/2:(a-e.getPixelForTick(t-1))/2),a}(t,o,_.offsetGridLines);if(p){var z=w+b;E<t.left-1e-7&&(u="rgba(0,0,0,0)"),M=g=Y=T=O(s,E,d),y=r,v=i,S=t.getPixelForTick(o)+D,"top"===h?(k=O(s,e.top,P)+P/2,x=e.bottom,W=((m?1:.5)-I)*L,F=m?"left":"center",A=t.bottom-z):(k=e.top,x=O(s,e.bottom,P)-P/2,W=(m?0:.5)*L,F=m?"right":"center",A=t.top+z)}else{var R=(f?0:w)+b;E<t.top-1e-7&&(u="rgba(0,0,0,0)"),M=r,g=i,y=v=k=x=O(s,E,d),A=t.getPixelForTick(o)+D,W=(1-I)*L/2,"left"===h?(Y=O(s,e.left,P)+P/2,T=e.right,F=f?"left":"right",S=t.right-R):(Y=e.left,T=O(s,e.right,P)-P/2,F=f?"right":"left",S=t.left+R)}j.push({tx1:M,ty1:y,tx2:g,ty2:v,x1:Y,y1:k,x2:T,y2:x,labelX:S,labelY:A,glWidth:d,glColor:u,glBorderDash:l,glBorderDashOffset:c,rotation:-1*H,label:C,major:a.major,textOffset:W,textAlign:F})}}),le.each(j,function(e){var t=e.glWidth,n=e.glColor;if(_.display&&t&&n&&(o.save(),o.lineWidth=t,o.strokeStyle=n,o.setLineDash&&(o.setLineDash(e.glBorderDash),o.lineDashOffset=e.glBorderDashOffset),o.beginPath(),_.drawTicks&&(o.moveTo(e.tx1,e.ty1),o.lineTo(e.tx2,e.ty2)),_.drawOnChartArea&&(o.moveTo(e.x1,e.y1),o.lineTo(e.x2,e.y2)),o.stroke(),o.restore()),u.display){o.save(),o.translate(e.labelX,e.labelY),o.rotate(e.rotation),o.font=e.major?k.string:v.string,o.fillStyle=e.major?Y:g,o.textBaseline="middle",o.textAlign=e.textAlign;var a=e.label,r=e.textOffset;if(le.isArray(a))for(var i=0;i<a.length;++i)o.fillText(""+a[i],0,r),r+=L;else o.fillText(a,0,r);o.restore()}}),c.display){var A,W,F=0,C=x.lineHeight/2;if(p)A=t.left+(t.right-t.left)/2,W="bottom"===h?t.bottom-C-S.bottom:t.top+C+S.top;else{var I="left"===h;A=I?t.left+C+S.top:t.right-C-S.top,W=t.top+(t.bottom-t.top)/2,F=I?-.5*Math.PI:.5*Math.PI}o.save(),o.translate(A,W),o.rotate(F),o.textAlign="center",o.textBaseline="middle",o.fillStyle=T,o.font=x.string,o.fillText(c.labelString,0,0),o.restore()}if(P){var E,z,R,N,B=P,V=cn(_.lineWidth,y.length-1,0);p?(E=O(s,t.left,B)-B/2,z=O(s,t.right,V)+V/2,R=N=a):(R=O(s,t.top,B)-B/2,N=O(s,t.bottom,V)+V/2,E=z=a),o.lineWidth=P,o.strokeStyle=cn(_.color,0),o.beginPath(),o.moveTo(E,R),o.lineTo(z,N),o.stroke()}}}}),pn=fn.extend({getLabels:function(){var e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels},determineDataLimits:function(){var e,t=this,n=t.getLabels();t.minIndex=0,t.maxIndex=n.length-1,void 0!==t.options.ticks.min&&(e=n.indexOf(t.options.ticks.min),t.minIndex=-1!==e?e:t.minIndex),void 0!==t.options.ticks.max&&(e=n.indexOf(t.options.ticks.max),t.maxIndex=-1!==e?e:t.maxIndex),t.min=n[t.minIndex],t.max=n[t.maxIndex]},buildTicks:function(){var e=this,t=e.getLabels();e.ticks=0===e.minIndex&&e.maxIndex===t.length-1?t:t.slice(e.minIndex,e.maxIndex+1)},getLabelForIndex:function(e,t){var n=this,a=n.chart;return a.getDatasetMeta(t).controller._getValueScaleId()===n.id?n.getRightValue(a.data.datasets[t].data[e]):n.ticks[e-n.minIndex]},getPixelForValue:function(e,t){var n,a=this,r=a.options.offset,i=Math.max(a.maxIndex+1-a.minIndex-(r?0:1),1);if(null!=e&&(n=a.isHorizontal()?e.x:e.y),void 0!==n||void 0!==e&&isNaN(t)){e=n||e;var s=a.getLabels().indexOf(e);t=-1!==s?s:t}if(a.isHorizontal()){var o=a.width/i,d=o*(t-a.minIndex);return r&&(d+=o/2),a.left+d}var u=a.height/i,l=u*(t-a.minIndex);return r&&(l+=u/2),a.top+l},getPixelForTick:function(e){return this.getPixelForValue(this.ticks[e],e+this.minIndex,null)},getValueForPixel:function(e){var t=this,n=t.options.offset,a=Math.max(t._ticks.length-(n?0:1),1),r=t.isHorizontal(),i=(r?t.width:t.height)/a;return e-=r?t.left:t.top,n&&(e-=i/2),(e<=0?0:Math.round(e/i))+t.minIndex},getBasePixel:function(){return this.bottom}}),Mn={position:"bottom"};pn._defaults=Mn;var yn=le.noop,gn=le.isNullOrUndef,vn=fn.extend({getRightValue:function(e){return"string"==typeof e?+e:fn.prototype.getRightValue.call(this,e)},handleTickRangeOptions:function(){var e=this,t=e.options.ticks;if(t.beginAtZero){var n=le.sign(e.min),a=le.sign(e.max);n<0&&a<0?e.max=0:n>0&&a>0&&(e.min=0)}var r=void 0!==t.min||void 0!==t.suggestedMin,i=void 0!==t.max||void 0!==t.suggestedMax;void 0!==t.min?e.min=t.min:void 0!==t.suggestedMin&&(null===e.min?e.min=t.suggestedMin:e.min=Math.min(e.min,t.suggestedMin)),void 0!==t.max?e.max=t.max:void 0!==t.suggestedMax&&(null===e.max?e.max=t.suggestedMax:e.max=Math.max(e.max,t.suggestedMax)),r!==i&&e.min>=e.max&&(r?e.max=e.min+1:e.min=e.max-1),e.min===e.max&&(e.max++,t.beginAtZero||e.min--)},getTickLimit:function(){var e,t=this.options.ticks,n=t.stepSize,a=t.maxTicksLimit;return n?e=Math.ceil(this.max/n)-Math.floor(this.min/n)+1:(e=this._computeTickLimit(),a=a||11),a&&(e=Math.min(a,e)),e},_computeTickLimit:function(){return Number.POSITIVE_INFINITY},handleDirectionalChanges:yn,buildTicks:function(){var e=this,t=e.options.ticks,n=e.getTickLimit(),a={maxTicks:n=Math.max(2,n),min:t.min,max:t.max,precision:t.precision,stepSize:le.valueOrDefault(t.fixedStepSize,t.stepSize)},r=e.ticks=function(e,t){var n,a,r,i,s=[],o=e.stepSize,d=o||1,u=e.maxTicks-1,l=e.min,_=e.max,c=e.precision,h=t.min,m=t.max,f=le.niceNum((m-h)/u/d)*d;if(f<1e-14&&gn(l)&&gn(_))return[h,m];(i=Math.ceil(m/f)-Math.floor(h/f))>u&&(f=le.niceNum(i*f/u/d)*d),o||gn(c)?n=Math.pow(10,le._decimalPlaces(f)):(n=Math.pow(10,c),f=Math.ceil(f*n)/n),a=Math.floor(h/f)*f,r=Math.ceil(m/f)*f,o&&(!gn(l)&&le.almostWhole(l/f,f/1e3)&&(a=l),!gn(_)&&le.almostWhole(_/f,f/1e3)&&(r=_)),i=(r-a)/f,i=le.almostEquals(i,Math.round(i),f/1e3)?Math.round(i):Math.ceil(i),a=Math.round(a*n)/n,r=Math.round(r*n)/n,s.push(gn(l)?a:l);for(var p=1;p<i;++p)s.push(Math.round((a+p*f)*n)/n);return s.push(gn(_)?r:_),s}(a,e);e.handleDirectionalChanges(),e.max=le.max(r),e.min=le.min(r),t.reverse?(r.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max)},convertTicksToLabels:function(){var e=this;e.ticksAsNumbers=e.ticks.slice(),e.zeroLineIndex=e.ticks.indexOf(0),fn.prototype.convertTicksToLabels.call(e)}}),Ln={position:"left",ticks:{callback:ln.formatters.linear}},Yn=vn.extend({determineDataLimits:function(){var e=this,t=e.options,n=e.chart,a=n.data.datasets,r=e.isHorizontal();function i(t){return r?t.xAxisID===e.id:t.yAxisID===e.id}e.min=null,e.max=null;var s=t.stacked;if(void 0===s&&le.each(a,function(e,t){if(!s){var a=n.getDatasetMeta(t);n.isDatasetVisible(t)&&i(a)&&void 0!==a.stack&&(s=!0)}}),t.stacked||s){var o={};le.each(a,function(a,r){var s=n.getDatasetMeta(r),d=[s.type,void 0===t.stacked&&void 0===s.stack?r:"",s.stack].join(".");void 0===o[d]&&(o[d]={positiveValues:[],negativeValues:[]});var u=o[d].positiveValues,l=o[d].negativeValues;n.isDatasetVisible(r)&&i(s)&&le.each(a.data,function(n,a){var r=+e.getRightValue(n);isNaN(r)||s.data[a].hidden||(u[a]=u[a]||0,l[a]=l[a]||0,t.relativePoints?u[a]=100:r<0?l[a]+=r:u[a]+=r)})}),le.each(o,function(t){var n=t.positiveValues.concat(t.negativeValues),a=le.min(n),r=le.max(n);e.min=null===e.min?a:Math.min(e.min,a),e.max=null===e.max?r:Math.max(e.max,r)})}else le.each(a,function(t,a){var r=n.getDatasetMeta(a);n.isDatasetVisible(a)&&i(r)&&le.each(t.data,function(t,n){var a=+e.getRightValue(t);isNaN(a)||r.data[n].hidden||(null===e.min?e.min=a:a<e.min&&(e.min=a),null===e.max?e.max=a:a>e.max&&(e.max=a))})});e.min=isFinite(e.min)&&!isNaN(e.min)?e.min:0,e.max=isFinite(e.max)&&!isNaN(e.max)?e.max:1,this.handleTickRangeOptions()},_computeTickLimit:function(){var e;return this.isHorizontal()?Math.ceil(this.width/40):(e=le.options._parseFont(this.options.ticks),Math.ceil(this.height/e.lineHeight))},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},getPixelForValue:function(e){var t=this,n=t.start,a=+t.getRightValue(e),r=t.end-n;return t.isHorizontal()?t.left+t.width/r*(a-n):t.bottom-t.height/r*(a-n)},getValueForPixel:function(e){var t=this,n=t.isHorizontal(),a=n?t.width:t.height,r=(n?e-t.left:t.bottom-e)/a;return t.start+(t.end-t.start)*r},getPixelForTick:function(e){return this.getPixelForValue(this.ticksAsNumbers[e])}}),kn=Ln;Yn._defaults=kn;var bn=le.valueOrDefault,Dn={position:"left",ticks:{callback:ln.formatters.logarithmic}};function wn(e,t){return le.isFinite(e)&&e>=0?e:t}var Tn=fn.extend({determineDataLimits:function(){var e=this,t=e.options,n=e.chart,a=n.data.datasets,r=e.isHorizontal();function i(t){return r?t.xAxisID===e.id:t.yAxisID===e.id}e.min=null,e.max=null,e.minNotZero=null;var s=t.stacked;if(void 0===s&&le.each(a,function(e,t){if(!s){var a=n.getDatasetMeta(t);n.isDatasetVisible(t)&&i(a)&&void 0!==a.stack&&(s=!0)}}),t.stacked||s){var o={};le.each(a,function(a,r){var s=n.getDatasetMeta(r),d=[s.type,void 0===t.stacked&&void 0===s.stack?r:"",s.stack].join(".");n.isDatasetVisible(r)&&i(s)&&(void 0===o[d]&&(o[d]=[]),le.each(a.data,function(t,n){var a=o[d],r=+e.getRightValue(t);isNaN(r)||s.data[n].hidden||r<0||(a[n]=a[n]||0,a[n]+=r)}))}),le.each(o,function(t){if(t.length>0){var n=le.min(t),a=le.max(t);e.min=null===e.min?n:Math.min(e.min,n),e.max=null===e.max?a:Math.max(e.max,a)}})}else le.each(a,function(t,a){var r=n.getDatasetMeta(a);n.isDatasetVisible(a)&&i(r)&&le.each(t.data,function(t,n){var a=+e.getRightValue(t);isNaN(a)||r.data[n].hidden||a<0||(null===e.min?e.min=a:a<e.min&&(e.min=a),null===e.max?e.max=a:a>e.max&&(e.max=a),0!==a&&(null===e.minNotZero||a<e.minNotZero)&&(e.minNotZero=a))})});this.handleTickRangeOptions()},handleTickRangeOptions:function(){var e=this,t=e.options.ticks;e.min=wn(t.min,e.min),e.max=wn(t.max,e.max),e.min===e.max&&(0!==e.min&&null!==e.min?(e.min=Math.pow(10,Math.floor(le.log10(e.min))-1),e.max=Math.pow(10,Math.floor(le.log10(e.max))+1)):(e.min=1,e.max=10)),null===e.min&&(e.min=Math.pow(10,Math.floor(le.log10(e.max))-1)),null===e.max&&(e.max=0!==e.min?Math.pow(10,Math.floor(le.log10(e.min))+1):10),null===e.minNotZero&&(e.min>0?e.minNotZero=e.min:e.max<1?e.minNotZero=Math.pow(10,Math.floor(le.log10(e.max))):e.minNotZero=1)},buildTicks:function(){var e=this,t=e.options.ticks,n=!e.isHorizontal(),a={min:wn(t.min),max:wn(t.max)},r=e.ticks=function(e,t){var n,a,r=[],i=bn(e.min,Math.pow(10,Math.floor(le.log10(t.min)))),s=Math.floor(le.log10(t.max)),o=Math.ceil(t.max/Math.pow(10,s));0===i?(n=Math.floor(le.log10(t.minNotZero)),a=Math.floor(t.minNotZero/Math.pow(10,n)),r.push(i),i=a*Math.pow(10,n)):(n=Math.floor(le.log10(i)),a=Math.floor(i/Math.pow(10,n)));var d=n<0?Math.pow(10,Math.abs(n)):1;do{r.push(i),10==++a&&(a=1,d=++n>=0?1:d),i=Math.round(a*Math.pow(10,n)*d)/d}while(n<s||n===s&&a<o);var u=bn(e.max,i);return r.push(u),r}(a,e);e.max=le.max(r),e.min=le.min(r),t.reverse?(n=!n,e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),n&&r.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),fn.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},getPixelForTick:function(e){return this.getPixelForValue(this.tickValues[e])},_getFirstTickValue:function(e){var t=Math.floor(le.log10(e));return Math.floor(e/Math.pow(10,t))*Math.pow(10,t)},getPixelForValue:function(e){var t,n,a,r,i,s=this,o=s.options.ticks,d=o.reverse,u=le.log10,l=s._getFirstTickValue(s.minNotZero),_=0;return e=+s.getRightValue(e),d?(a=s.end,r=s.start,i=-1):(a=s.start,r=s.end,i=1),s.isHorizontal()?(t=s.width,n=d?s.right:s.left):(t=s.height,i*=-1,n=d?s.top:s.bottom),e!==a&&(0===a&&(t-=_=bn(o.fontSize,oe.global.defaultFontSize),a=l),0!==e&&(_+=t/(u(r)-u(a))*(u(e)-u(a))),n+=i*_),n},getValueForPixel:function(e){var t,n,a,r,i=this,s=i.options.ticks,o=s.reverse,d=le.log10,u=i._getFirstTickValue(i.minNotZero);if(o?(n=i.end,a=i.start):(n=i.start,a=i.end),i.isHorizontal()?(t=i.width,r=o?i.right-e:e-i.left):(t=i.height,r=o?e-i.top:i.bottom-e),r!==n){if(0===n){var l=bn(s.fontSize,oe.global.defaultFontSize);r-=l,t-=l,n=u}r*=d(a)-d(n),r/=t,r=Math.pow(10,d(n)+r)}return r}}),xn=Dn;Tn._defaults=xn;var Sn=le.valueOrDefault,Hn=le.valueAtIndexOrDefault,jn=le.options.resolve,Pn={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,borderDash:[],borderDashOffset:0},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:ln.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(e){return e}}};function On(e){var t=e.options;return t.angleLines.display||t.pointLabels.display?e.chart.data.labels.length:0}function An(e){var t=e.ticks;return t.display&&e.display?Sn(t.fontSize,oe.global.defaultFontSize)+2*t.backdropPaddingY:0}function Wn(e,t,n,a,r){return e===a||e===r?{start:t-n/2,end:t+n/2}:e<a||e>r?{start:t-n,end:t}:{start:t,end:t+n}}function Fn(e){return 0===e||180===e?"center":e<180?"left":"right"}function Cn(e,t,n,a){var r,i,s=n.y+a/2;if(le.isArray(t))for(r=0,i=t.length;r<i;++r)e.fillText(t[r],n.x,s),s+=a;else e.fillText(t,n.x,s)}function In(e,t,n){90===e||270===e?n.y-=t.h/2:(e>270||e<90)&&(n.y-=t.h)}function En(e){return le.isNumber(e)?e:0}var zn=vn.extend({setDimensions:function(){var e=this;e.width=e.maxWidth,e.height=e.maxHeight,e.paddingTop=An(e.options)/2,e.xCenter=Math.floor(e.width/2),e.yCenter=Math.floor((e.height-e.paddingTop)/2),e.drawingArea=Math.min(e.height-e.paddingTop,e.width)/2},determineDataLimits:function(){var e=this,t=e.chart,n=Number.POSITIVE_INFINITY,a=Number.NEGATIVE_INFINITY;le.each(t.data.datasets,function(r,i){if(t.isDatasetVisible(i)){var s=t.getDatasetMeta(i);le.each(r.data,function(t,r){var i=+e.getRightValue(t);isNaN(i)||s.data[r].hidden||(n=Math.min(i,n),a=Math.max(i,a))})}}),e.min=n===Number.POSITIVE_INFINITY?0:n,e.max=a===Number.NEGATIVE_INFINITY?0:a,e.handleTickRangeOptions()},_computeTickLimit:function(){return Math.ceil(this.drawingArea/An(this.options))},convertTicksToLabels:function(){var e=this;vn.prototype.convertTicksToLabels.call(e),e.pointLabels=e.chart.data.labels.map(e.options.pointLabels.callback,e)},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},fit:function(){var e=this.options;e.display&&e.pointLabels.display?function(e){var t,n,a,r=le.options._parseFont(e.options.pointLabels),i={l:0,r:e.width,t:0,b:e.height-e.paddingTop},s={};e.ctx.font=r.string,e._pointLabelSizes=[];var o,d,u,l=On(e);for(t=0;t<l;t++){a=e.getPointPosition(t,e.drawingArea+5),o=e.ctx,d=r.lineHeight,u=e.pointLabels[t]||"",n=le.isArray(u)?{w:le.longestText(o,o.font,u),h:u.length*d}:{w:o.measureText(u).width,h:d},e._pointLabelSizes[t]=n;var _=e.getIndexAngle(t),c=le.toDegrees(_)%360,h=Wn(c,a.x,n.w,0,180),m=Wn(c,a.y,n.h,90,270);h.start<i.l&&(i.l=h.start,s.l=_),h.end>i.r&&(i.r=h.end,s.r=_),m.start<i.t&&(i.t=m.start,s.t=_),m.end>i.b&&(i.b=m.end,s.b=_)}e.setReductions(e.drawingArea,i,s)}(this):this.setCenterPoint(0,0,0,0)},setReductions:function(e,t,n){var a=this,r=t.l/Math.sin(n.l),i=Math.max(t.r-a.width,0)/Math.sin(n.r),s=-t.t/Math.cos(n.t),o=-Math.max(t.b-(a.height-a.paddingTop),0)/Math.cos(n.b);r=En(r),i=En(i),s=En(s),o=En(o),a.drawingArea=Math.min(Math.floor(e-(r+i)/2),Math.floor(e-(s+o)/2)),a.setCenterPoint(r,i,s,o)},setCenterPoint:function(e,t,n,a){var r=this,i=r.width-t-r.drawingArea,s=e+r.drawingArea,o=n+r.drawingArea,d=r.height-r.paddingTop-a-r.drawingArea;r.xCenter=Math.floor((s+i)/2+r.left),r.yCenter=Math.floor((o+d)/2+r.top+r.paddingTop)},getIndexAngle:function(e){return e*(2*Math.PI/On(this))+(this.chart.options&&this.chart.options.startAngle?this.chart.options.startAngle:0)*Math.PI*2/360},getDistanceFromCenterForValue:function(e){var t=this;if(null===e)return 0;var n=t.drawingArea/(t.max-t.min);return t.options.ticks.reverse?(t.max-e)*n:(e-t.min)*n},getPointPosition:function(e,t){var n=this.getIndexAngle(e)-Math.PI/2;return{x:Math.cos(n)*t+this.xCenter,y:Math.sin(n)*t+this.yCenter}},getPointPositionForValue:function(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))},getBasePosition:function(){var e=this.min,t=this.max;return this.getPointPositionForValue(0,this.beginAtZero?0:e<0&&t<0?t:e>0&&t>0?e:0)},draw:function(){var e=this,t=e.options,n=t.gridLines,a=t.ticks;if(t.display){var r=e.ctx,i=this.getIndexAngle(0),s=le.options._parseFont(a);(t.angleLines.display||t.pointLabels.display)&&function(e){var t=e.ctx,n=e.options,a=n.angleLines,r=n.gridLines,i=n.pointLabels,s=Sn(a.lineWidth,r.lineWidth),o=Sn(a.color,r.color),d=An(n);t.save(),t.lineWidth=s,t.strokeStyle=o,t.setLineDash&&(t.setLineDash(jn([a.borderDash,r.borderDash,[]])),t.lineDashOffset=jn([a.borderDashOffset,r.borderDashOffset,0]));var u=e.getDistanceFromCenterForValue(n.ticks.reverse?e.min:e.max),l=le.options._parseFont(i);t.font=l.string,t.textBaseline="middle";for(var _=On(e)-1;_>=0;_--){if(a.display&&s&&o){var c=e.getPointPosition(_,u);t.beginPath(),t.moveTo(e.xCenter,e.yCenter),t.lineTo(c.x,c.y),t.stroke()}if(i.display){var h=0===_?d/2:0,m=e.getPointPosition(_,u+h+5),f=Hn(i.fontColor,_,oe.global.defaultFontColor);t.fillStyle=f;var p=e.getIndexAngle(_),M=le.toDegrees(p);t.textAlign=Fn(M),In(M,e._pointLabelSizes[_],m),Cn(t,e.pointLabels[_]||"",m,l.lineHeight)}}t.restore()}(e),le.each(e.ticks,function(t,o){if(o>0||a.reverse){var d=e.getDistanceFromCenterForValue(e.ticksAsNumbers[o]);if(n.display&&0!==o&&function(e,t,n,a){var r,i=e.ctx,s=t.circular,o=On(e),d=Hn(t.color,a-1),u=Hn(t.lineWidth,a-1);if((s||o)&&d&&u){if(i.save(),i.strokeStyle=d,i.lineWidth=u,i.setLineDash&&(i.setLineDash(t.borderDash||[]),i.lineDashOffset=t.borderDashOffset||0),i.beginPath(),s)i.arc(e.xCenter,e.yCenter,n,0,2*Math.PI);else{r=e.getPointPosition(0,n),i.moveTo(r.x,r.y);for(var l=1;l<o;l++)r=e.getPointPosition(l,n),i.lineTo(r.x,r.y)}i.closePath(),i.stroke(),i.restore()}}(e,n,d,o),a.display){var u=Sn(a.fontColor,oe.global.defaultFontColor);if(r.font=s.string,r.save(),r.translate(e.xCenter,e.yCenter),r.rotate(i),a.showLabelBackdrop){var l=r.measureText(t).width;r.fillStyle=a.backdropColor,r.fillRect(-l/2-a.backdropPaddingX,-d-s.size/2-a.backdropPaddingY,l+2*a.backdropPaddingX,s.size+2*a.backdropPaddingY)}r.textAlign="center",r.textBaseline="middle",r.fillStyle=u,r.fillText(t,0,-d),r.restore()}}})}}}),Rn=Pn;zn._defaults=Rn;var Nn=le.valueOrDefault,Bn=Number.MIN_SAFE_INTEGER||-9007199254740991,Vn=Number.MAX_SAFE_INTEGER||9007199254740991,Jn={millisecond:{common:!0,size:1,steps:[1,2,5,10,20,50,100,250,500]},second:{common:!0,size:1e3,steps:[1,2,5,10,15,30]},minute:{common:!0,size:6e4,steps:[1,2,5,10,15,30]},hour:{common:!0,size:36e5,steps:[1,2,3,6,12]},day:{common:!0,size:864e5,steps:[1,2,5]},week:{common:!1,size:6048e5,steps:[1,2,3,4]},month:{common:!0,size:2628e6,steps:[1,2,3]},quarter:{common:!1,size:7884e6,steps:[1,2,3,4]},year:{common:!0,size:3154e7}},Un=Object.keys(Jn);function Gn(e,t){return e-t}function qn(e){var t,n,a,r={},i=[];for(t=0,n=e.length;t<n;++t)r[a=e[t]]||(r[a]=!0,i.push(a));return i}function $n(e,t,n,a){var r=function(e,t,n){for(var a,r,i,s=0,o=e.length-1;s>=0&&s<=o;){if(r=e[(a=s+o>>1)-1]||null,i=e[a],!r)return{lo:null,hi:i};if(i[t]<n)s=a+1;else{if(!(r[t]>n))return{lo:r,hi:i};o=a-1}}return{lo:i,hi:null}}(e,t,n),i=r.lo?r.hi?r.lo:e[e.length-2]:e[0],s=r.lo?r.hi?r.hi:e[e.length-1]:e[1],o=s[t]-i[t],d=o?(n-i[t])/o:0,u=(s[a]-i[a])*d;return i[a]+u}function Kn(e,t){var n=e._adapter,a=e.options.time,r=a.parser,i=r||a.format,s=t;return"function"==typeof r&&(s=r(s)),le.isFinite(s)||(s="string"==typeof i?n.parse(s,i):n.parse(s)),null!==s?+s:(r||"function"!=typeof i||(s=i(t),le.isFinite(s)||(s=n.parse(s))),s)}function Zn(e,t){if(le.isNullOrUndef(t))return null;var n=e.options.time,a=Kn(e,e.getRightValue(t));return null===a?a:(n.round&&(a=+e._adapter.startOf(a,n.round)),a)}function Xn(e){for(var t=Un.indexOf(e)+1,n=Un.length;t<n;++t)if(Jn[Un[t]].common)return Un[t]}function Qn(e,t,n,a){var r,i=e._adapter,s=e.options,o=s.time,d=o.unit||function(e,t,n,a){var r,i,s,o=Un.length;for(r=Un.indexOf(e);r<o-1;++r)if(s=(i=Jn[Un[r]]).steps?i.steps[i.steps.length-1]:Vn,i.common&&Math.ceil((n-t)/(s*i.size))<=a)return Un[r];return Un[o-1]}(o.minUnit,t,n,a),u=Xn(d),l=Nn(o.stepSize,o.unitStepSize),_="week"===d&&o.isoWeekday,c=s.ticks.major.enabled,h=Jn[d],m=t,f=n,p=[];for(l||(l=function(e,t,n,a){var r,i,s,o=t-e,d=Jn[n],u=d.size,l=d.steps;if(!l)return Math.ceil(o/(a*u));for(r=0,i=l.length;r<i&&(s=l[r],!(Math.ceil(o/(u*s))<=a));++r);return s}(t,n,d,a)),_&&(m=+i.startOf(m,"isoWeek",_),f=+i.startOf(f,"isoWeek",_)),m=+i.startOf(m,_?"day":d),(f=+i.startOf(f,_?"day":d))<n&&(f=+i.add(f,1,d)),r=m,c&&u&&!_&&!o.round&&(r=+i.startOf(r,u),r=+i.add(r,~~((m-r)/(h.size*l))*l,d));r<f;r=+i.add(r,l,d))p.push(+r);return p.push(+r),p}var ea=fn.extend({initialize:function(){this.mergeTicksOptions(),fn.prototype.initialize.call(this)},update:function(){var e=this,t=e.options,n=t.time||(t.time={}),a=e._adapter=new un._date(t.adapters.date);return n.format&&console.warn("options.time.format is deprecated and replaced by options.time.parser."),le.mergeIf(n.displayFormats,a.formats()),fn.prototype.update.apply(e,arguments)},getRightValue:function(e){return e&&void 0!==e.t&&(e=e.t),fn.prototype.getRightValue.call(this,e)},determineDataLimits:function(){var e,t,n,a,r,i,s=this,o=s.chart,d=s._adapter,u=s.options.time,l=u.unit||"day",_=Vn,c=Bn,h=[],m=[],f=[],p=o.data.labels||[];for(e=0,n=p.length;e<n;++e)f.push(Zn(s,p[e]));for(e=0,n=(o.data.datasets||[]).length;e<n;++e)if(o.isDatasetVisible(e))if(r=o.data.datasets[e].data,le.isObject(r[0]))for(m[e]=[],t=0,a=r.length;t<a;++t)i=Zn(s,r[t]),h.push(i),m[e][t]=i;else{for(t=0,a=f.length;t<a;++t)h.push(f[t]);m[e]=f.slice(0)}else m[e]=[];f.length&&(f=qn(f).sort(Gn),_=Math.min(_,f[0]),c=Math.max(c,f[f.length-1])),h.length&&(h=qn(h).sort(Gn),_=Math.min(_,h[0]),c=Math.max(c,h[h.length-1])),_=Zn(s,u.min)||_,c=Zn(s,u.max)||c,_=_===Vn?+d.startOf(Date.now(),l):_,c=c===Bn?+d.endOf(Date.now(),l)+1:c,s.min=Math.min(_,c),s.max=Math.max(_+1,c),s._horizontal=s.isHorizontal(),s._table=[],s._timestamps={data:h,datasets:m,labels:f}},buildTicks:function(){var e,t,n,a=this,r=a.min,i=a.max,s=a.options,o=s.time,d=[],u=[];switch(s.ticks.source){case"data":d=a._timestamps.data;break;case"labels":d=a._timestamps.labels;break;case"auto":default:d=Qn(a,r,i,a.getLabelCapacity(r))}for("ticks"===s.bounds&&d.length&&(r=d[0],i=d[d.length-1]),r=Zn(a,o.min)||r,i=Zn(a,o.max)||i,e=0,t=d.length;e<t;++e)(n=d[e])>=r&&n<=i&&u.push(n);return a.min=r,a.max=i,a._unit=o.unit||function(e,t,n,a,r){var i,s;for(i=Un.length-1;i>=Un.indexOf(n);i--)if(s=Un[i],Jn[s].common&&e._adapter.diff(r,a,s)>=t.length)return s;return Un[n?Un.indexOf(n):0]}(a,u,o.minUnit,a.min,a.max),a._majorUnit=Xn(a._unit),a._table=function(e,t,n,a){if("linear"===a||!e.length)return[{time:t,pos:0},{time:n,pos:1}];var r,i,s,o,d,u=[],l=[t];for(r=0,i=e.length;r<i;++r)(o=e[r])>t&&o<n&&l.push(o);for(l.push(n),r=0,i=l.length;r<i;++r)d=l[r+1],s=l[r-1],o=l[r],void 0!==s&&void 0!==d&&Math.round((d+s)/2)===o||u.push({time:o,pos:r/(i-1)});return u}(a._timestamps.data,r,i,s.distribution),a._offsets=function(e,t,n,a,r){var i,s,o=0,d=0;return r.offset&&t.length&&(r.time.min||(i=$n(e,"time",t[0],"pos"),o=1===t.length?1-i:($n(e,"time",t[1],"pos")-i)/2),r.time.max||(s=$n(e,"time",t[t.length-1],"pos"),d=1===t.length?s:(s-$n(e,"time",t[t.length-2],"pos"))/2)),{start:o,end:d}}(a._table,u,0,0,s),s.ticks.reverse&&u.reverse(),function(e,t,n){var a,r,i,s,o=[];for(a=0,r=t.length;a<r;++a)i=t[a],s=!!n&&i===+e._adapter.startOf(i,n),o.push({value:i,major:s});return o}(a,u,a._majorUnit)},getLabelForIndex:function(e,t){var n=this,a=n._adapter,r=n.chart.data,i=n.options.time,s=r.labels&&e<r.labels.length?r.labels[e]:"",o=r.datasets[t].data[e];return le.isObject(o)&&(s=n.getRightValue(o)),i.tooltipFormat?a.format(Kn(n,s),i.tooltipFormat):"string"==typeof s?s:a.format(Kn(n,s),i.displayFormats.datetime)},tickFormatFunction:function(e,t,n,a){var r=this._adapter,i=this.options,s=i.time.displayFormats,o=s[this._unit],d=this._majorUnit,u=s[d],l=+r.startOf(e,d),_=i.ticks.major,c=_.enabled&&d&&u&&e===l,h=r.format(e,a||(c?u:o)),m=c?_:i.ticks.minor,f=Nn(m.callback,m.userCallback);return f?f(h,t,n):h},convertTicksToLabels:function(e){var t,n,a=[];for(t=0,n=e.length;t<n;++t)a.push(this.tickFormatFunction(e[t].value,t,e));return a},getPixelForOffset:function(e){var t=this,n=t.options.ticks.reverse,a=t._horizontal?t.width:t.height,r=t._horizontal?n?t.right:t.left:n?t.bottom:t.top,i=$n(t._table,"time",e,"pos"),s=a*(t._offsets.start+i)/(t._offsets.start+1+t._offsets.end);return n?r-s:r+s},getPixelForValue:function(e,t,n){var a=null;if(void 0!==t&&void 0!==n&&(a=this._timestamps.datasets[n][t]),null===a&&(a=Zn(this,e)),null!==a)return this.getPixelForOffset(a)},getPixelForTick:function(e){var t=this.getTicks();return e>=0&&e<t.length?this.getPixelForOffset(t[e].value):null},getValueForPixel:function(e){var t=this,n=t._horizontal?t.width:t.height,a=t._horizontal?t.left:t.top,r=(n?(e-a)/n:0)*(t._offsets.start+1+t._offsets.start)-t._offsets.end,i=$n(t._table,"pos",r,"time");return t._adapter._create(i)},getLabelWidth:function(e){var t=this.options.ticks,n=this.ctx.measureText(e).width,a=le.toRadians(t.maxRotation),r=Math.cos(a),i=Math.sin(a);return n*r+Nn(t.fontSize,oe.global.defaultFontSize)*i},getLabelCapacity:function(e){var t=this,n=t.options.time.displayFormats.millisecond,a=t.tickFormatFunction(e,0,[],n),r=t.getLabelWidth(a),i=t.isHorizontal()?t.width:t.height,s=Math.floor(i/r);return s>0?s:1}}),ta={position:"bottom",distribution:"linear",bounds:"data",adapters:{},time:{parser:!1,format:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}};ea._defaults=ta;var na={category:pn,linear:Yn,logarithmic:Tn,radialLinear:zn,time:ea},aa={datetime:"MMM D, YYYY, h:mm:ss a",millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"};un._date.override("function"==typeof e?{_id:"moment",formats:function(){return aa},parse:function(t,n){return"string"==typeof t&&"string"==typeof n?t=e(t,n):t instanceof e||(t=e(t)),t.isValid()?t.valueOf():null},format:function(t,n){return e(t).format(n)},add:function(t,n,a){return e(t).add(n,a).valueOf()},diff:function(t,n,a){return e.duration(e(t).diff(e(n))).as(a)},startOf:function(t,n,a){return t=e(t),"isoWeek"===n?t.isoWeekday(a).valueOf():t.startOf(n).valueOf()},endOf:function(t,n){return e(t).endOf(n).valueOf()},_create:function(t){return e(t)}}:{}),oe._set("global",{plugins:{filler:{propagate:!0}}});var ra={dataset:function(e){var t=e.fill,n=e.chart,a=n.getDatasetMeta(t),r=a&&n.isDatasetVisible(t)&&a.dataset._children||[],i=r.length||0;return i?function(e,t){return t<i&&r[t]._view||null}:null},boundary:function(e){var t=e.boundary,n=t?t.x:null,a=t?t.y:null;return function(e){return{x:null===n?e.x:n,y:null===a?e.y:a}}}};function ia(e,t,n){var a,r=e._model||{},i=r.fill;if(void 0===i&&(i=!!r.backgroundColor),!1===i||null===i)return!1;if(!0===i)return"origin";if(a=parseFloat(i,10),isFinite(a)&&Math.floor(a)===a)return"-"!==i[0]&&"+"!==i[0]||(a=t+a),!(a===t||a<0||a>=n)&&a;switch(i){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return i;default:return!1}}function sa(e){var t,n=e.el._model||{},a=e.el._scale||{},r=e.fill,i=null;if(isFinite(r))return null;if("start"===r?i=void 0===n.scaleBottom?a.bottom:n.scaleBottom:"end"===r?i=void 0===n.scaleTop?a.top:n.scaleTop:void 0!==n.scaleZero?i=n.scaleZero:a.getBasePosition?i=a.getBasePosition():a.getBasePixel&&(i=a.getBasePixel()),null!=i){if(void 0!==i.x&&void 0!==i.y)return i;if(le.isFinite(i))return{x:(t=a.isHorizontal())?i:null,y:t?null:i}}return null}function oa(e,t,n){var a,r=e[t].fill,i=[t];if(!n)return r;for(;!1!==r&&-1===i.indexOf(r);){if(!isFinite(r))return r;if(!(a=e[r]))return!1;if(a.visible)return r;i.push(r),r=a.fill}return!1}function da(e){var t=e.fill,n="dataset";return!1===t?null:(isFinite(t)||(n="boundary"),ra[n](e))}function ua(e){return e&&!e.skip}function la(e,t,n,a,r){var i;if(a&&r){for(e.moveTo(t[0].x,t[0].y),i=1;i<a;++i)le.canvas.lineTo(e,t[i-1],t[i]);for(e.lineTo(n[r-1].x,n[r-1].y),i=r-1;i>0;--i)le.canvas.lineTo(e,n[i],n[i-1],!0)}}var _a={id:"filler",afterDatasetsUpdate:function(e,t){var n,a,r,i,s=(e.data.datasets||[]).length,o=t.propagate,d=[];for(a=0;a<s;++a)i=null,(r=(n=e.getDatasetMeta(a)).dataset)&&r._model&&r instanceof Ee.Line&&(i={visible:e.isDatasetVisible(a),fill:ia(r,a,s),chart:e,el:r}),n.$filler=i,d.push(i);for(a=0;a<s;++a)(i=d[a])&&(i.fill=oa(d,a,o),i.boundary=sa(i),i.mapper=da(i))},beforeDatasetDraw:function(e,t){var n=t.meta.$filler;if(n){var a=e.ctx,r=n.el,i=r._view,s=r._children||[],o=n.mapper,d=i.backgroundColor||oe.global.defaultColor;o&&d&&s.length&&(le.canvas.clipArea(a,e.chartArea),function(e,t,n,a,r,i){var s,o,d,u,l,_,c,h=t.length,m=a.spanGaps,f=[],p=[],M=0,y=0;for(e.beginPath(),s=0,o=h+!!i;s<o;++s)l=n(u=t[d=s%h]._view,d,a),_=ua(u),c=ua(l),_&&c?(M=f.push(u),y=p.push(l)):M&&y&&(m?(_&&f.push(u),c&&p.push(l)):(la(e,f,p,M,y),M=y=0,f=[],p=[]));la(e,f,p,M,y),e.closePath(),e.fillStyle=r,e.fill()}(a,s,o,i,d,r._loop),le.canvas.unclipArea(a))}}},ca=le.noop,ha=le.valueOrDefault;function ma(e,t){return e.usePointStyle&&e.boxWidth>t?t:e.boxWidth}oe._set("global",{legend:{display:!0,position:"top",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(e,t){var n=t.datasetIndex,a=this.chart,r=a.getDatasetMeta(n);r.hidden=null===r.hidden?!a.data.datasets[n].hidden:null,a.update()},onHover:null,onLeave:null,labels:{boxWidth:40,padding:10,generateLabels:function(e){var t=e.data;return le.isArray(t.datasets)?t.datasets.map(function(t,n){return{text:t.label,fillStyle:le.isArray(t.backgroundColor)?t.backgroundColor[0]:t.backgroundColor,hidden:!e.isDatasetVisible(n),lineCap:t.borderCapStyle,lineDash:t.borderDash,lineDashOffset:t.borderDashOffset,lineJoin:t.borderJoinStyle,lineWidth:t.borderWidth,strokeStyle:t.borderColor,pointStyle:t.pointStyle,datasetIndex:n}},this):[]}}},legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');for(var n=0;n<e.data.datasets.length;n++)t.push('<li><span style="background-color:'+e.data.datasets[n].backgroundColor+'"></span>'),e.data.datasets[n].label&&t.push(e.data.datasets[n].label),t.push("</li>");return t.push("</ul>"),t.join("")}});var fa=fe.extend({initialize:function(e){le.extend(this,e),this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1},beforeUpdate:ca,update:function(e,t,n){var a=this;return a.beforeUpdate(),a.maxWidth=e,a.maxHeight=t,a.margins=n,a.beforeSetDimensions(),a.setDimensions(),a.afterSetDimensions(),a.beforeBuildLabels(),a.buildLabels(),a.afterBuildLabels(),a.beforeFit(),a.fit(),a.afterFit(),a.afterUpdate(),a.minSize},afterUpdate:ca,beforeSetDimensions:ca,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:ca,beforeBuildLabels:ca,buildLabels:function(){var e=this,t=e.options.labels||{},n=le.callback(t.generateLabels,[e.chart],e)||[];t.filter&&(n=n.filter(function(n){return t.filter(n,e.chart.data)})),e.options.reverse&&n.reverse(),e.legendItems=n},afterBuildLabels:ca,beforeFit:ca,fit:function(){var e=this,t=e.options,n=t.labels,a=t.display,r=e.ctx,i=le.options._parseFont(n),s=i.size,o=e.legendHitBoxes=[],d=e.minSize,u=e.isHorizontal();if(u?(d.width=e.maxWidth,d.height=a?10:0):(d.width=a?10:0,d.height=e.maxHeight),a)if(r.font=i.string,u){var l=e.lineWidths=[0],_=0;r.textAlign="left",r.textBaseline="top",le.each(e.legendItems,function(e,t){var a=ma(n,s)+s/2+r.measureText(e.text).width;(0===t||l[l.length-1]+a+n.padding>d.width)&&(_+=s+n.padding,l[l.length-(t>0?0:1)]=n.padding),o[t]={left:0,top:0,width:a,height:s},l[l.length-1]+=a+n.padding}),d.height+=_}else{var c=n.padding,h=e.columnWidths=[],m=n.padding,f=0,p=0,M=s+c;le.each(e.legendItems,function(e,t){var a=ma(n,s)+s/2+r.measureText(e.text).width;t>0&&p+M>d.height-c&&(m+=f+n.padding,h.push(f),f=0,p=0),f=Math.max(f,a),p+=M,o[t]={left:0,top:0,width:a,height:s}}),m+=f,h.push(f),d.width+=m}e.width=d.width,e.height=d.height},afterFit:ca,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var e=this,t=e.options,n=t.labels,a=oe.global,r=a.defaultColor,i=a.elements.line,s=e.width,o=e.lineWidths;if(t.display){var d,u=e.ctx,l=ha(n.fontColor,a.defaultFontColor),_=le.options._parseFont(n),c=_.size;u.textAlign="left",u.textBaseline="middle",u.lineWidth=.5,u.strokeStyle=l,u.fillStyle=l,u.font=_.string;var h=ma(n,c),m=e.legendHitBoxes,f=e.isHorizontal();d=f?{x:e.left+(s-o[0])/2+n.padding,y:e.top+n.padding,line:0}:{x:e.left+n.padding,y:e.top+n.padding,line:0};var p=c+n.padding;le.each(e.legendItems,function(a,l){var _=u.measureText(a.text).width,M=h+c/2+_,y=d.x,g=d.y;f?l>0&&y+M+n.padding>e.left+e.minSize.width&&(g=d.y+=p,d.line++,y=d.x=e.left+(s-o[d.line])/2+n.padding):l>0&&g+p>e.top+e.minSize.height&&(y=d.x=y+e.columnWidths[d.line]+n.padding,g=d.y=e.top+n.padding,d.line++),function(e,n,a){if(!(isNaN(h)||h<=0)){u.save();var s=ha(a.lineWidth,i.borderWidth);if(u.fillStyle=ha(a.fillStyle,r),u.lineCap=ha(a.lineCap,i.borderCapStyle),u.lineDashOffset=ha(a.lineDashOffset,i.borderDashOffset),u.lineJoin=ha(a.lineJoin,i.borderJoinStyle),u.lineWidth=s,u.strokeStyle=ha(a.strokeStyle,r),u.setLineDash&&u.setLineDash(ha(a.lineDash,i.borderDash)),t.labels&&t.labels.usePointStyle){var o=h*Math.SQRT2/2,d=e+h/2,l=n+c/2;le.canvas.drawPoint(u,a.pointStyle,o,d,l)}else 0!==s&&u.strokeRect(e,n,h,c),u.fillRect(e,n,h,c);u.restore()}}(y,g,a),m[l].left=y,m[l].top=g,function(e,t,n,a){var r=c/2,i=h+r+e,s=t+r;u.fillText(n.text,i,s),n.hidden&&(u.beginPath(),u.lineWidth=2,u.moveTo(i,s),u.lineTo(i+a,s),u.stroke())}(y,g,a,_),f?d.x+=M+n.padding:d.y+=p})}},_getLegendItemAt:function(e,t){var n,a,r,i=this;if(e>=i.left&&e<=i.right&&t>=i.top&&t<=i.bottom)for(r=i.legendHitBoxes,n=0;n<r.length;++n)if(e>=(a=r[n]).left&&e<=a.left+a.width&&t>=a.top&&t<=a.top+a.height)return i.legendItems[n];return null},handleEvent:function(e){var t,n=this,a=n.options,r="mouseup"===e.type?"click":e.type;if("mousemove"===r){if(!a.onHover&&!a.onLeave)return}else{if("click"!==r)return;if(!a.onClick)return}t=n._getLegendItemAt(e.x,e.y),"click"===r?t&&a.onClick&&a.onClick.call(n,e.native,t):(a.onLeave&&t!==n._hoveredItem&&(n._hoveredItem&&a.onLeave.call(n,e.native,n._hoveredItem),n._hoveredItem=t),a.onHover&&t&&a.onHover.call(n,e.native,t))}});function pa(e,t){var n=new fa({ctx:e.ctx,options:t,chart:e});Yt.configure(e,n,t),Yt.addBox(e,n),e.legend=n}var Ma={id:"legend",_element:fa,beforeInit:function(e){var t=e.options.legend;t&&pa(e,t)},beforeUpdate:function(e){var t=e.options.legend,n=e.legend;t?(le.mergeIf(t,oe.global.legend),n?(Yt.configure(e,n,t),n.options=t):pa(e,t)):n&&(Yt.removeBox(e,n),delete e.legend)},afterEvent:function(e,t){var n=e.legend;n&&n.handleEvent(t)}},ya=le.noop;oe._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,padding:10,position:"top",text:"",weight:2e3}});var ga=fe.extend({initialize:function(e){le.extend(this,e),this.legendHitBoxes=[]},beforeUpdate:ya,update:function(e,t,n){var a=this;return a.beforeUpdate(),a.maxWidth=e,a.maxHeight=t,a.margins=n,a.beforeSetDimensions(),a.setDimensions(),a.afterSetDimensions(),a.beforeBuildLabels(),a.buildLabels(),a.afterBuildLabels(),a.beforeFit(),a.fit(),a.afterFit(),a.afterUpdate(),a.minSize},afterUpdate:ya,beforeSetDimensions:ya,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:ya,beforeBuildLabels:ya,buildLabels:ya,afterBuildLabels:ya,beforeFit:ya,fit:function(){var e=this,t=e.options,n=t.display,a=e.minSize,r=le.isArray(t.text)?t.text.length:1,i=le.options._parseFont(t),s=n?r*i.lineHeight+2*t.padding:0;e.isHorizontal()?(a.width=e.maxWidth,a.height=s):(a.width=s,a.height=e.maxHeight),e.width=a.width,e.height=a.height},afterFit:ya,isHorizontal:function(){var e=this.options.position;return"top"===e||"bottom"===e},draw:function(){var e=this,t=e.ctx,n=e.options;if(n.display){var a,r,i,s=le.options._parseFont(n),o=s.lineHeight,d=o/2+n.padding,u=0,l=e.top,_=e.left,c=e.bottom,h=e.right;t.fillStyle=le.valueOrDefault(n.fontColor,oe.global.defaultFontColor),t.font=s.string,e.isHorizontal()?(r=_+(h-_)/2,i=l+d,a=h-_):(r="left"===n.position?_+d:h-d,i=l+(c-l)/2,a=c-l,u=Math.PI*("left"===n.position?-.5:.5)),t.save(),t.translate(r,i),t.rotate(u),t.textAlign="center",t.textBaseline="middle";var m=n.text;if(le.isArray(m))for(var f=0,p=0;p<m.length;++p)t.fillText(m[p],0,f,a),f+=o;else t.fillText(m,0,0,a);t.restore()}}});function va(e,t){var n=new ga({ctx:e.ctx,options:t,chart:e});Yt.configure(e,n,t),Yt.addBox(e,n),e.titleBlock=n}var La={},Ya=_a,ka=Ma,ba={id:"title",_element:ga,beforeInit:function(e){var t=e.options.title;t&&va(e,t)},beforeUpdate:function(e){var t=e.options.title,n=e.titleBlock;t?(le.mergeIf(t,oe.global.title),n?(Yt.configure(e,n,t),n.options=t):va(e,t)):n&&(Yt.removeBox(e,n),delete e.titleBlock)}};for(var Da in La.filler=Ya,La.legend=ka,La.title=ba,sn.helpers=le,function(){function e(e,t,n){var a;return"string"==typeof e?(a=parseInt(e,10),-1!==e.indexOf("%")&&(a=a/100*t.parentNode[n])):a=e,a}function t(e){return null!=e&&"none"!==e}function n(n,a,r){var i=document.defaultView,s=le._getParentNode(n),o=i.getComputedStyle(n)[a],d=i.getComputedStyle(s)[a],u=t(o),l=t(d),_=Number.POSITIVE_INFINITY;return u||l?Math.min(u?e(o,n,r):_,l?e(d,s,r):_):"none"}le.where=function(e,t){if(le.isArray(e)&&Array.prototype.filter)return e.filter(t);var n=[];return le.each(e,function(e){t(e)&&n.push(e)}),n},le.findIndex=Array.prototype.findIndex?function(e,t,n){return e.findIndex(t,n)}:function(e,t,n){n=void 0===n?e:n;for(var a=0,r=e.length;a<r;++a)if(t.call(n,e[a],a,e))return a;return-1},le.findNextWhere=function(e,t,n){le.isNullOrUndef(n)&&(n=-1);for(var a=n+1;a<e.length;a++){var r=e[a];if(t(r))return r}},le.findPreviousWhere=function(e,t,n){le.isNullOrUndef(n)&&(n=e.length);for(var a=n-1;a>=0;a--){var r=e[a];if(t(r))return r}},le.isNumber=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},le.almostEquals=function(e,t,n){return Math.abs(e-t)<n},le.almostWhole=function(e,t){var n=Math.round(e);return n-t<e&&n+t>e},le.max=function(e){return e.reduce(function(e,t){return isNaN(t)?e:Math.max(e,t)},Number.NEGATIVE_INFINITY)},le.min=function(e){return e.reduce(function(e,t){return isNaN(t)?e:Math.min(e,t)},Number.POSITIVE_INFINITY)},le.sign=Math.sign?function(e){return Math.sign(e)}:function(e){return 0==(e=+e)||isNaN(e)?e:e>0?1:-1},le.log10=Math.log10?function(e){return Math.log10(e)}:function(e){var t=Math.log(e)*Math.LOG10E,n=Math.round(t);return e===Math.pow(10,n)?n:t},le.toRadians=function(e){return e*(Math.PI/180)},le.toDegrees=function(e){return e*(180/Math.PI)},le._decimalPlaces=function(e){if(le.isFinite(e)){for(var t=1,n=0;Math.round(e*t)/t!==e;)t*=10,n++;return n}},le.getAngleFromPoint=function(e,t){var n=t.x-e.x,a=t.y-e.y,r=Math.sqrt(n*n+a*a),i=Math.atan2(a,n);return i<-.5*Math.PI&&(i+=2*Math.PI),{angle:i,distance:r}},le.distanceBetweenPoints=function(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},le.aliasPixel=function(e){return e%2==0?0:.5},le._alignPixel=function(e,t,n){var a=e.currentDevicePixelRatio,r=n/2;return Math.round((t-r)*a)/a+r},le.splineCurve=function(e,t,n,a){var r=e.skip?t:e,i=t,s=n.skip?t:n,o=Math.sqrt(Math.pow(i.x-r.x,2)+Math.pow(i.y-r.y,2)),d=Math.sqrt(Math.pow(s.x-i.x,2)+Math.pow(s.y-i.y,2)),u=o/(o+d),l=d/(o+d),_=a*(u=isNaN(u)?0:u),c=a*(l=isNaN(l)?0:l);return{previous:{x:i.x-_*(s.x-r.x),y:i.y-_*(s.y-r.y)},next:{x:i.x+c*(s.x-r.x),y:i.y+c*(s.y-r.y)}}},le.EPSILON=Number.EPSILON||1e-14,le.splineCurveMonotone=function(e){var t,n,a,r,i,s,o,d,u,l=(e||[]).map(function(e){return{model:e._model,deltaK:0,mK:0}}),_=l.length;for(t=0;t<_;++t)if(!(a=l[t]).model.skip){if(n=t>0?l[t-1]:null,(r=t<_-1?l[t+1]:null)&&!r.model.skip){var c=r.model.x-a.model.x;a.deltaK=0!==c?(r.model.y-a.model.y)/c:0}!n||n.model.skip?a.mK=a.deltaK:!r||r.model.skip?a.mK=n.deltaK:this.sign(n.deltaK)!==this.sign(a.deltaK)?a.mK=0:a.mK=(n.deltaK+a.deltaK)/2}for(t=0;t<_-1;++t)a=l[t],r=l[t+1],a.model.skip||r.model.skip||(le.almostEquals(a.deltaK,0,this.EPSILON)?a.mK=r.mK=0:(i=a.mK/a.deltaK,s=r.mK/a.deltaK,(d=Math.pow(i,2)+Math.pow(s,2))<=9||(o=3/Math.sqrt(d),a.mK=i*o*a.deltaK,r.mK=s*o*a.deltaK)));for(t=0;t<_;++t)(a=l[t]).model.skip||(n=t>0?l[t-1]:null,r=t<_-1?l[t+1]:null,n&&!n.model.skip&&(u=(a.model.x-n.model.x)/3,a.model.controlPointPreviousX=a.model.x-u,a.model.controlPointPreviousY=a.model.y-u*a.mK),r&&!r.model.skip&&(u=(r.model.x-a.model.x)/3,a.model.controlPointNextX=a.model.x+u,a.model.controlPointNextY=a.model.y+u*a.mK))},le.nextItem=function(e,t,n){return n?t>=e.length-1?e[0]:e[t+1]:t>=e.length-1?e[e.length-1]:e[t+1]},le.previousItem=function(e,t,n){return n?t<=0?e[e.length-1]:e[t-1]:t<=0?e[0]:e[t-1]},le.niceNum=function(e,t){var n=Math.floor(le.log10(e)),a=e/Math.pow(10,n);return(t?a<1.5?1:a<3?2:a<7?5:10:a<=1?1:a<=2?2:a<=5?5:10)*Math.pow(10,n)},le.requestAnimFrame="undefined"==typeof window?function(e){e()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){return window.setTimeout(e,1e3/60)},le.getRelativePosition=function(e,t){var n,a,r=e.originalEvent||e,i=e.target||e.srcElement,s=i.getBoundingClientRect(),o=r.touches;o&&o.length>0?(n=o[0].clientX,a=o[0].clientY):(n=r.clientX,a=r.clientY);var d=parseFloat(le.getStyle(i,"padding-left")),u=parseFloat(le.getStyle(i,"padding-top")),l=parseFloat(le.getStyle(i,"padding-right")),_=parseFloat(le.getStyle(i,"padding-bottom")),c=s.right-s.left-d-l,h=s.bottom-s.top-u-_;return{x:n=Math.round((n-s.left-d)/c*i.width/t.currentDevicePixelRatio),y:a=Math.round((a-s.top-u)/h*i.height/t.currentDevicePixelRatio)}},le.getConstraintWidth=function(e){return n(e,"max-width","clientWidth")},le.getConstraintHeight=function(e){return n(e,"max-height","clientHeight")},le._calculatePadding=function(e,t,n){return(t=le.getStyle(e,t)).indexOf("%")>-1?n*parseInt(t,10)/100:parseInt(t,10)},le._getParentNode=function(e){var t=e.parentNode;return t&&"[object ShadowRoot]"===t.toString()&&(t=t.host),t},le.getMaximumWidth=function(e){var t=le._getParentNode(e);if(!t)return e.clientWidth;var n=t.clientWidth,a=n-le._calculatePadding(t,"padding-left",n)-le._calculatePadding(t,"padding-right",n),r=le.getConstraintWidth(e);return isNaN(r)?a:Math.min(a,r)},le.getMaximumHeight=function(e){var t=le._getParentNode(e);if(!t)return e.clientHeight;var n=t.clientHeight,a=n-le._calculatePadding(t,"padding-top",n)-le._calculatePadding(t,"padding-bottom",n),r=le.getConstraintHeight(e);return isNaN(r)?a:Math.min(a,r)},le.getStyle=function(e,t){return e.currentStyle?e.currentStyle[t]:document.defaultView.getComputedStyle(e,null).getPropertyValue(t)},le.retinaScale=function(e,t){var n=e.currentDevicePixelRatio=t||"undefined"!=typeof window&&window.devicePixelRatio||1;if(1!==n){var a=e.canvas,r=e.height,i=e.width;a.height=r*n,a.width=i*n,e.ctx.scale(n,n),a.style.height||a.style.width||(a.style.height=r+"px",a.style.width=i+"px")}},le.fontString=function(e,t,n){return t+" "+e+"px "+n},le.longestText=function(e,t,n,a){var r=(a=a||{}).data=a.data||{},i=a.garbageCollect=a.garbageCollect||[];a.font!==t&&(r=a.data={},i=a.garbageCollect=[],a.font=t),e.font=t;var s=0;le.each(n,function(t){null!=t&&!0!==le.isArray(t)?s=le.measureText(e,r,i,s,t):le.isArray(t)&&le.each(t,function(t){null==t||le.isArray(t)||(s=le.measureText(e,r,i,s,t))})});var o=i.length/2;if(o>n.length){for(var d=0;d<o;d++)delete r[i[d]];i.splice(0,o)}return s},le.measureText=function(e,t,n,a,r){var i=t[r];return i||(i=t[r]=e.measureText(r).width,n.push(r)),i>a&&(a=i),a},le.numberOfLabelLines=function(e){var t=1;return le.each(e,function(e){le.isArray(e)&&e.length>t&&(t=e.length)}),t},le.color=G?function(e){return e instanceof CanvasGradient&&(e=oe.global.defaultColor),G(e)}:function(e){return console.error("Color.js not found!"),e},le.getHoverColor=function(e){return e instanceof CanvasPattern||e instanceof CanvasGradient?e:le.color(e).saturate(.5).darken(.1).rgbString()}}(),sn._adapters=un,sn.Animation=Me,sn.animationService=ye,sn.controllers=lt,sn.DatasetController=ke,sn.defaults=oe,sn.Element=fe,sn.elements=Ee,sn.Interaction=Mt,sn.layouts=Yt,sn.platform=zt,sn.plugins=Rt,sn.Scale=fn,sn.scaleService=Nt,sn.Ticks=ln,sn.Tooltip=Xt,sn.helpers.each(na,function(e,t){sn.scaleService.registerScaleType(t,e,e._defaults)}),La)La.hasOwnProperty(Da)&&sn.plugins.register(La[Da]);sn.platform.initialize();var wa=sn;return"undefined"!=typeof window&&(window.Chart=sn),sn.Chart=sn,sn.Legend=La.legend._element,sn.Title=La.title._element,sn.pluginService=sn.plugins,sn.PluginBase=sn.Element.extend({}),sn.canvasHelpers=sn.helpers.canvas,sn.layoutService=sn.layouts,sn.LinearScaleBase=vn,sn.helpers.each(["Bar","Bubble","Doughnut","Line","PolarArea","Radar","Scatter"],function(e){sn[e]=function(t,n){return new sn(t,sn.helpers.merge(n||{},{type:e.charAt(0).toLowerCase()+e.slice(1)}))}}),wa}(function(){try{return n(0)}catch(e){}}())},function(e,t,n){var a={"./af":2,"./af.js":2,"./ar":3,"./ar-dz":4,"./ar-dz.js":4,"./ar-kw":5,"./ar-kw.js":5,"./ar-ly":6,"./ar-ly.js":6,"./ar-ma":7,"./ar-ma.js":7,"./ar-sa":8,"./ar-sa.js":8,"./ar-tn":9,"./ar-tn.js":9,"./ar.js":3,"./az":10,"./az.js":10,"./be":11,"./be.js":11,"./bg":12,"./bg.js":12,"./bm":13,"./bm.js":13,"./bn":14,"./bn.js":14,"./bo":15,"./bo.js":15,"./br":16,"./br.js":16,"./bs":17,"./bs.js":17,"./ca":18,"./ca.js":18,"./cs":19,"./cs.js":19,"./cv":20,"./cv.js":20,"./cy":21,"./cy.js":21,"./da":22,"./da.js":22,"./de":23,"./de-at":24,"./de-at.js":24,"./de-ch":25,"./de-ch.js":25,"./de.js":23,"./dv":26,"./dv.js":26,"./el":27,"./el.js":27,"./en-SG":28,"./en-SG.js":28,"./en-au":29,"./en-au.js":29,"./en-ca":30,"./en-ca.js":30,"./en-gb":31,"./en-gb.js":31,"./en-ie":32,"./en-ie.js":32,"./en-il":33,"./en-il.js":33,"./en-nz":34,"./en-nz.js":34,"./eo":35,"./eo.js":35,"./es":36,"./es-do":37,"./es-do.js":37,"./es-us":38,"./es-us.js":38,"./es.js":36,"./et":39,"./et.js":39,"./eu":40,"./eu.js":40,"./fa":41,"./fa.js":41,"./fi":42,"./fi.js":42,"./fo":43,"./fo.js":43,"./fr":44,"./fr-ca":45,"./fr-ca.js":45,"./fr-ch":46,"./fr-ch.js":46,"./fr.js":44,"./fy":47,"./fy.js":47,"./ga":48,"./ga.js":48,"./gd":49,"./gd.js":49,"./gl":50,"./gl.js":50,"./gom-latn":51,"./gom-latn.js":51,"./gu":52,"./gu.js":52,"./he":53,"./he.js":53,"./hi":54,"./hi.js":54,"./hr":55,"./hr.js":55,"./hu":56,"./hu.js":56,"./hy-am":57,"./hy-am.js":57,"./id":58,"./id.js":58,"./is":59,"./is.js":59,"./it":60,"./it-ch":61,"./it-ch.js":61,"./it.js":60,"./ja":62,"./ja.js":62,"./jv":63,"./jv.js":63,"./ka":64,"./ka.js":64,"./kk":65,"./kk.js":65,"./km":66,"./km.js":66,"./kn":67,"./kn.js":67,"./ko":68,"./ko.js":68,"./ku":69,"./ku.js":69,"./ky":70,"./ky.js":70,"./lb":71,"./lb.js":71,"./lo":72,"./lo.js":72,"./lt":73,"./lt.js":73,"./lv":74,"./lv.js":74,"./me":75,"./me.js":75,"./mi":76,"./mi.js":76,"./mk":77,"./mk.js":77,"./ml":78,"./ml.js":78,"./mn":79,"./mn.js":79,"./mr":80,"./mr.js":80,"./ms":81,"./ms-my":82,"./ms-my.js":82,"./ms.js":81,"./mt":83,"./mt.js":83,"./my":84,"./my.js":84,"./nb":85,"./nb.js":85,"./ne":86,"./ne.js":86,"./nl":87,"./nl-be":88,"./nl-be.js":88,"./nl.js":87,"./nn":89,"./nn.js":89,"./pa-in":90,"./pa-in.js":90,"./pl":91,"./pl.js":91,"./pt":92,"./pt-br":93,"./pt-br.js":93,"./pt.js":92,"./ro":94,"./ro.js":94,"./ru":95,"./ru.js":95,"./sd":96,"./sd.js":96,"./se":97,"./se.js":97,"./si":98,"./si.js":98,"./sk":99,"./sk.js":99,"./sl":100,"./sl.js":100,"./sq":101,"./sq.js":101,"./sr":102,"./sr-cyrl":103,"./sr-cyrl.js":103,"./sr.js":102,"./ss":104,"./ss.js":104,"./sv":105,"./sv.js":105,"./sw":106,"./sw.js":106,"./ta":107,"./ta.js":107,"./te":108,"./te.js":108,"./tet":109,"./tet.js":109,"./tg":110,"./tg.js":110,"./th":111,"./th.js":111,"./tl-ph":112,"./tl-ph.js":112,"./tlh":113,"./tlh.js":113,"./tr":114,"./tr.js":114,"./tzl":115,"./tzl.js":115,"./tzm":116,"./tzm-latn":117,"./tzm-latn.js":117,"./tzm.js":116,"./ug-cn":118,"./ug-cn.js":118,"./uk":119,"./uk.js":119,"./ur":120,"./ur.js":120,"./uz":121,"./uz-latn":122,"./uz-latn.js":122,"./uz.js":121,"./vi":123,"./vi.js":123,"./x-pseudo":124,"./x-pseudo.js":124,"./yo":125,"./yo.js":125,"./zh-cn":126,"./zh-cn.js":126,"./zh-hk":127,"./zh-hk.js":127,"./zh-tw":128,"./zh-tw.js":128};function r(e){var t=i(e);return n(t)}function i(e){if(!n.o(a,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return a[e]}r.keys=function(){return Object.keys(a)},r.resolve=i,e.exports=r,r.id=131},function(e,t,n){(function(e,a){var r;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var i,s=200,o="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",d="Expected a function",u="__lodash_hash_undefined__",l=500,_="__lodash_placeholder__",c=1,h=2,m=4,f=1,p=2,M=1,y=2,g=4,v=8,L=16,Y=32,k=64,b=128,D=256,w=512,T=30,x="...",S=800,H=16,j=1,P=2,O=1/0,A=9007199254740991,W=17976931348623157e292,F=NaN,C=4294967295,I=C-1,E=C>>>1,z=[["ary",b],["bind",M],["bindKey",y],["curry",v],["curryRight",L],["flip",w],["partial",Y],["partialRight",k],["rearg",D]],R="[object Arguments]",N="[object Array]",B="[object AsyncFunction]",V="[object Boolean]",J="[object Date]",U="[object DOMException]",G="[object Error]",q="[object Function]",$="[object GeneratorFunction]",K="[object Map]",Z="[object Number]",X="[object Null]",Q="[object Object]",ee="[object Proxy]",te="[object RegExp]",ne="[object Set]",ae="[object String]",re="[object Symbol]",ie="[object Undefined]",se="[object WeakMap]",oe="[object WeakSet]",de="[object ArrayBuffer]",ue="[object DataView]",le="[object Float32Array]",_e="[object Float64Array]",ce="[object Int8Array]",he="[object Int16Array]",me="[object Int32Array]",fe="[object Uint8Array]",pe="[object Uint8ClampedArray]",Me="[object Uint16Array]",ye="[object Uint32Array]",ge=/\b__p \+= '';/g,ve=/\b(__p \+=) '' \+/g,Le=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Ye=/&(?:amp|lt|gt|quot|#39);/g,ke=/[&<>"']/g,be=RegExp(Ye.source),De=RegExp(ke.source),we=/<%-([\s\S]+?)%>/g,Te=/<%([\s\S]+?)%>/g,xe=/<%=([\s\S]+?)%>/g,Se=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,He=/^\w*$/,je=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Pe=/[\\^$.*+?()[\]{}|]/g,Oe=RegExp(Pe.source),Ae=/^\s+|\s+$/g,We=/^\s+/,Fe=/\s+$/,Ce=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Ie=/\{\n\/\* \[wrapped with (.+)\] \*/,Ee=/,? & /,ze=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Re=/\\(\\)?/g,Ne=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Be=/\w*$/,Ve=/^[-+]0x[0-9a-f]+$/i,Je=/^0b[01]+$/i,Ue=/^\[object .+?Constructor\]$/,Ge=/^0o[0-7]+$/i,qe=/^(?:0|[1-9]\d*)$/,$e=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Ke=/($^)/,Ze=/['\n\r\u2028\u2029\\]/g,Xe="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Qe="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",et="[\\ud800-\\udfff]",tt="["+Qe+"]",nt="["+Xe+"]",at="\\d+",rt="[\\u2700-\\u27bf]",it="[a-z\\xdf-\\xf6\\xf8-\\xff]",st="[^\\ud800-\\udfff"+Qe+at+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ot="\\ud83c[\\udffb-\\udfff]",dt="[^\\ud800-\\udfff]",ut="(?:\\ud83c[\\udde6-\\uddff]){2}",lt="[\\ud800-\\udbff][\\udc00-\\udfff]",_t="[A-Z\\xc0-\\xd6\\xd8-\\xde]",ct="(?:"+it+"|"+st+")",ht="(?:"+_t+"|"+st+")",mt="(?:"+nt+"|"+ot+")"+"?",ft="[\\ufe0e\\ufe0f]?"+mt+("(?:\\u200d(?:"+[dt,ut,lt].join("|")+")[\\ufe0e\\ufe0f]?"+mt+")*"),pt="(?:"+[rt,ut,lt].join("|")+")"+ft,Mt="(?:"+[dt+nt+"?",nt,ut,lt,et].join("|")+")",yt=RegExp("['’]","g"),gt=RegExp(nt,"g"),vt=RegExp(ot+"(?="+ot+")|"+Mt+ft,"g"),Lt=RegExp([_t+"?"+it+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[tt,_t,"$"].join("|")+")",ht+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[tt,_t+ct,"$"].join("|")+")",_t+"?"+ct+"+(?:['’](?:d|ll|m|re|s|t|ve))?",_t+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",at,pt].join("|"),"g"),Yt=RegExp("[\\u200d\\ud800-\\udfff"+Xe+"\\ufe0e\\ufe0f]"),kt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,bt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Dt=-1,wt={};wt[le]=wt[_e]=wt[ce]=wt[he]=wt[me]=wt[fe]=wt[pe]=wt[Me]=wt[ye]=!0,wt[R]=wt[N]=wt[de]=wt[V]=wt[ue]=wt[J]=wt[G]=wt[q]=wt[K]=wt[Z]=wt[Q]=wt[te]=wt[ne]=wt[ae]=wt[se]=!1;var Tt={};Tt[R]=Tt[N]=Tt[de]=Tt[ue]=Tt[V]=Tt[J]=Tt[le]=Tt[_e]=Tt[ce]=Tt[he]=Tt[me]=Tt[K]=Tt[Z]=Tt[Q]=Tt[te]=Tt[ne]=Tt[ae]=Tt[re]=Tt[fe]=Tt[pe]=Tt[Me]=Tt[ye]=!0,Tt[G]=Tt[q]=Tt[se]=!1;var xt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},St=parseFloat,Ht=parseInt,jt="object"==typeof e&&e&&e.Object===Object&&e,Pt="object"==typeof self&&self&&self.Object===Object&&self,Ot=jt||Pt||Function("return this")(),At=t&&!t.nodeType&&t,Wt=At&&"object"==typeof a&&a&&!a.nodeType&&a,Ft=Wt&&Wt.exports===At,Ct=Ft&&jt.process,It=function(){try{var e=Wt&&Wt.require&&Wt.require("util").types;return e||Ct&&Ct.binding&&Ct.binding("util")}catch(e){}}(),Et=It&&It.isArrayBuffer,zt=It&&It.isDate,Rt=It&&It.isMap,Nt=It&&It.isRegExp,Bt=It&&It.isSet,Vt=It&&It.isTypedArray;function Jt(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function Ut(e,t,n,a){for(var r=-1,i=null==e?0:e.length;++r<i;){var s=e[r];t(a,s,n(s),e)}return a}function Gt(e,t){for(var n=-1,a=null==e?0:e.length;++n<a&&!1!==t(e[n],n,e););return e}function qt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function $t(e,t){for(var n=-1,a=null==e?0:e.length;++n<a;)if(!t(e[n],n,e))return!1;return!0}function Kt(e,t){for(var n=-1,a=null==e?0:e.length,r=0,i=[];++n<a;){var s=e[n];t(s,n,e)&&(i[r++]=s)}return i}function Zt(e,t){return!!(null==e?0:e.length)&&dn(e,t,0)>-1}function Xt(e,t,n){for(var a=-1,r=null==e?0:e.length;++a<r;)if(n(t,e[a]))return!0;return!1}function Qt(e,t){for(var n=-1,a=null==e?0:e.length,r=Array(a);++n<a;)r[n]=t(e[n],n,e);return r}function en(e,t){for(var n=-1,a=t.length,r=e.length;++n<a;)e[r+n]=t[n];return e}function tn(e,t,n,a){var r=-1,i=null==e?0:e.length;for(a&&i&&(n=e[++r]);++r<i;)n=t(n,e[r],r,e);return n}function nn(e,t,n,a){var r=null==e?0:e.length;for(a&&r&&(n=e[--r]);r--;)n=t(n,e[r],r,e);return n}function an(e,t){for(var n=-1,a=null==e?0:e.length;++n<a;)if(t(e[n],n,e))return!0;return!1}var rn=cn("length");function sn(e,t,n){var a;return n(e,function(e,n,r){if(t(e,n,r))return a=n,!1}),a}function on(e,t,n,a){for(var r=e.length,i=n+(a?1:-1);a?i--:++i<r;)if(t(e[i],i,e))return i;return-1}function dn(e,t,n){return t==t?function(e,t,n){var a=n-1,r=e.length;for(;++a<r;)if(e[a]===t)return a;return-1}(e,t,n):on(e,ln,n)}function un(e,t,n,a){for(var r=n-1,i=e.length;++r<i;)if(a(e[r],t))return r;return-1}function ln(e){return e!=e}function _n(e,t){var n=null==e?0:e.length;return n?fn(e,t)/n:F}function cn(e){return function(t){return null==t?i:t[e]}}function hn(e){return function(t){return null==e?i:e[t]}}function mn(e,t,n,a,r){return r(e,function(e,r,i){n=a?(a=!1,e):t(n,e,r,i)}),n}function fn(e,t){for(var n,a=-1,r=e.length;++a<r;){var s=t(e[a]);s!==i&&(n=n===i?s:n+s)}return n}function pn(e,t){for(var n=-1,a=Array(e);++n<e;)a[n]=t(n);return a}function Mn(e){return function(t){return e(t)}}function yn(e,t){return Qt(t,function(t){return e[t]})}function gn(e,t){return e.has(t)}function vn(e,t){for(var n=-1,a=e.length;++n<a&&dn(t,e[n],0)>-1;);return n}function Ln(e,t){for(var n=e.length;n--&&dn(t,e[n],0)>-1;);return n}var Yn=hn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),kn=hn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function bn(e){return"\\"+xt[e]}function Dn(e){return Yt.test(e)}function wn(e){var t=-1,n=Array(e.size);return e.forEach(function(e,a){n[++t]=[a,e]}),n}function Tn(e,t){return function(n){return e(t(n))}}function xn(e,t){for(var n=-1,a=e.length,r=0,i=[];++n<a;){var s=e[n];s!==t&&s!==_||(e[n]=_,i[r++]=n)}return i}function Sn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}function Hn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=[e,e]}),n}function jn(e){return Dn(e)?function(e){var t=vt.lastIndex=0;for(;vt.test(e);)++t;return t}(e):rn(e)}function Pn(e){return Dn(e)?function(e){return e.match(vt)||[]}(e):function(e){return e.split("")}(e)}var On=hn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var An=function e(t){var n,a=(t=null==t?Ot:An.defaults(Ot.Object(),t,An.pick(Ot,bt))).Array,r=t.Date,Xe=t.Error,Qe=t.Function,et=t.Math,tt=t.Object,nt=t.RegExp,at=t.String,rt=t.TypeError,it=a.prototype,st=Qe.prototype,ot=tt.prototype,dt=t["__core-js_shared__"],ut=st.toString,lt=ot.hasOwnProperty,_t=0,ct=(n=/[^.]+$/.exec(dt&&dt.keys&&dt.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",ht=ot.toString,mt=ut.call(tt),ft=Ot._,pt=nt("^"+ut.call(lt).replace(Pe,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Mt=Ft?t.Buffer:i,vt=t.Symbol,Yt=t.Uint8Array,xt=Mt?Mt.allocUnsafe:i,jt=Tn(tt.getPrototypeOf,tt),Pt=tt.create,At=ot.propertyIsEnumerable,Wt=it.splice,Ct=vt?vt.isConcatSpreadable:i,It=vt?vt.iterator:i,rn=vt?vt.toStringTag:i,hn=function(){try{var e=Ii(tt,"defineProperty");return e({},"",{}),e}catch(e){}}(),Wn=t.clearTimeout!==Ot.clearTimeout&&t.clearTimeout,Fn=r&&r.now!==Ot.Date.now&&r.now,Cn=t.setTimeout!==Ot.setTimeout&&t.setTimeout,In=et.ceil,En=et.floor,zn=tt.getOwnPropertySymbols,Rn=Mt?Mt.isBuffer:i,Nn=t.isFinite,Bn=it.join,Vn=Tn(tt.keys,tt),Jn=et.max,Un=et.min,Gn=r.now,qn=t.parseInt,$n=et.random,Kn=it.reverse,Zn=Ii(t,"DataView"),Xn=Ii(t,"Map"),Qn=Ii(t,"Promise"),ea=Ii(t,"Set"),ta=Ii(t,"WeakMap"),na=Ii(tt,"create"),aa=ta&&new ta,ra={},ia=ls(Zn),sa=ls(Xn),oa=ls(Qn),da=ls(ea),ua=ls(ta),la=vt?vt.prototype:i,_a=la?la.valueOf:i,ca=la?la.toString:i;function ha(e){if(xo(e)&&!Mo(e)&&!(e instanceof Ma)){if(e instanceof pa)return e;if(lt.call(e,"__wrapped__"))return _s(e)}return new pa(e)}var ma=function(){function e(){}return function(t){if(!To(t))return{};if(Pt)return Pt(t);e.prototype=t;var n=new e;return e.prototype=i,n}}();function fa(){}function pa(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=i}function Ma(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=C,this.__views__=[]}function ya(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function ga(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function va(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}function La(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new va;++t<n;)this.add(e[t])}function Ya(e){var t=this.__data__=new ga(e);this.size=t.size}function ka(e,t){var n=Mo(e),a=!n&&po(e),r=!n&&!a&&Lo(e),i=!n&&!a&&!r&&Fo(e),s=n||a||r||i,o=s?pn(e.length,at):[],d=o.length;for(var u in e)!t&&!lt.call(e,u)||s&&("length"==u||r&&("offset"==u||"parent"==u)||i&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||Ji(u,d))||o.push(u);return o}function ba(e){var t=e.length;return t?e[Lr(0,t-1)]:i}function Da(e,t){return os(ni(e),Aa(t,0,e.length))}function wa(e){return os(ni(e))}function Ta(e,t,n){(n===i||ho(e[t],n))&&(n!==i||t in e)||Pa(e,t,n)}function xa(e,t,n){var a=e[t];lt.call(e,t)&&ho(a,n)&&(n!==i||t in e)||Pa(e,t,n)}function Sa(e,t){for(var n=e.length;n--;)if(ho(e[n][0],t))return n;return-1}function Ha(e,t,n,a){return Ea(e,function(e,r,i){t(a,e,n(e),i)}),a}function ja(e,t){return e&&ai(t,rd(t),e)}function Pa(e,t,n){"__proto__"==t&&hn?hn(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function Oa(e,t){for(var n=-1,r=t.length,s=a(r),o=null==e;++n<r;)s[n]=o?i:Qo(e,t[n]);return s}function Aa(e,t,n){return e==e&&(n!==i&&(e=e<=n?e:n),t!==i&&(e=e>=t?e:t)),e}function Wa(e,t,n,a,r,s){var o,d=t&c,u=t&h,l=t&m;if(n&&(o=r?n(e,a,r,s):n(e)),o!==i)return o;if(!To(e))return e;var _=Mo(e);if(_){if(o=function(e){var t=e.length,n=new e.constructor(t);t&&"string"==typeof e[0]&&lt.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!d)return ni(e,o)}else{var f=Ri(e),p=f==q||f==$;if(Lo(e))return Kr(e,d);if(f==Q||f==R||p&&!r){if(o=u||p?{}:Bi(e),!d)return u?function(e,t){return ai(e,zi(e),t)}(e,function(e,t){return e&&ai(t,id(t),e)}(o,e)):function(e,t){return ai(e,Ei(e),t)}(e,ja(o,e))}else{if(!Tt[f])return r?e:{};o=function(e,t,n){var a=e.constructor;switch(t){case de:return Zr(e);case V:case J:return new a(+e);case ue:return function(e,t){var n=t?Zr(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case le:case _e:case ce:case he:case me:case fe:case pe:case Me:case ye:return Xr(e,n);case K:return new a;case Z:case ae:return new a(e);case te:return function(e){var t=new e.constructor(e.source,Be.exec(e));return t.lastIndex=e.lastIndex,t}(e);case ne:return new a;case re:return r=e,_a?tt(_a.call(r)):{}}var r}(e,f,d)}}s||(s=new Ya);var M=s.get(e);if(M)return M;s.set(e,o),Oo(e)?e.forEach(function(a){o.add(Wa(a,t,n,a,e,s))}):So(e)&&e.forEach(function(a,r){o.set(r,Wa(a,t,n,r,e,s))});var y=_?i:(l?u?ji:Hi:u?id:rd)(e);return Gt(y||e,function(a,r){y&&(a=e[r=a]),xa(o,r,Wa(a,t,n,r,e,s))}),o}function Fa(e,t,n){var a=n.length;if(null==e)return!a;for(e=tt(e);a--;){var r=n[a],s=t[r],o=e[r];if(o===i&&!(r in e)||!s(o))return!1}return!0}function Ca(e,t,n){if("function"!=typeof e)throw new rt(d);return as(function(){e.apply(i,n)},t)}function Ia(e,t,n,a){var r=-1,i=Zt,o=!0,d=e.length,u=[],l=t.length;if(!d)return u;n&&(t=Qt(t,Mn(n))),a?(i=Xt,o=!1):t.length>=s&&(i=gn,o=!1,t=new La(t));e:for(;++r<d;){var _=e[r],c=null==n?_:n(_);if(_=a||0!==_?_:0,o&&c==c){for(var h=l;h--;)if(t[h]===c)continue e;u.push(_)}else i(t,c,a)||u.push(_)}return u}ha.templateSettings={escape:we,evaluate:Te,interpolate:xe,variable:"",imports:{_:ha}},ha.prototype=fa.prototype,ha.prototype.constructor=ha,pa.prototype=ma(fa.prototype),pa.prototype.constructor=pa,Ma.prototype=ma(fa.prototype),Ma.prototype.constructor=Ma,ya.prototype.clear=function(){this.__data__=na?na(null):{},this.size=0},ya.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ya.prototype.get=function(e){var t=this.__data__;if(na){var n=t[e];return n===u?i:n}return lt.call(t,e)?t[e]:i},ya.prototype.has=function(e){var t=this.__data__;return na?t[e]!==i:lt.call(t,e)},ya.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=na&&t===i?u:t,this},ga.prototype.clear=function(){this.__data__=[],this.size=0},ga.prototype.delete=function(e){var t=this.__data__,n=Sa(t,e);return!(n<0)&&(n==t.length-1?t.pop():Wt.call(t,n,1),--this.size,!0)},ga.prototype.get=function(e){var t=this.__data__,n=Sa(t,e);return n<0?i:t[n][1]},ga.prototype.has=function(e){return Sa(this.__data__,e)>-1},ga.prototype.set=function(e,t){var n=this.__data__,a=Sa(n,e);return a<0?(++this.size,n.push([e,t])):n[a][1]=t,this},va.prototype.clear=function(){this.size=0,this.__data__={hash:new ya,map:new(Xn||ga),string:new ya}},va.prototype.delete=function(e){var t=Fi(this,e).delete(e);return this.size-=t?1:0,t},va.prototype.get=function(e){return Fi(this,e).get(e)},va.prototype.has=function(e){return Fi(this,e).has(e)},va.prototype.set=function(e,t){var n=Fi(this,e),a=n.size;return n.set(e,t),this.size+=n.size==a?0:1,this},La.prototype.add=La.prototype.push=function(e){return this.__data__.set(e,u),this},La.prototype.has=function(e){return this.__data__.has(e)},Ya.prototype.clear=function(){this.__data__=new ga,this.size=0},Ya.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Ya.prototype.get=function(e){return this.__data__.get(e)},Ya.prototype.has=function(e){return this.__data__.has(e)},Ya.prototype.set=function(e,t){var n=this.__data__;if(n instanceof ga){var a=n.__data__;if(!Xn||a.length<s-1)return a.push([e,t]),this.size=++n.size,this;n=this.__data__=new va(a)}return n.set(e,t),this.size=n.size,this};var Ea=si(Ga),za=si(qa,!0);function Ra(e,t){var n=!0;return Ea(e,function(e,a,r){return n=!!t(e,a,r)}),n}function Na(e,t,n){for(var a=-1,r=e.length;++a<r;){var s=e[a],o=t(s);if(null!=o&&(d===i?o==o&&!Wo(o):n(o,d)))var d=o,u=s}return u}function Ba(e,t){var n=[];return Ea(e,function(e,a,r){t(e,a,r)&&n.push(e)}),n}function Va(e,t,n,a,r){var i=-1,s=e.length;for(n||(n=Vi),r||(r=[]);++i<s;){var o=e[i];t>0&&n(o)?t>1?Va(o,t-1,n,a,r):en(r,o):a||(r[r.length]=o)}return r}var Ja=oi(),Ua=oi(!0);function Ga(e,t){return e&&Ja(e,t,rd)}function qa(e,t){return e&&Ua(e,t,rd)}function $a(e,t){return Kt(t,function(t){return bo(e[t])})}function Ka(e,t){for(var n=0,a=(t=Ur(t,e)).length;null!=e&&n<a;)e=e[us(t[n++])];return n&&n==a?e:i}function Za(e,t,n){var a=t(e);return Mo(e)?a:en(a,n(e))}function Xa(e){return null==e?e===i?ie:X:rn&&rn in tt(e)?function(e){var t=lt.call(e,rn),n=e[rn];try{e[rn]=i;var a=!0}catch(e){}var r=ht.call(e);a&&(t?e[rn]=n:delete e[rn]);return r}(e):function(e){return ht.call(e)}(e)}function Qa(e,t){return e>t}function er(e,t){return null!=e&&lt.call(e,t)}function tr(e,t){return null!=e&&t in tt(e)}function nr(e,t,n){for(var r=n?Xt:Zt,s=e[0].length,o=e.length,d=o,u=a(o),l=1/0,_=[];d--;){var c=e[d];d&&t&&(c=Qt(c,Mn(t))),l=Un(c.length,l),u[d]=!n&&(t||s>=120&&c.length>=120)?new La(d&&c):i}c=e[0];var h=-1,m=u[0];e:for(;++h<s&&_.length<l;){var f=c[h],p=t?t(f):f;if(f=n||0!==f?f:0,!(m?gn(m,p):r(_,p,n))){for(d=o;--d;){var M=u[d];if(!(M?gn(M,p):r(e[d],p,n)))continue e}m&&m.push(p),_.push(f)}}return _}function ar(e,t,n){var a=null==(e=es(e,t=Ur(t,e)))?e:e[us(Ys(t))];return null==a?i:Jt(a,e,n)}function rr(e){return xo(e)&&Xa(e)==R}function ir(e,t,n,a,r){return e===t||(null==e||null==t||!xo(e)&&!xo(t)?e!=e&&t!=t:function(e,t,n,a,r,s){var o=Mo(e),d=Mo(t),u=o?N:Ri(e),l=d?N:Ri(t),_=(u=u==R?Q:u)==Q,c=(l=l==R?Q:l)==Q,h=u==l;if(h&&Lo(e)){if(!Lo(t))return!1;o=!0,_=!1}if(h&&!_)return s||(s=new Ya),o||Fo(e)?xi(e,t,n,a,r,s):function(e,t,n,a,r,i,s){switch(n){case ue:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case de:return!(e.byteLength!=t.byteLength||!i(new Yt(e),new Yt(t)));case V:case J:case Z:return ho(+e,+t);case G:return e.name==t.name&&e.message==t.message;case te:case ae:return e==t+"";case K:var o=wn;case ne:var d=a&f;if(o||(o=Sn),e.size!=t.size&&!d)return!1;var u=s.get(e);if(u)return u==t;a|=p,s.set(e,t);var l=xi(o(e),o(t),a,r,i,s);return s.delete(e),l;case re:if(_a)return _a.call(e)==_a.call(t)}return!1}(e,t,u,n,a,r,s);if(!(n&f)){var m=_&&lt.call(e,"__wrapped__"),M=c&&lt.call(t,"__wrapped__");if(m||M){var y=m?e.value():e,g=M?t.value():t;return s||(s=new Ya),r(y,g,n,a,s)}}if(!h)return!1;return s||(s=new Ya),function(e,t,n,a,r,s){var o=n&f,d=Hi(e),u=d.length,l=Hi(t).length;if(u!=l&&!o)return!1;var _=u;for(;_--;){var c=d[_];if(!(o?c in t:lt.call(t,c)))return!1}var h=s.get(e);if(h&&s.get(t))return h==t;var m=!0;s.set(e,t),s.set(t,e);var p=o;for(;++_<u;){c=d[_];var M=e[c],y=t[c];if(a)var g=o?a(y,M,c,t,e,s):a(M,y,c,e,t,s);if(!(g===i?M===y||r(M,y,n,a,s):g)){m=!1;break}p||(p="constructor"==c)}if(m&&!p){var v=e.constructor,L=t.constructor;v!=L&&"constructor"in e&&"constructor"in t&&!("function"==typeof v&&v instanceof v&&"function"==typeof L&&L instanceof L)&&(m=!1)}return s.delete(e),s.delete(t),m}(e,t,n,a,r,s)}(e,t,n,a,ir,r))}function sr(e,t,n,a){var r=n.length,s=r,o=!a;if(null==e)return!s;for(e=tt(e);r--;){var d=n[r];if(o&&d[2]?d[1]!==e[d[0]]:!(d[0]in e))return!1}for(;++r<s;){var u=(d=n[r])[0],l=e[u],_=d[1];if(o&&d[2]){if(l===i&&!(u in e))return!1}else{var c=new Ya;if(a)var h=a(l,_,u,e,t,c);if(!(h===i?ir(_,l,f|p,a,c):h))return!1}}return!0}function or(e){return!(!To(e)||(t=e,ct&&ct in t))&&(bo(e)?pt:Ue).test(ls(e));var t}function dr(e){return"function"==typeof e?e:null==e?Hd:"object"==typeof e?Mo(e)?mr(e[0],e[1]):hr(e):Ed(e)}function ur(e){if(!Ki(e))return Vn(e);var t=[];for(var n in tt(e))lt.call(e,n)&&"constructor"!=n&&t.push(n);return t}function lr(e){if(!To(e))return function(e){var t=[];if(null!=e)for(var n in tt(e))t.push(n);return t}(e);var t=Ki(e),n=[];for(var a in e)("constructor"!=a||!t&&lt.call(e,a))&&n.push(a);return n}function _r(e,t){return e<t}function cr(e,t){var n=-1,r=go(e)?a(e.length):[];return Ea(e,function(e,a,i){r[++n]=t(e,a,i)}),r}function hr(e){var t=Ci(e);return 1==t.length&&t[0][2]?Xi(t[0][0],t[0][1]):function(n){return n===e||sr(n,e,t)}}function mr(e,t){return Gi(e)&&Zi(t)?Xi(us(e),t):function(n){var a=Qo(n,e);return a===i&&a===t?ed(n,e):ir(t,a,f|p)}}function fr(e,t,n,a,r){e!==t&&Ja(t,function(s,o){if(r||(r=new Ya),To(s))!function(e,t,n,a,r,s,o){var d=ts(e,n),u=ts(t,n),l=o.get(u);if(l)return void Ta(e,n,l);var _=s?s(d,u,n+"",e,t,o):i,c=_===i;if(c){var h=Mo(u),m=!h&&Lo(u),f=!h&&!m&&Fo(u);_=u,h||m||f?Mo(d)?_=d:vo(d)?_=ni(d):m?(c=!1,_=Kr(u,!0)):f?(c=!1,_=Xr(u,!0)):_=[]:jo(u)||po(u)?(_=d,po(d)?_=Vo(d):To(d)&&!bo(d)||(_=Bi(u))):c=!1}c&&(o.set(u,_),r(_,u,a,s,o),o.delete(u));Ta(e,n,_)}(e,t,o,n,fr,a,r);else{var d=a?a(ts(e,o),s,o+"",e,t,r):i;d===i&&(d=s),Ta(e,o,d)}},id)}function pr(e,t){var n=e.length;if(n)return Ji(t+=t<0?n:0,n)?e[t]:i}function Mr(e,t,n){var a=-1;return t=Qt(t.length?t:[Hd],Mn(Wi())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(cr(e,function(e,n,r){return{criteria:Qt(t,function(t){return t(e)}),index:++a,value:e}}),function(e,t){return function(e,t,n){var a=-1,r=e.criteria,i=t.criteria,s=r.length,o=n.length;for(;++a<s;){var d=Qr(r[a],i[a]);if(d){if(a>=o)return d;var u=n[a];return d*("desc"==u?-1:1)}}return e.index-t.index}(e,t,n)})}function yr(e,t,n){for(var a=-1,r=t.length,i={};++a<r;){var s=t[a],o=Ka(e,s);n(o,s)&&wr(i,Ur(s,e),o)}return i}function gr(e,t,n,a){var r=a?un:dn,i=-1,s=t.length,o=e;for(e===t&&(t=ni(t)),n&&(o=Qt(e,Mn(n)));++i<s;)for(var d=0,u=t[i],l=n?n(u):u;(d=r(o,l,d,a))>-1;)o!==e&&Wt.call(o,d,1),Wt.call(e,d,1);return e}function vr(e,t){for(var n=e?t.length:0,a=n-1;n--;){var r=t[n];if(n==a||r!==i){var i=r;Ji(r)?Wt.call(e,r,1):Ir(e,r)}}return e}function Lr(e,t){return e+En($n()*(t-e+1))}function Yr(e,t){var n="";if(!e||t<1||t>A)return n;do{t%2&&(n+=e),(t=En(t/2))&&(e+=e)}while(t);return n}function kr(e,t){return rs(Qi(e,t,Hd),e+"")}function br(e){return ba(hd(e))}function Dr(e,t){var n=hd(e);return os(n,Aa(t,0,n.length))}function wr(e,t,n,a){if(!To(e))return e;for(var r=-1,s=(t=Ur(t,e)).length,o=s-1,d=e;null!=d&&++r<s;){var u=us(t[r]),l=n;if(r!=o){var _=d[u];(l=a?a(_,u,d):i)===i&&(l=To(_)?_:Ji(t[r+1])?[]:{})}xa(d,u,l),d=d[u]}return e}var Tr=aa?function(e,t){return aa.set(e,t),e}:Hd,xr=hn?function(e,t){return hn(e,"toString",{configurable:!0,enumerable:!1,value:Td(t),writable:!0})}:Hd;function Sr(e){return os(hd(e))}function Hr(e,t,n){var r=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(n=n>i?i:n)<0&&(n+=i),i=t>n?0:n-t>>>0,t>>>=0;for(var s=a(i);++r<i;)s[r]=e[r+t];return s}function jr(e,t){var n;return Ea(e,function(e,a,r){return!(n=t(e,a,r))}),!!n}function Pr(e,t,n){var a=0,r=null==e?a:e.length;if("number"==typeof t&&t==t&&r<=E){for(;a<r;){var i=a+r>>>1,s=e[i];null!==s&&!Wo(s)&&(n?s<=t:s<t)?a=i+1:r=i}return r}return Or(e,t,Hd,n)}function Or(e,t,n,a){t=n(t);for(var r=0,s=null==e?0:e.length,o=t!=t,d=null===t,u=Wo(t),l=t===i;r<s;){var _=En((r+s)/2),c=n(e[_]),h=c!==i,m=null===c,f=c==c,p=Wo(c);if(o)var M=a||f;else M=l?f&&(a||h):d?f&&h&&(a||!m):u?f&&h&&!m&&(a||!p):!m&&!p&&(a?c<=t:c<t);M?r=_+1:s=_}return Un(s,I)}function Ar(e,t){for(var n=-1,a=e.length,r=0,i=[];++n<a;){var s=e[n],o=t?t(s):s;if(!n||!ho(o,d)){var d=o;i[r++]=0===s?0:s}}return i}function Wr(e){return"number"==typeof e?e:Wo(e)?F:+e}function Fr(e){if("string"==typeof e)return e;if(Mo(e))return Qt(e,Fr)+"";if(Wo(e))return ca?ca.call(e):"";var t=e+"";return"0"==t&&1/e==-O?"-0":t}function Cr(e,t,n){var a=-1,r=Zt,i=e.length,o=!0,d=[],u=d;if(n)o=!1,r=Xt;else if(i>=s){var l=t?null:Yi(e);if(l)return Sn(l);o=!1,r=gn,u=new La}else u=t?[]:d;e:for(;++a<i;){var _=e[a],c=t?t(_):_;if(_=n||0!==_?_:0,o&&c==c){for(var h=u.length;h--;)if(u[h]===c)continue e;t&&u.push(c),d.push(_)}else r(u,c,n)||(u!==d&&u.push(c),d.push(_))}return d}function Ir(e,t){return null==(e=es(e,t=Ur(t,e)))||delete e[us(Ys(t))]}function Er(e,t,n,a){return wr(e,t,n(Ka(e,t)),a)}function zr(e,t,n,a){for(var r=e.length,i=a?r:-1;(a?i--:++i<r)&&t(e[i],i,e););return n?Hr(e,a?0:i,a?i+1:r):Hr(e,a?i+1:0,a?r:i)}function Rr(e,t){var n=e;return n instanceof Ma&&(n=n.value()),tn(t,function(e,t){return t.func.apply(t.thisArg,en([e],t.args))},n)}function Nr(e,t,n){var r=e.length;if(r<2)return r?Cr(e[0]):[];for(var i=-1,s=a(r);++i<r;)for(var o=e[i],d=-1;++d<r;)d!=i&&(s[i]=Ia(s[i]||o,e[d],t,n));return Cr(Va(s,1),t,n)}function Br(e,t,n){for(var a=-1,r=e.length,s=t.length,o={};++a<r;){var d=a<s?t[a]:i;n(o,e[a],d)}return o}function Vr(e){return vo(e)?e:[]}function Jr(e){return"function"==typeof e?e:Hd}function Ur(e,t){return Mo(e)?e:Gi(e,t)?[e]:ds(Jo(e))}var Gr=kr;function qr(e,t,n){var a=e.length;return n=n===i?a:n,!t&&n>=a?e:Hr(e,t,n)}var $r=Wn||function(e){return Ot.clearTimeout(e)};function Kr(e,t){if(t)return e.slice();var n=e.length,a=xt?xt(n):new e.constructor(n);return e.copy(a),a}function Zr(e){var t=new e.constructor(e.byteLength);return new Yt(t).set(new Yt(e)),t}function Xr(e,t){var n=t?Zr(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function Qr(e,t){if(e!==t){var n=e!==i,a=null===e,r=e==e,s=Wo(e),o=t!==i,d=null===t,u=t==t,l=Wo(t);if(!d&&!l&&!s&&e>t||s&&o&&u&&!d&&!l||a&&o&&u||!n&&u||!r)return 1;if(!a&&!s&&!l&&e<t||l&&n&&r&&!a&&!s||d&&n&&r||!o&&r||!u)return-1}return 0}function ei(e,t,n,r){for(var i=-1,s=e.length,o=n.length,d=-1,u=t.length,l=Jn(s-o,0),_=a(u+l),c=!r;++d<u;)_[d]=t[d];for(;++i<o;)(c||i<s)&&(_[n[i]]=e[i]);for(;l--;)_[d++]=e[i++];return _}function ti(e,t,n,r){for(var i=-1,s=e.length,o=-1,d=n.length,u=-1,l=t.length,_=Jn(s-d,0),c=a(_+l),h=!r;++i<_;)c[i]=e[i];for(var m=i;++u<l;)c[m+u]=t[u];for(;++o<d;)(h||i<s)&&(c[m+n[o]]=e[i++]);return c}function ni(e,t){var n=-1,r=e.length;for(t||(t=a(r));++n<r;)t[n]=e[n];return t}function ai(e,t,n,a){var r=!n;n||(n={});for(var s=-1,o=t.length;++s<o;){var d=t[s],u=a?a(n[d],e[d],d,n,e):i;u===i&&(u=e[d]),r?Pa(n,d,u):xa(n,d,u)}return n}function ri(e,t){return function(n,a){var r=Mo(n)?Ut:Ha,i=t?t():{};return r(n,e,Wi(a,2),i)}}function ii(e){return kr(function(t,n){var a=-1,r=n.length,s=r>1?n[r-1]:i,o=r>2?n[2]:i;for(s=e.length>3&&"function"==typeof s?(r--,s):i,o&&Ui(n[0],n[1],o)&&(s=r<3?i:s,r=1),t=tt(t);++a<r;){var d=n[a];d&&e(t,d,a,s)}return t})}function si(e,t){return function(n,a){if(null==n)return n;if(!go(n))return e(n,a);for(var r=n.length,i=t?r:-1,s=tt(n);(t?i--:++i<r)&&!1!==a(s[i],i,s););return n}}function oi(e){return function(t,n,a){for(var r=-1,i=tt(t),s=a(t),o=s.length;o--;){var d=s[e?o:++r];if(!1===n(i[d],d,i))break}return t}}function di(e){return function(t){var n=Dn(t=Jo(t))?Pn(t):i,a=n?n[0]:t.charAt(0),r=n?qr(n,1).join(""):t.slice(1);return a[e]()+r}}function ui(e){return function(t){return tn(bd(pd(t).replace(yt,"")),e,"")}}function li(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=ma(e.prototype),a=e.apply(n,t);return To(a)?a:n}}function _i(e){return function(t,n,a){var r=tt(t);if(!go(t)){var s=Wi(n,3);t=rd(t),n=function(e){return s(r[e],e,r)}}var o=e(t,n,a);return o>-1?r[s?t[o]:o]:i}}function ci(e){return Si(function(t){var n=t.length,a=n,r=pa.prototype.thru;for(e&&t.reverse();a--;){var s=t[a];if("function"!=typeof s)throw new rt(d);if(r&&!o&&"wrapper"==Oi(s))var o=new pa([],!0)}for(a=o?a:n;++a<n;){var u=Oi(s=t[a]),l="wrapper"==u?Pi(s):i;o=l&&qi(l[0])&&l[1]==(b|v|Y|D)&&!l[4].length&&1==l[9]?o[Oi(l[0])].apply(o,l[3]):1==s.length&&qi(s)?o[u]():o.thru(s)}return function(){var e=arguments,a=e[0];if(o&&1==e.length&&Mo(a))return o.plant(a).value();for(var r=0,i=n?t[r].apply(this,e):a;++r<n;)i=t[r].call(this,i);return i}})}function hi(e,t,n,r,s,o,d,u,l,_){var c=t&b,h=t&M,m=t&y,f=t&(v|L),p=t&w,g=m?i:li(e);return function M(){for(var y=arguments.length,v=a(y),L=y;L--;)v[L]=arguments[L];if(f)var Y=Ai(M),k=function(e,t){for(var n=e.length,a=0;n--;)e[n]===t&&++a;return a}(v,Y);if(r&&(v=ei(v,r,s,f)),o&&(v=ti(v,o,d,f)),y-=k,f&&y<_){var b=xn(v,Y);return vi(e,t,hi,M.placeholder,n,v,b,u,l,_-y)}var D=h?n:this,w=m?D[e]:e;return y=v.length,u?v=function(e,t){for(var n=e.length,a=Un(t.length,n),r=ni(e);a--;){var s=t[a];e[a]=Ji(s,n)?r[s]:i}return e}(v,u):p&&y>1&&v.reverse(),c&&l<y&&(v.length=l),this&&this!==Ot&&this instanceof M&&(w=g||li(w)),w.apply(D,v)}}function mi(e,t){return function(n,a){return function(e,t,n,a){return Ga(e,function(e,r,i){t(a,n(e),r,i)}),a}(n,e,t(a),{})}}function fi(e,t){return function(n,a){var r;if(n===i&&a===i)return t;if(n!==i&&(r=n),a!==i){if(r===i)return a;"string"==typeof n||"string"==typeof a?(n=Fr(n),a=Fr(a)):(n=Wr(n),a=Wr(a)),r=e(n,a)}return r}}function pi(e){return Si(function(t){return t=Qt(t,Mn(Wi())),kr(function(n){var a=this;return e(t,function(e){return Jt(e,a,n)})})})}function Mi(e,t){var n=(t=t===i?" ":Fr(t)).length;if(n<2)return n?Yr(t,e):t;var a=Yr(t,In(e/jn(t)));return Dn(t)?qr(Pn(a),0,e).join(""):a.slice(0,e)}function yi(e){return function(t,n,r){return r&&"number"!=typeof r&&Ui(t,n,r)&&(n=r=i),t=zo(t),n===i?(n=t,t=0):n=zo(n),function(e,t,n,r){for(var i=-1,s=Jn(In((t-e)/(n||1)),0),o=a(s);s--;)o[r?s:++i]=e,e+=n;return o}(t,n,r=r===i?t<n?1:-1:zo(r),e)}}function gi(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=Bo(t),n=Bo(n)),e(t,n)}}function vi(e,t,n,a,r,s,o,d,u,l){var _=t&v;t|=_?Y:k,(t&=~(_?k:Y))&g||(t&=~(M|y));var c=[e,t,r,_?s:i,_?o:i,_?i:s,_?i:o,d,u,l],h=n.apply(i,c);return qi(e)&&ns(h,c),h.placeholder=a,is(h,e,t)}function Li(e){var t=et[e];return function(e,n){if(e=Bo(e),(n=null==n?0:Un(Ro(n),292))&&Nn(e)){var a=(Jo(e)+"e").split("e");return+((a=(Jo(t(a[0]+"e"+(+a[1]+n)))+"e").split("e"))[0]+"e"+(+a[1]-n))}return t(e)}}var Yi=ea&&1/Sn(new ea([,-0]))[1]==O?function(e){return new ea(e)}:Wd;function ki(e){return function(t){var n=Ri(t);return n==K?wn(t):n==ne?Hn(t):function(e,t){return Qt(t,function(t){return[t,e[t]]})}(t,e(t))}}function bi(e,t,n,r,s,o,u,l){var c=t&y;if(!c&&"function"!=typeof e)throw new rt(d);var h=r?r.length:0;if(h||(t&=~(Y|k),r=s=i),u=u===i?u:Jn(Ro(u),0),l=l===i?l:Ro(l),h-=s?s.length:0,t&k){var m=r,f=s;r=s=i}var p=c?i:Pi(e),w=[e,t,n,r,s,m,f,o,u,l];if(p&&function(e,t){var n=e[1],a=t[1],r=n|a,i=r<(M|y|b),s=a==b&&n==v||a==b&&n==D&&e[7].length<=t[8]||a==(b|D)&&t[7].length<=t[8]&&n==v;if(!i&&!s)return e;a&M&&(e[2]=t[2],r|=n&M?0:g);var o=t[3];if(o){var d=e[3];e[3]=d?ei(d,o,t[4]):o,e[4]=d?xn(e[3],_):t[4]}(o=t[5])&&(d=e[5],e[5]=d?ti(d,o,t[6]):o,e[6]=d?xn(e[5],_):t[6]);(o=t[7])&&(e[7]=o);a&b&&(e[8]=null==e[8]?t[8]:Un(e[8],t[8]));null==e[9]&&(e[9]=t[9]);e[0]=t[0],e[1]=r}(w,p),e=w[0],t=w[1],n=w[2],r=w[3],s=w[4],!(l=w[9]=w[9]===i?c?0:e.length:Jn(w[9]-h,0))&&t&(v|L)&&(t&=~(v|L)),t&&t!=M)T=t==v||t==L?function(e,t,n){var r=li(e);return function s(){for(var o=arguments.length,d=a(o),u=o,l=Ai(s);u--;)d[u]=arguments[u];var _=o<3&&d[0]!==l&&d[o-1]!==l?[]:xn(d,l);return(o-=_.length)<n?vi(e,t,hi,s.placeholder,i,d,_,i,i,n-o):Jt(this&&this!==Ot&&this instanceof s?r:e,this,d)}}(e,t,l):t!=Y&&t!=(M|Y)||s.length?hi.apply(i,w):function(e,t,n,r){var i=t&M,s=li(e);return function t(){for(var o=-1,d=arguments.length,u=-1,l=r.length,_=a(l+d),c=this&&this!==Ot&&this instanceof t?s:e;++u<l;)_[u]=r[u];for(;d--;)_[u++]=arguments[++o];return Jt(c,i?n:this,_)}}(e,t,n,r);else var T=function(e,t,n){var a=t&M,r=li(e);return function t(){return(this&&this!==Ot&&this instanceof t?r:e).apply(a?n:this,arguments)}}(e,t,n);return is((p?Tr:ns)(T,w),e,t)}function Di(e,t,n,a){return e===i||ho(e,ot[n])&&!lt.call(a,n)?t:e}function wi(e,t,n,a,r,s){return To(e)&&To(t)&&(s.set(t,e),fr(e,t,i,wi,s),s.delete(t)),e}function Ti(e){return jo(e)?i:e}function xi(e,t,n,a,r,s){var o=n&f,d=e.length,u=t.length;if(d!=u&&!(o&&u>d))return!1;var l=s.get(e);if(l&&s.get(t))return l==t;var _=-1,c=!0,h=n&p?new La:i;for(s.set(e,t),s.set(t,e);++_<d;){var m=e[_],M=t[_];if(a)var y=o?a(M,m,_,t,e,s):a(m,M,_,e,t,s);if(y!==i){if(y)continue;c=!1;break}if(h){if(!an(t,function(e,t){if(!gn(h,t)&&(m===e||r(m,e,n,a,s)))return h.push(t)})){c=!1;break}}else if(m!==M&&!r(m,M,n,a,s)){c=!1;break}}return s.delete(e),s.delete(t),c}function Si(e){return rs(Qi(e,i,Ms),e+"")}function Hi(e){return Za(e,rd,Ei)}function ji(e){return Za(e,id,zi)}var Pi=aa?function(e){return aa.get(e)}:Wd;function Oi(e){for(var t=e.name+"",n=ra[t],a=lt.call(ra,t)?n.length:0;a--;){var r=n[a],i=r.func;if(null==i||i==e)return r.name}return t}function Ai(e){return(lt.call(ha,"placeholder")?ha:e).placeholder}function Wi(){var e=ha.iteratee||jd;return e=e===jd?dr:e,arguments.length?e(arguments[0],arguments[1]):e}function Fi(e,t){var n,a,r=e.__data__;return("string"==(a=typeof(n=t))||"number"==a||"symbol"==a||"boolean"==a?"__proto__"!==n:null===n)?r["string"==typeof t?"string":"hash"]:r.map}function Ci(e){for(var t=rd(e),n=t.length;n--;){var a=t[n],r=e[a];t[n]=[a,r,Zi(r)]}return t}function Ii(e,t){var n=function(e,t){return null==e?i:e[t]}(e,t);return or(n)?n:i}var Ei=zn?function(e){return null==e?[]:(e=tt(e),Kt(zn(e),function(t){return At.call(e,t)}))}:Nd,zi=zn?function(e){for(var t=[];e;)en(t,Ei(e)),e=jt(e);return t}:Nd,Ri=Xa;function Ni(e,t,n){for(var a=-1,r=(t=Ur(t,e)).length,i=!1;++a<r;){var s=us(t[a]);if(!(i=null!=e&&n(e,s)))break;e=e[s]}return i||++a!=r?i:!!(r=null==e?0:e.length)&&wo(r)&&Ji(s,r)&&(Mo(e)||po(e))}function Bi(e){return"function"!=typeof e.constructor||Ki(e)?{}:ma(jt(e))}function Vi(e){return Mo(e)||po(e)||!!(Ct&&e&&e[Ct])}function Ji(e,t){var n=typeof e;return!!(t=null==t?A:t)&&("number"==n||"symbol"!=n&&qe.test(e))&&e>-1&&e%1==0&&e<t}function Ui(e,t,n){if(!To(n))return!1;var a=typeof t;return!!("number"==a?go(n)&&Ji(t,n.length):"string"==a&&t in n)&&ho(n[t],e)}function Gi(e,t){if(Mo(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Wo(e))||(He.test(e)||!Se.test(e)||null!=t&&e in tt(t))}function qi(e){var t=Oi(e),n=ha[t];if("function"!=typeof n||!(t in Ma.prototype))return!1;if(e===n)return!0;var a=Pi(n);return!!a&&e===a[0]}(Zn&&Ri(new Zn(new ArrayBuffer(1)))!=ue||Xn&&Ri(new Xn)!=K||Qn&&"[object Promise]"!=Ri(Qn.resolve())||ea&&Ri(new ea)!=ne||ta&&Ri(new ta)!=se)&&(Ri=function(e){var t=Xa(e),n=t==Q?e.constructor:i,a=n?ls(n):"";if(a)switch(a){case ia:return ue;case sa:return K;case oa:return"[object Promise]";case da:return ne;case ua:return se}return t});var $i=dt?bo:Bd;function Ki(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||ot)}function Zi(e){return e==e&&!To(e)}function Xi(e,t){return function(n){return null!=n&&(n[e]===t&&(t!==i||e in tt(n)))}}function Qi(e,t,n){return t=Jn(t===i?e.length-1:t,0),function(){for(var r=arguments,i=-1,s=Jn(r.length-t,0),o=a(s);++i<s;)o[i]=r[t+i];i=-1;for(var d=a(t+1);++i<t;)d[i]=r[i];return d[t]=n(o),Jt(e,this,d)}}function es(e,t){return t.length<2?e:Ka(e,Hr(t,0,-1))}function ts(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var ns=ss(Tr),as=Cn||function(e,t){return Ot.setTimeout(e,t)},rs=ss(xr);function is(e,t,n){var a=t+"";return rs(e,function(e,t){var n=t.length;if(!n)return e;var a=n-1;return t[a]=(n>1?"& ":"")+t[a],t=t.join(n>2?", ":" "),e.replace(Ce,"{\n/* [wrapped with "+t+"] */\n")}(a,function(e,t){return Gt(z,function(n){var a="_."+n[0];t&n[1]&&!Zt(e,a)&&e.push(a)}),e.sort()}(function(e){var t=e.match(Ie);return t?t[1].split(Ee):[]}(a),n)))}function ss(e){var t=0,n=0;return function(){var a=Gn(),r=H-(a-n);if(n=a,r>0){if(++t>=S)return arguments[0]}else t=0;return e.apply(i,arguments)}}function os(e,t){var n=-1,a=e.length,r=a-1;for(t=t===i?a:t;++n<t;){var s=Lr(n,r),o=e[s];e[s]=e[n],e[n]=o}return e.length=t,e}var ds=function(e){var t=so(e,function(e){return n.size===l&&n.clear(),e}),n=t.cache;return t}(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(je,function(e,n,a,r){t.push(a?r.replace(Re,"$1"):n||e)}),t});function us(e){if("string"==typeof e||Wo(e))return e;var t=e+"";return"0"==t&&1/e==-O?"-0":t}function ls(e){if(null!=e){try{return ut.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function _s(e){if(e instanceof Ma)return e.clone();var t=new pa(e.__wrapped__,e.__chain__);return t.__actions__=ni(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var cs=kr(function(e,t){return vo(e)?Ia(e,Va(t,1,vo,!0)):[]}),hs=kr(function(e,t){var n=Ys(t);return vo(n)&&(n=i),vo(e)?Ia(e,Va(t,1,vo,!0),Wi(n,2)):[]}),ms=kr(function(e,t){var n=Ys(t);return vo(n)&&(n=i),vo(e)?Ia(e,Va(t,1,vo,!0),i,n):[]});function fs(e,t,n){var a=null==e?0:e.length;if(!a)return-1;var r=null==n?0:Ro(n);return r<0&&(r=Jn(a+r,0)),on(e,Wi(t,3),r)}function ps(e,t,n){var a=null==e?0:e.length;if(!a)return-1;var r=a-1;return n!==i&&(r=Ro(n),r=n<0?Jn(a+r,0):Un(r,a-1)),on(e,Wi(t,3),r,!0)}function Ms(e){return(null==e?0:e.length)?Va(e,1):[]}function ys(e){return e&&e.length?e[0]:i}var gs=kr(function(e){var t=Qt(e,Vr);return t.length&&t[0]===e[0]?nr(t):[]}),vs=kr(function(e){var t=Ys(e),n=Qt(e,Vr);return t===Ys(n)?t=i:n.pop(),n.length&&n[0]===e[0]?nr(n,Wi(t,2)):[]}),Ls=kr(function(e){var t=Ys(e),n=Qt(e,Vr);return(t="function"==typeof t?t:i)&&n.pop(),n.length&&n[0]===e[0]?nr(n,i,t):[]});function Ys(e){var t=null==e?0:e.length;return t?e[t-1]:i}var ks=kr(bs);function bs(e,t){return e&&e.length&&t&&t.length?gr(e,t):e}var Ds=Si(function(e,t){var n=null==e?0:e.length,a=Oa(e,t);return vr(e,Qt(t,function(e){return Ji(e,n)?+e:e}).sort(Qr)),a});function ws(e){return null==e?e:Kn.call(e)}var Ts=kr(function(e){return Cr(Va(e,1,vo,!0))}),xs=kr(function(e){var t=Ys(e);return vo(t)&&(t=i),Cr(Va(e,1,vo,!0),Wi(t,2))}),Ss=kr(function(e){var t=Ys(e);return t="function"==typeof t?t:i,Cr(Va(e,1,vo,!0),i,t)});function Hs(e){if(!e||!e.length)return[];var t=0;return e=Kt(e,function(e){if(vo(e))return t=Jn(e.length,t),!0}),pn(t,function(t){return Qt(e,cn(t))})}function js(e,t){if(!e||!e.length)return[];var n=Hs(e);return null==t?n:Qt(n,function(e){return Jt(t,i,e)})}var Ps=kr(function(e,t){return vo(e)?Ia(e,t):[]}),Os=kr(function(e){return Nr(Kt(e,vo))}),As=kr(function(e){var t=Ys(e);return vo(t)&&(t=i),Nr(Kt(e,vo),Wi(t,2))}),Ws=kr(function(e){var t=Ys(e);return t="function"==typeof t?t:i,Nr(Kt(e,vo),i,t)}),Fs=kr(Hs);var Cs=kr(function(e){var t=e.length,n=t>1?e[t-1]:i;return n="function"==typeof n?(e.pop(),n):i,js(e,n)});function Is(e){var t=ha(e);return t.__chain__=!0,t}function Es(e,t){return t(e)}var zs=Si(function(e){var t=e.length,n=t?e[0]:0,a=this.__wrapped__,r=function(t){return Oa(t,e)};return!(t>1||this.__actions__.length)&&a instanceof Ma&&Ji(n)?((a=a.slice(n,+n+(t?1:0))).__actions__.push({func:Es,args:[r],thisArg:i}),new pa(a,this.__chain__).thru(function(e){return t&&!e.length&&e.push(i),e})):this.thru(r)});var Rs=ri(function(e,t,n){lt.call(e,n)?++e[n]:Pa(e,n,1)});var Ns=_i(fs),Bs=_i(ps);function Vs(e,t){return(Mo(e)?Gt:Ea)(e,Wi(t,3))}function Js(e,t){return(Mo(e)?qt:za)(e,Wi(t,3))}var Us=ri(function(e,t,n){lt.call(e,n)?e[n].push(t):Pa(e,n,[t])});var Gs=kr(function(e,t,n){var r=-1,i="function"==typeof t,s=go(e)?a(e.length):[];return Ea(e,function(e){s[++r]=i?Jt(t,e,n):ar(e,t,n)}),s}),qs=ri(function(e,t,n){Pa(e,n,t)});function $s(e,t){return(Mo(e)?Qt:cr)(e,Wi(t,3))}var Ks=ri(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]});var Zs=kr(function(e,t){if(null==e)return[];var n=t.length;return n>1&&Ui(e,t[0],t[1])?t=[]:n>2&&Ui(t[0],t[1],t[2])&&(t=[t[0]]),Mr(e,Va(t,1),[])}),Xs=Fn||function(){return Ot.Date.now()};function Qs(e,t,n){return t=n?i:t,t=e&&null==t?e.length:t,bi(e,b,i,i,i,i,t)}function eo(e,t){var n;if("function"!=typeof t)throw new rt(d);return e=Ro(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=i),n}}var to=kr(function(e,t,n){var a=M;if(n.length){var r=xn(n,Ai(to));a|=Y}return bi(e,a,t,n,r)}),no=kr(function(e,t,n){var a=M|y;if(n.length){var r=xn(n,Ai(no));a|=Y}return bi(t,a,e,n,r)});function ao(e,t,n){var a,r,s,o,u,l,_=0,c=!1,h=!1,m=!0;if("function"!=typeof e)throw new rt(d);function f(t){var n=a,s=r;return a=r=i,_=t,o=e.apply(s,n)}function p(e){var n=e-l;return l===i||n>=t||n<0||h&&e-_>=s}function M(){var e=Xs();if(p(e))return y(e);u=as(M,function(e){var n=t-(e-l);return h?Un(n,s-(e-_)):n}(e))}function y(e){return u=i,m&&a?f(e):(a=r=i,o)}function g(){var e=Xs(),n=p(e);if(a=arguments,r=this,l=e,n){if(u===i)return function(e){return _=e,u=as(M,t),c?f(e):o}(l);if(h)return $r(u),u=as(M,t),f(l)}return u===i&&(u=as(M,t)),o}return t=Bo(t)||0,To(n)&&(c=!!n.leading,s=(h="maxWait"in n)?Jn(Bo(n.maxWait)||0,t):s,m="trailing"in n?!!n.trailing:m),g.cancel=function(){u!==i&&$r(u),_=0,a=l=r=u=i},g.flush=function(){return u===i?o:y(Xs())},g}var ro=kr(function(e,t){return Ca(e,1,t)}),io=kr(function(e,t,n){return Ca(e,Bo(t)||0,n)});function so(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new rt(d);var n=function(){var a=arguments,r=t?t.apply(this,a):a[0],i=n.cache;if(i.has(r))return i.get(r);var s=e.apply(this,a);return n.cache=i.set(r,s)||i,s};return n.cache=new(so.Cache||va),n}function oo(e){if("function"!=typeof e)throw new rt(d);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}so.Cache=va;var uo=Gr(function(e,t){var n=(t=1==t.length&&Mo(t[0])?Qt(t[0],Mn(Wi())):Qt(Va(t,1),Mn(Wi()))).length;return kr(function(a){for(var r=-1,i=Un(a.length,n);++r<i;)a[r]=t[r].call(this,a[r]);return Jt(e,this,a)})}),lo=kr(function(e,t){var n=xn(t,Ai(lo));return bi(e,Y,i,t,n)}),_o=kr(function(e,t){var n=xn(t,Ai(_o));return bi(e,k,i,t,n)}),co=Si(function(e,t){return bi(e,D,i,i,i,t)});function ho(e,t){return e===t||e!=e&&t!=t}var mo=gi(Qa),fo=gi(function(e,t){return e>=t}),po=rr(function(){return arguments}())?rr:function(e){return xo(e)&&lt.call(e,"callee")&&!At.call(e,"callee")},Mo=a.isArray,yo=Et?Mn(Et):function(e){return xo(e)&&Xa(e)==de};function go(e){return null!=e&&wo(e.length)&&!bo(e)}function vo(e){return xo(e)&&go(e)}var Lo=Rn||Bd,Yo=zt?Mn(zt):function(e){return xo(e)&&Xa(e)==J};function ko(e){if(!xo(e))return!1;var t=Xa(e);return t==G||t==U||"string"==typeof e.message&&"string"==typeof e.name&&!jo(e)}function bo(e){if(!To(e))return!1;var t=Xa(e);return t==q||t==$||t==B||t==ee}function Do(e){return"number"==typeof e&&e==Ro(e)}function wo(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=A}function To(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function xo(e){return null!=e&&"object"==typeof e}var So=Rt?Mn(Rt):function(e){return xo(e)&&Ri(e)==K};function Ho(e){return"number"==typeof e||xo(e)&&Xa(e)==Z}function jo(e){if(!xo(e)||Xa(e)!=Q)return!1;var t=jt(e);if(null===t)return!0;var n=lt.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&ut.call(n)==mt}var Po=Nt?Mn(Nt):function(e){return xo(e)&&Xa(e)==te};var Oo=Bt?Mn(Bt):function(e){return xo(e)&&Ri(e)==ne};function Ao(e){return"string"==typeof e||!Mo(e)&&xo(e)&&Xa(e)==ae}function Wo(e){return"symbol"==typeof e||xo(e)&&Xa(e)==re}var Fo=Vt?Mn(Vt):function(e){return xo(e)&&wo(e.length)&&!!wt[Xa(e)]};var Co=gi(_r),Io=gi(function(e,t){return e<=t});function Eo(e){if(!e)return[];if(go(e))return Ao(e)?Pn(e):ni(e);if(It&&e[It])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[It]());var t=Ri(e);return(t==K?wn:t==ne?Sn:hd)(e)}function zo(e){return e?(e=Bo(e))===O||e===-O?(e<0?-1:1)*W:e==e?e:0:0===e?e:0}function Ro(e){var t=zo(e),n=t%1;return t==t?n?t-n:t:0}function No(e){return e?Aa(Ro(e),0,C):0}function Bo(e){if("number"==typeof e)return e;if(Wo(e))return F;if(To(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=To(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(Ae,"");var n=Je.test(e);return n||Ge.test(e)?Ht(e.slice(2),n?2:8):Ve.test(e)?F:+e}function Vo(e){return ai(e,id(e))}function Jo(e){return null==e?"":Fr(e)}var Uo=ii(function(e,t){if(Ki(t)||go(t))ai(t,rd(t),e);else for(var n in t)lt.call(t,n)&&xa(e,n,t[n])}),Go=ii(function(e,t){ai(t,id(t),e)}),qo=ii(function(e,t,n,a){ai(t,id(t),e,a)}),$o=ii(function(e,t,n,a){ai(t,rd(t),e,a)}),Ko=Si(Oa);var Zo=kr(function(e,t){e=tt(e);var n=-1,a=t.length,r=a>2?t[2]:i;for(r&&Ui(t[0],t[1],r)&&(a=1);++n<a;)for(var s=t[n],o=id(s),d=-1,u=o.length;++d<u;){var l=o[d],_=e[l];(_===i||ho(_,ot[l])&&!lt.call(e,l))&&(e[l]=s[l])}return e}),Xo=kr(function(e){return e.push(i,wi),Jt(od,i,e)});function Qo(e,t,n){var a=null==e?i:Ka(e,t);return a===i?n:a}function ed(e,t){return null!=e&&Ni(e,t,tr)}var td=mi(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=ht.call(t)),e[t]=n},Td(Hd)),nd=mi(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=ht.call(t)),lt.call(e,t)?e[t].push(n):e[t]=[n]},Wi),ad=kr(ar);function rd(e){return go(e)?ka(e):ur(e)}function id(e){return go(e)?ka(e,!0):lr(e)}var sd=ii(function(e,t,n){fr(e,t,n)}),od=ii(function(e,t,n,a){fr(e,t,n,a)}),dd=Si(function(e,t){var n={};if(null==e)return n;var a=!1;t=Qt(t,function(t){return t=Ur(t,e),a||(a=t.length>1),t}),ai(e,ji(e),n),a&&(n=Wa(n,c|h|m,Ti));for(var r=t.length;r--;)Ir(n,t[r]);return n});var ud=Si(function(e,t){return null==e?{}:function(e,t){return yr(e,t,function(t,n){return ed(e,n)})}(e,t)});function ld(e,t){if(null==e)return{};var n=Qt(ji(e),function(e){return[e]});return t=Wi(t),yr(e,n,function(e,n){return t(e,n[0])})}var _d=ki(rd),cd=ki(id);function hd(e){return null==e?[]:yn(e,rd(e))}var md=ui(function(e,t,n){return t=t.toLowerCase(),e+(n?fd(t):t)});function fd(e){return kd(Jo(e).toLowerCase())}function pd(e){return(e=Jo(e))&&e.replace($e,Yn).replace(gt,"")}var Md=ui(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),yd=ui(function(e,t,n){return e+(n?" ":"")+t.toLowerCase()}),gd=di("toLowerCase");var vd=ui(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()});var Ld=ui(function(e,t,n){return e+(n?" ":"")+kd(t)});var Yd=ui(function(e,t,n){return e+(n?" ":"")+t.toUpperCase()}),kd=di("toUpperCase");function bd(e,t,n){return e=Jo(e),(t=n?i:t)===i?function(e){return kt.test(e)}(e)?function(e){return e.match(Lt)||[]}(e):function(e){return e.match(ze)||[]}(e):e.match(t)||[]}var Dd=kr(function(e,t){try{return Jt(e,i,t)}catch(e){return ko(e)?e:new Xe(e)}}),wd=Si(function(e,t){return Gt(t,function(t){t=us(t),Pa(e,t,to(e[t],e))}),e});function Td(e){return function(){return e}}var xd=ci(),Sd=ci(!0);function Hd(e){return e}function jd(e){return dr("function"==typeof e?e:Wa(e,c))}var Pd=kr(function(e,t){return function(n){return ar(n,e,t)}}),Od=kr(function(e,t){return function(n){return ar(e,n,t)}});function Ad(e,t,n){var a=rd(t),r=$a(t,a);null!=n||To(t)&&(r.length||!a.length)||(n=t,t=e,e=this,r=$a(t,rd(t)));var i=!(To(n)&&"chain"in n&&!n.chain),s=bo(e);return Gt(r,function(n){var a=t[n];e[n]=a,s&&(e.prototype[n]=function(){var t=this.__chain__;if(i||t){var n=e(this.__wrapped__),r=n.__actions__=ni(this.__actions__);return r.push({func:a,args:arguments,thisArg:e}),n.__chain__=t,n}return a.apply(e,en([this.value()],arguments))})}),e}function Wd(){}var Fd=pi(Qt),Cd=pi($t),Id=pi(an);function Ed(e){return Gi(e)?cn(us(e)):function(e){return function(t){return Ka(t,e)}}(e)}var zd=yi(),Rd=yi(!0);function Nd(){return[]}function Bd(){return!1}var Vd=fi(function(e,t){return e+t},0),Jd=Li("ceil"),Ud=fi(function(e,t){return e/t},1),Gd=Li("floor");var qd,$d=fi(function(e,t){return e*t},1),Kd=Li("round"),Zd=fi(function(e,t){return e-t},0);return ha.after=function(e,t){if("function"!=typeof t)throw new rt(d);return e=Ro(e),function(){if(--e<1)return t.apply(this,arguments)}},ha.ary=Qs,ha.assign=Uo,ha.assignIn=Go,ha.assignInWith=qo,ha.assignWith=$o,ha.at=Ko,ha.before=eo,ha.bind=to,ha.bindAll=wd,ha.bindKey=no,ha.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return Mo(e)?e:[e]},ha.chain=Is,ha.chunk=function(e,t,n){t=(n?Ui(e,t,n):t===i)?1:Jn(Ro(t),0);var r=null==e?0:e.length;if(!r||t<1)return[];for(var s=0,o=0,d=a(In(r/t));s<r;)d[o++]=Hr(e,s,s+=t);return d},ha.compact=function(e){for(var t=-1,n=null==e?0:e.length,a=0,r=[];++t<n;){var i=e[t];i&&(r[a++]=i)}return r},ha.concat=function(){var e=arguments.length;if(!e)return[];for(var t=a(e-1),n=arguments[0],r=e;r--;)t[r-1]=arguments[r];return en(Mo(n)?ni(n):[n],Va(t,1))},ha.cond=function(e){var t=null==e?0:e.length,n=Wi();return e=t?Qt(e,function(e){if("function"!=typeof e[1])throw new rt(d);return[n(e[0]),e[1]]}):[],kr(function(n){for(var a=-1;++a<t;){var r=e[a];if(Jt(r[0],this,n))return Jt(r[1],this,n)}})},ha.conforms=function(e){return function(e){var t=rd(e);return function(n){return Fa(n,e,t)}}(Wa(e,c))},ha.constant=Td,ha.countBy=Rs,ha.create=function(e,t){var n=ma(e);return null==t?n:ja(n,t)},ha.curry=function e(t,n,a){var r=bi(t,v,i,i,i,i,i,n=a?i:n);return r.placeholder=e.placeholder,r},ha.curryRight=function e(t,n,a){var r=bi(t,L,i,i,i,i,i,n=a?i:n);return r.placeholder=e.placeholder,r},ha.debounce=ao,ha.defaults=Zo,ha.defaultsDeep=Xo,ha.defer=ro,ha.delay=io,ha.difference=cs,ha.differenceBy=hs,ha.differenceWith=ms,ha.drop=function(e,t,n){var a=null==e?0:e.length;return a?Hr(e,(t=n||t===i?1:Ro(t))<0?0:t,a):[]},ha.dropRight=function(e,t,n){var a=null==e?0:e.length;return a?Hr(e,0,(t=a-(t=n||t===i?1:Ro(t)))<0?0:t):[]},ha.dropRightWhile=function(e,t){return e&&e.length?zr(e,Wi(t,3),!0,!0):[]},ha.dropWhile=function(e,t){return e&&e.length?zr(e,Wi(t,3),!0):[]},ha.fill=function(e,t,n,a){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&Ui(e,t,n)&&(n=0,a=r),function(e,t,n,a){var r=e.length;for((n=Ro(n))<0&&(n=-n>r?0:r+n),(a=a===i||a>r?r:Ro(a))<0&&(a+=r),a=n>a?0:No(a);n<a;)e[n++]=t;return e}(e,t,n,a)):[]},ha.filter=function(e,t){return(Mo(e)?Kt:Ba)(e,Wi(t,3))},ha.flatMap=function(e,t){return Va($s(e,t),1)},ha.flatMapDeep=function(e,t){return Va($s(e,t),O)},ha.flatMapDepth=function(e,t,n){return n=n===i?1:Ro(n),Va($s(e,t),n)},ha.flatten=Ms,ha.flattenDeep=function(e){return(null==e?0:e.length)?Va(e,O):[]},ha.flattenDepth=function(e,t){return(null==e?0:e.length)?Va(e,t=t===i?1:Ro(t)):[]},ha.flip=function(e){return bi(e,w)},ha.flow=xd,ha.flowRight=Sd,ha.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,a={};++t<n;){var r=e[t];a[r[0]]=r[1]}return a},ha.functions=function(e){return null==e?[]:$a(e,rd(e))},ha.functionsIn=function(e){return null==e?[]:$a(e,id(e))},ha.groupBy=Us,ha.initial=function(e){return(null==e?0:e.length)?Hr(e,0,-1):[]},ha.intersection=gs,ha.intersectionBy=vs,ha.intersectionWith=Ls,ha.invert=td,ha.invertBy=nd,ha.invokeMap=Gs,ha.iteratee=jd,ha.keyBy=qs,ha.keys=rd,ha.keysIn=id,ha.map=$s,ha.mapKeys=function(e,t){var n={};return t=Wi(t,3),Ga(e,function(e,a,r){Pa(n,t(e,a,r),e)}),n},ha.mapValues=function(e,t){var n={};return t=Wi(t,3),Ga(e,function(e,a,r){Pa(n,a,t(e,a,r))}),n},ha.matches=function(e){return hr(Wa(e,c))},ha.matchesProperty=function(e,t){return mr(e,Wa(t,c))},ha.memoize=so,ha.merge=sd,ha.mergeWith=od,ha.method=Pd,ha.methodOf=Od,ha.mixin=Ad,ha.negate=oo,ha.nthArg=function(e){return e=Ro(e),kr(function(t){return pr(t,e)})},ha.omit=dd,ha.omitBy=function(e,t){return ld(e,oo(Wi(t)))},ha.once=function(e){return eo(2,e)},ha.orderBy=function(e,t,n,a){return null==e?[]:(Mo(t)||(t=null==t?[]:[t]),Mo(n=a?i:n)||(n=null==n?[]:[n]),Mr(e,t,n))},ha.over=Fd,ha.overArgs=uo,ha.overEvery=Cd,ha.overSome=Id,ha.partial=lo,ha.partialRight=_o,ha.partition=Ks,ha.pick=ud,ha.pickBy=ld,ha.property=Ed,ha.propertyOf=function(e){return function(t){return null==e?i:Ka(e,t)}},ha.pull=ks,ha.pullAll=bs,ha.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?gr(e,t,Wi(n,2)):e},ha.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?gr(e,t,i,n):e},ha.pullAt=Ds,ha.range=zd,ha.rangeRight=Rd,ha.rearg=co,ha.reject=function(e,t){return(Mo(e)?Kt:Ba)(e,oo(Wi(t,3)))},ha.remove=function(e,t){var n=[];if(!e||!e.length)return n;var a=-1,r=[],i=e.length;for(t=Wi(t,3);++a<i;){var s=e[a];t(s,a,e)&&(n.push(s),r.push(a))}return vr(e,r),n},ha.rest=function(e,t){if("function"!=typeof e)throw new rt(d);return kr(e,t=t===i?t:Ro(t))},ha.reverse=ws,ha.sampleSize=function(e,t,n){return t=(n?Ui(e,t,n):t===i)?1:Ro(t),(Mo(e)?Da:Dr)(e,t)},ha.set=function(e,t,n){return null==e?e:wr(e,t,n)},ha.setWith=function(e,t,n,a){return a="function"==typeof a?a:i,null==e?e:wr(e,t,n,a)},ha.shuffle=function(e){return(Mo(e)?wa:Sr)(e)},ha.slice=function(e,t,n){var a=null==e?0:e.length;return a?(n&&"number"!=typeof n&&Ui(e,t,n)?(t=0,n=a):(t=null==t?0:Ro(t),n=n===i?a:Ro(n)),Hr(e,t,n)):[]},ha.sortBy=Zs,ha.sortedUniq=function(e){return e&&e.length?Ar(e):[]},ha.sortedUniqBy=function(e,t){return e&&e.length?Ar(e,Wi(t,2)):[]},ha.split=function(e,t,n){return n&&"number"!=typeof n&&Ui(e,t,n)&&(t=n=i),(n=n===i?C:n>>>0)?(e=Jo(e))&&("string"==typeof t||null!=t&&!Po(t))&&!(t=Fr(t))&&Dn(e)?qr(Pn(e),0,n):e.split(t,n):[]},ha.spread=function(e,t){if("function"!=typeof e)throw new rt(d);return t=null==t?0:Jn(Ro(t),0),kr(function(n){var a=n[t],r=qr(n,0,t);return a&&en(r,a),Jt(e,this,r)})},ha.tail=function(e){var t=null==e?0:e.length;return t?Hr(e,1,t):[]},ha.take=function(e,t,n){return e&&e.length?Hr(e,0,(t=n||t===i?1:Ro(t))<0?0:t):[]},ha.takeRight=function(e,t,n){var a=null==e?0:e.length;return a?Hr(e,(t=a-(t=n||t===i?1:Ro(t)))<0?0:t,a):[]},ha.takeRightWhile=function(e,t){return e&&e.length?zr(e,Wi(t,3),!1,!0):[]},ha.takeWhile=function(e,t){return e&&e.length?zr(e,Wi(t,3)):[]},ha.tap=function(e,t){return t(e),e},ha.throttle=function(e,t,n){var a=!0,r=!0;if("function"!=typeof e)throw new rt(d);return To(n)&&(a="leading"in n?!!n.leading:a,r="trailing"in n?!!n.trailing:r),ao(e,t,{leading:a,maxWait:t,trailing:r})},ha.thru=Es,ha.toArray=Eo,ha.toPairs=_d,ha.toPairsIn=cd,ha.toPath=function(e){return Mo(e)?Qt(e,us):Wo(e)?[e]:ni(ds(Jo(e)))},ha.toPlainObject=Vo,ha.transform=function(e,t,n){var a=Mo(e),r=a||Lo(e)||Fo(e);if(t=Wi(t,4),null==n){var i=e&&e.constructor;n=r?a?new i:[]:To(e)&&bo(i)?ma(jt(e)):{}}return(r?Gt:Ga)(e,function(e,a,r){return t(n,e,a,r)}),n},ha.unary=function(e){return Qs(e,1)},ha.union=Ts,ha.unionBy=xs,ha.unionWith=Ss,ha.uniq=function(e){return e&&e.length?Cr(e):[]},ha.uniqBy=function(e,t){return e&&e.length?Cr(e,Wi(t,2)):[]},ha.uniqWith=function(e,t){return t="function"==typeof t?t:i,e&&e.length?Cr(e,i,t):[]},ha.unset=function(e,t){return null==e||Ir(e,t)},ha.unzip=Hs,ha.unzipWith=js,ha.update=function(e,t,n){return null==e?e:Er(e,t,Jr(n))},ha.updateWith=function(e,t,n,a){return a="function"==typeof a?a:i,null==e?e:Er(e,t,Jr(n),a)},ha.values=hd,ha.valuesIn=function(e){return null==e?[]:yn(e,id(e))},ha.without=Ps,ha.words=bd,ha.wrap=function(e,t){return lo(Jr(t),e)},ha.xor=Os,ha.xorBy=As,ha.xorWith=Ws,ha.zip=Fs,ha.zipObject=function(e,t){return Br(e||[],t||[],xa)},ha.zipObjectDeep=function(e,t){return Br(e||[],t||[],wr)},ha.zipWith=Cs,ha.entries=_d,ha.entriesIn=cd,ha.extend=Go,ha.extendWith=qo,Ad(ha,ha),ha.add=Vd,ha.attempt=Dd,ha.camelCase=md,ha.capitalize=fd,ha.ceil=Jd,ha.clamp=function(e,t,n){return n===i&&(n=t,t=i),n!==i&&(n=(n=Bo(n))==n?n:0),t!==i&&(t=(t=Bo(t))==t?t:0),Aa(Bo(e),t,n)},ha.clone=function(e){return Wa(e,m)},ha.cloneDeep=function(e){return Wa(e,c|m)},ha.cloneDeepWith=function(e,t){return Wa(e,c|m,t="function"==typeof t?t:i)},ha.cloneWith=function(e,t){return Wa(e,m,t="function"==typeof t?t:i)},ha.conformsTo=function(e,t){return null==t||Fa(e,t,rd(t))},ha.deburr=pd,ha.defaultTo=function(e,t){return null==e||e!=e?t:e},ha.divide=Ud,ha.endsWith=function(e,t,n){e=Jo(e),t=Fr(t);var a=e.length,r=n=n===i?a:Aa(Ro(n),0,a);return(n-=t.length)>=0&&e.slice(n,r)==t},ha.eq=ho,ha.escape=function(e){return(e=Jo(e))&&De.test(e)?e.replace(ke,kn):e},ha.escapeRegExp=function(e){return(e=Jo(e))&&Oe.test(e)?e.replace(Pe,"\\$&"):e},ha.every=function(e,t,n){var a=Mo(e)?$t:Ra;return n&&Ui(e,t,n)&&(t=i),a(e,Wi(t,3))},ha.find=Ns,ha.findIndex=fs,ha.findKey=function(e,t){return sn(e,Wi(t,3),Ga)},ha.findLast=Bs,ha.findLastIndex=ps,ha.findLastKey=function(e,t){return sn(e,Wi(t,3),qa)},ha.floor=Gd,ha.forEach=Vs,ha.forEachRight=Js,ha.forIn=function(e,t){return null==e?e:Ja(e,Wi(t,3),id)},ha.forInRight=function(e,t){return null==e?e:Ua(e,Wi(t,3),id)},ha.forOwn=function(e,t){return e&&Ga(e,Wi(t,3))},ha.forOwnRight=function(e,t){return e&&qa(e,Wi(t,3))},ha.get=Qo,ha.gt=mo,ha.gte=fo,ha.has=function(e,t){return null!=e&&Ni(e,t,er)},ha.hasIn=ed,ha.head=ys,ha.identity=Hd,ha.includes=function(e,t,n,a){e=go(e)?e:hd(e),n=n&&!a?Ro(n):0;var r=e.length;return n<0&&(n=Jn(r+n,0)),Ao(e)?n<=r&&e.indexOf(t,n)>-1:!!r&&dn(e,t,n)>-1},ha.indexOf=function(e,t,n){var a=null==e?0:e.length;if(!a)return-1;var r=null==n?0:Ro(n);return r<0&&(r=Jn(a+r,0)),dn(e,t,r)},ha.inRange=function(e,t,n){return t=zo(t),n===i?(n=t,t=0):n=zo(n),function(e,t,n){return e>=Un(t,n)&&e<Jn(t,n)}(e=Bo(e),t,n)},ha.invoke=ad,ha.isArguments=po,ha.isArray=Mo,ha.isArrayBuffer=yo,ha.isArrayLike=go,ha.isArrayLikeObject=vo,ha.isBoolean=function(e){return!0===e||!1===e||xo(e)&&Xa(e)==V},ha.isBuffer=Lo,ha.isDate=Yo,ha.isElement=function(e){return xo(e)&&1===e.nodeType&&!jo(e)},ha.isEmpty=function(e){if(null==e)return!0;if(go(e)&&(Mo(e)||"string"==typeof e||"function"==typeof e.splice||Lo(e)||Fo(e)||po(e)))return!e.length;var t=Ri(e);if(t==K||t==ne)return!e.size;if(Ki(e))return!ur(e).length;for(var n in e)if(lt.call(e,n))return!1;return!0},ha.isEqual=function(e,t){return ir(e,t)},ha.isEqualWith=function(e,t,n){var a=(n="function"==typeof n?n:i)?n(e,t):i;return a===i?ir(e,t,i,n):!!a},ha.isError=ko,ha.isFinite=function(e){return"number"==typeof e&&Nn(e)},ha.isFunction=bo,ha.isInteger=Do,ha.isLength=wo,ha.isMap=So,ha.isMatch=function(e,t){return e===t||sr(e,t,Ci(t))},ha.isMatchWith=function(e,t,n){return n="function"==typeof n?n:i,sr(e,t,Ci(t),n)},ha.isNaN=function(e){return Ho(e)&&e!=+e},ha.isNative=function(e){if($i(e))throw new Xe(o);return or(e)},ha.isNil=function(e){return null==e},ha.isNull=function(e){return null===e},ha.isNumber=Ho,ha.isObject=To,ha.isObjectLike=xo,ha.isPlainObject=jo,ha.isRegExp=Po,ha.isSafeInteger=function(e){return Do(e)&&e>=-A&&e<=A},ha.isSet=Oo,ha.isString=Ao,ha.isSymbol=Wo,ha.isTypedArray=Fo,ha.isUndefined=function(e){return e===i},ha.isWeakMap=function(e){return xo(e)&&Ri(e)==se},ha.isWeakSet=function(e){return xo(e)&&Xa(e)==oe},ha.join=function(e,t){return null==e?"":Bn.call(e,t)},ha.kebabCase=Md,ha.last=Ys,ha.lastIndexOf=function(e,t,n){var a=null==e?0:e.length;if(!a)return-1;var r=a;return n!==i&&(r=(r=Ro(n))<0?Jn(a+r,0):Un(r,a-1)),t==t?function(e,t,n){for(var a=n+1;a--;)if(e[a]===t)return a;return a}(e,t,r):on(e,ln,r,!0)},ha.lowerCase=yd,ha.lowerFirst=gd,ha.lt=Co,ha.lte=Io,ha.max=function(e){return e&&e.length?Na(e,Hd,Qa):i},ha.maxBy=function(e,t){return e&&e.length?Na(e,Wi(t,2),Qa):i},ha.mean=function(e){return _n(e,Hd)},ha.meanBy=function(e,t){return _n(e,Wi(t,2))},ha.min=function(e){return e&&e.length?Na(e,Hd,_r):i},ha.minBy=function(e,t){return e&&e.length?Na(e,Wi(t,2),_r):i},ha.stubArray=Nd,ha.stubFalse=Bd,ha.stubObject=function(){return{}},ha.stubString=function(){return""},ha.stubTrue=function(){return!0},ha.multiply=$d,ha.nth=function(e,t){return e&&e.length?pr(e,Ro(t)):i},ha.noConflict=function(){return Ot._===this&&(Ot._=ft),this},ha.noop=Wd,ha.now=Xs,ha.pad=function(e,t,n){e=Jo(e);var a=(t=Ro(t))?jn(e):0;if(!t||a>=t)return e;var r=(t-a)/2;return Mi(En(r),n)+e+Mi(In(r),n)},ha.padEnd=function(e,t,n){e=Jo(e);var a=(t=Ro(t))?jn(e):0;return t&&a<t?e+Mi(t-a,n):e},ha.padStart=function(e,t,n){e=Jo(e);var a=(t=Ro(t))?jn(e):0;return t&&a<t?Mi(t-a,n)+e:e},ha.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),qn(Jo(e).replace(We,""),t||0)},ha.random=function(e,t,n){if(n&&"boolean"!=typeof n&&Ui(e,t,n)&&(t=n=i),n===i&&("boolean"==typeof t?(n=t,t=i):"boolean"==typeof e&&(n=e,e=i)),e===i&&t===i?(e=0,t=1):(e=zo(e),t===i?(t=e,e=0):t=zo(t)),e>t){var a=e;e=t,t=a}if(n||e%1||t%1){var r=$n();return Un(e+r*(t-e+St("1e-"+((r+"").length-1))),t)}return Lr(e,t)},ha.reduce=function(e,t,n){var a=Mo(e)?tn:mn,r=arguments.length<3;return a(e,Wi(t,4),n,r,Ea)},ha.reduceRight=function(e,t,n){var a=Mo(e)?nn:mn,r=arguments.length<3;return a(e,Wi(t,4),n,r,za)},ha.repeat=function(e,t,n){return t=(n?Ui(e,t,n):t===i)?1:Ro(t),Yr(Jo(e),t)},ha.replace=function(){var e=arguments,t=Jo(e[0]);return e.length<3?t:t.replace(e[1],e[2])},ha.result=function(e,t,n){var a=-1,r=(t=Ur(t,e)).length;for(r||(r=1,e=i);++a<r;){var s=null==e?i:e[us(t[a])];s===i&&(a=r,s=n),e=bo(s)?s.call(e):s}return e},ha.round=Kd,ha.runInContext=e,ha.sample=function(e){return(Mo(e)?ba:br)(e)},ha.size=function(e){if(null==e)return 0;if(go(e))return Ao(e)?jn(e):e.length;var t=Ri(e);return t==K||t==ne?e.size:ur(e).length},ha.snakeCase=vd,ha.some=function(e,t,n){var a=Mo(e)?an:jr;return n&&Ui(e,t,n)&&(t=i),a(e,Wi(t,3))},ha.sortedIndex=function(e,t){return Pr(e,t)},ha.sortedIndexBy=function(e,t,n){return Or(e,t,Wi(n,2))},ha.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var a=Pr(e,t);if(a<n&&ho(e[a],t))return a}return-1},ha.sortedLastIndex=function(e,t){return Pr(e,t,!0)},ha.sortedLastIndexBy=function(e,t,n){return Or(e,t,Wi(n,2),!0)},ha.sortedLastIndexOf=function(e,t){if(null==e?0:e.length){var n=Pr(e,t,!0)-1;if(ho(e[n],t))return n}return-1},ha.startCase=Ld,ha.startsWith=function(e,t,n){return e=Jo(e),n=null==n?0:Aa(Ro(n),0,e.length),t=Fr(t),e.slice(n,n+t.length)==t},ha.subtract=Zd,ha.sum=function(e){return e&&e.length?fn(e,Hd):0},ha.sumBy=function(e,t){return e&&e.length?fn(e,Wi(t,2)):0},ha.template=function(e,t,n){var a=ha.templateSettings;n&&Ui(e,t,n)&&(t=i),e=Jo(e),t=qo({},t,a,Di);var r,s,o=qo({},t.imports,a.imports,Di),d=rd(o),u=yn(o,d),l=0,_=t.interpolate||Ke,c="__p += '",h=nt((t.escape||Ke).source+"|"+_.source+"|"+(_===xe?Ne:Ke).source+"|"+(t.evaluate||Ke).source+"|$","g"),m="//# sourceURL="+(lt.call(t,"sourceURL")?(t.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Dt+"]")+"\n";e.replace(h,function(t,n,a,i,o,d){return a||(a=i),c+=e.slice(l,d).replace(Ze,bn),n&&(r=!0,c+="' +\n__e("+n+") +\n'"),o&&(s=!0,c+="';\n"+o+";\n__p += '"),a&&(c+="' +\n((__t = ("+a+")) == null ? '' : __t) +\n'"),l=d+t.length,t}),c+="';\n";var f=lt.call(t,"variable")&&t.variable;f||(c="with (obj) {\n"+c+"\n}\n"),c=(s?c.replace(ge,""):c).replace(ve,"$1").replace(Le,"$1;"),c="function("+(f||"obj")+") {\n"+(f?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(r?", __e = _.escape":"")+(s?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+c+"return __p\n}";var p=Dd(function(){return Qe(d,m+"return "+c).apply(i,u)});if(p.source=c,ko(p))throw p;return p},ha.times=function(e,t){if((e=Ro(e))<1||e>A)return[];var n=C,a=Un(e,C);t=Wi(t),e-=C;for(var r=pn(a,t);++n<e;)t(n);return r},ha.toFinite=zo,ha.toInteger=Ro,ha.toLength=No,ha.toLower=function(e){return Jo(e).toLowerCase()},ha.toNumber=Bo,ha.toSafeInteger=function(e){return e?Aa(Ro(e),-A,A):0===e?e:0},ha.toString=Jo,ha.toUpper=function(e){return Jo(e).toUpperCase()},ha.trim=function(e,t,n){if((e=Jo(e))&&(n||t===i))return e.replace(Ae,"");if(!e||!(t=Fr(t)))return e;var a=Pn(e),r=Pn(t);return qr(a,vn(a,r),Ln(a,r)+1).join("")},ha.trimEnd=function(e,t,n){if((e=Jo(e))&&(n||t===i))return e.replace(Fe,"");if(!e||!(t=Fr(t)))return e;var a=Pn(e);return qr(a,0,Ln(a,Pn(t))+1).join("")},ha.trimStart=function(e,t,n){if((e=Jo(e))&&(n||t===i))return e.replace(We,"");if(!e||!(t=Fr(t)))return e;var a=Pn(e);return qr(a,vn(a,Pn(t))).join("")},ha.truncate=function(e,t){var n=T,a=x;if(To(t)){var r="separator"in t?t.separator:r;n="length"in t?Ro(t.length):n,a="omission"in t?Fr(t.omission):a}var s=(e=Jo(e)).length;if(Dn(e)){var o=Pn(e);s=o.length}if(n>=s)return e;var d=n-jn(a);if(d<1)return a;var u=o?qr(o,0,d).join(""):e.slice(0,d);if(r===i)return u+a;if(o&&(d+=u.length-d),Po(r)){if(e.slice(d).search(r)){var l,_=u;for(r.global||(r=nt(r.source,Jo(Be.exec(r))+"g")),r.lastIndex=0;l=r.exec(_);)var c=l.index;u=u.slice(0,c===i?d:c)}}else if(e.indexOf(Fr(r),d)!=d){var h=u.lastIndexOf(r);h>-1&&(u=u.slice(0,h))}return u+a},ha.unescape=function(e){return(e=Jo(e))&&be.test(e)?e.replace(Ye,On):e},ha.uniqueId=function(e){var t=++_t;return Jo(e)+t},ha.upperCase=Yd,ha.upperFirst=kd,ha.each=Vs,ha.eachRight=Js,ha.first=ys,Ad(ha,(qd={},Ga(ha,function(e,t){lt.call(ha.prototype,t)||(qd[t]=e)}),qd),{chain:!1}),ha.VERSION="4.17.15",Gt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){ha[e].placeholder=ha}),Gt(["drop","take"],function(e,t){Ma.prototype[e]=function(n){n=n===i?1:Jn(Ro(n),0);var a=this.__filtered__&&!t?new Ma(this):this.clone();return a.__filtered__?a.__takeCount__=Un(n,a.__takeCount__):a.__views__.push({size:Un(n,C),type:e+(a.__dir__<0?"Right":"")}),a},Ma.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),Gt(["filter","map","takeWhile"],function(e,t){var n=t+1,a=n==j||3==n;Ma.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Wi(e,3),type:n}),t.__filtered__=t.__filtered__||a,t}}),Gt(["head","last"],function(e,t){var n="take"+(t?"Right":"");Ma.prototype[e]=function(){return this[n](1).value()[0]}}),Gt(["initial","tail"],function(e,t){var n="drop"+(t?"":"Right");Ma.prototype[e]=function(){return this.__filtered__?new Ma(this):this[n](1)}}),Ma.prototype.compact=function(){return this.filter(Hd)},Ma.prototype.find=function(e){return this.filter(e).head()},Ma.prototype.findLast=function(e){return this.reverse().find(e)},Ma.prototype.invokeMap=kr(function(e,t){return"function"==typeof e?new Ma(this):this.map(function(n){return ar(n,e,t)})}),Ma.prototype.reject=function(e){return this.filter(oo(Wi(e)))},Ma.prototype.slice=function(e,t){e=Ro(e);var n=this;return n.__filtered__&&(e>0||t<0)?new Ma(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==i&&(n=(t=Ro(t))<0?n.dropRight(-t):n.take(t-e)),n)},Ma.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Ma.prototype.toArray=function(){return this.take(C)},Ga(Ma.prototype,function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),a=/^(?:head|last)$/.test(t),r=ha[a?"take"+("last"==t?"Right":""):t],s=a||/^find/.test(t);r&&(ha.prototype[t]=function(){var t=this.__wrapped__,o=a?[1]:arguments,d=t instanceof Ma,u=o[0],l=d||Mo(t),_=function(e){var t=r.apply(ha,en([e],o));return a&&c?t[0]:t};l&&n&&"function"==typeof u&&1!=u.length&&(d=l=!1);var c=this.__chain__,h=!!this.__actions__.length,m=s&&!c,f=d&&!h;if(!s&&l){t=f?t:new Ma(this);var p=e.apply(t,o);return p.__actions__.push({func:Es,args:[_],thisArg:i}),new pa(p,c)}return m&&f?e.apply(this,o):(p=this.thru(_),m?a?p.value()[0]:p.value():p)})}),Gt(["pop","push","shift","sort","splice","unshift"],function(e){var t=it[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",a=/^(?:pop|shift)$/.test(e);ha.prototype[e]=function(){var e=arguments;if(a&&!this.__chain__){var r=this.value();return t.apply(Mo(r)?r:[],e)}return this[n](function(n){return t.apply(Mo(n)?n:[],e)})}}),Ga(Ma.prototype,function(e,t){var n=ha[t];if(n){var a=n.name+"";lt.call(ra,a)||(ra[a]=[]),ra[a].push({name:t,func:n})}}),ra[hi(i,y).name]=[{name:"wrapper",func:i}],Ma.prototype.clone=function(){var e=new Ma(this.__wrapped__);return e.__actions__=ni(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=ni(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=ni(this.__views__),e},Ma.prototype.reverse=function(){if(this.__filtered__){var e=new Ma(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},Ma.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=Mo(e),a=t<0,r=n?e.length:0,i=function(e,t,n){var a=-1,r=n.length;for(;++a<r;){var i=n[a],s=i.size;switch(i.type){case"drop":e+=s;break;case"dropRight":t-=s;break;case"take":t=Un(t,e+s);break;case"takeRight":e=Jn(e,t-s)}}return{start:e,end:t}}(0,r,this.__views__),s=i.start,o=i.end,d=o-s,u=a?o:s-1,l=this.__iteratees__,_=l.length,c=0,h=Un(d,this.__takeCount__);if(!n||!a&&r==d&&h==d)return Rr(e,this.__actions__);var m=[];e:for(;d--&&c<h;){for(var f=-1,p=e[u+=t];++f<_;){var M=l[f],y=M.iteratee,g=M.type,v=y(p);if(g==P)p=v;else if(!v){if(g==j)continue e;break e}}m[c++]=p}return m},ha.prototype.at=zs,ha.prototype.chain=function(){return Is(this)},ha.prototype.commit=function(){return new pa(this.value(),this.__chain__)},ha.prototype.next=function(){this.__values__===i&&(this.__values__=Eo(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?i:this.__values__[this.__index__++]}},ha.prototype.plant=function(e){for(var t,n=this;n instanceof fa;){var a=_s(n);a.__index__=0,a.__values__=i,t?r.__wrapped__=a:t=a;var r=a;n=n.__wrapped__}return r.__wrapped__=e,t},ha.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof Ma){var t=e;return this.__actions__.length&&(t=new Ma(this)),(t=t.reverse()).__actions__.push({func:Es,args:[ws],thisArg:i}),new pa(t,this.__chain__)}return this.thru(ws)},ha.prototype.toJSON=ha.prototype.valueOf=ha.prototype.value=function(){return Rr(this.__wrapped__,this.__actions__)},ha.prototype.first=ha.prototype.head,It&&(ha.prototype[It]=function(){return this}),ha}();Ot._=An,(r=function(){return An}.call(t,n,t,a))===i||(a.exports=r)}).call(this)}).call(this,n(133),n(1)(e))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){if(void 0===a)var a=n(0);!function(e){var t={nodiff:"",year:"year",years:"years",month:"month",months:"months",day:"day",days:"days",hour:"hour",hours:"hours",minute:"minute",minutes:"minutes",second:"second",seconds:"seconds",delimiter:" "};function n(e,n){return e+" "+t[n+(1===e?"":"s")]}function a(e,t,n,a,r,i,s){return{years:e,months:t,days:n,hours:a,minutes:r,seconds:i,firstDateWasLater:s}}e.fn.preciseDiff=function(t,n){return e.preciseDiff(this,t,n)},e.preciseDiff=function(r,i,s){var o,d=e(r),u=e(i);if(d.add(u.utcOffset()-d.utcOffset(),"minutes"),d.isSame(u))return s?a(0,0,0,0,0,0,!1):t.nodiff;if(d.isAfter(u)){var l=d;d=u,u=l,o=!0}else o=!1;var _=u.year()-d.year(),c=u.month()-d.month(),h=u.date()-d.date(),m=u.hour()-d.hour(),f=u.minute()-d.minute(),p=u.second()-d.second();if(p<0&&(p=60+p,f--),f<0&&(f=60+f,m--),m<0&&(m=24+m,h--),h<0){var M=e(u.year()+"-"+(u.month()+1),"YYYY-MM").subtract(1,"M").daysInMonth();h=M<d.date()?M+h+(d.date()-M):M+h,c--}return c<0&&(c=12+c,_--),s?a(_,c,h,m,f,p,o):function(e,a,r,i,s,o){var d=[];return e&&d.push(n(e,"year")),a&&d.push(n(a,"month")),r&&d.push(n(r,"day")),i&&d.push(n(i,"hour")),s&&d.push(n(s,"minute")),o&&d.push(n(o,"second")),d.join(t.delimiter)}(_,c,h,m,f,p)}}(a)},function(e,t,n){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=a(n(136)),s=r("2019-05-01");t.Birthday=s;var o=[];t.WeightMeasures=o,o.push(i.default.BuildWeightMeasurement("2019-06-27",2.3)),o.push(i.default.BuildWeightMeasurement("2019-07-12",3.06)),o.push(i.default.BuildWeightMeasurement("2019-08-03",4.3)),o.push(i.default.BuildWeightMeasurement("2019-08-23",6.13)),o.push(i.default.BuildWeightMeasurement("2019-11-18",8.4))},function(e,t,n){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=function(){function e(e,t){this.Date=e,this.Weight=t}return e.BuildWeightMeasurement=function(t,n){return new e(r.default(t).startOf("day"),n)},e.prototype.asChartData=function(){return{x:this.Date.format("YYYY-MM-DD"),y:this.Weight}},e}();t.default=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,